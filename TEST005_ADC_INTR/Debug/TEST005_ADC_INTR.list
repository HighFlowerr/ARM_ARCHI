
TEST005_ADC_INTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080055f0  080055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005790  08005790  00007074  2**0
                  CONTENTS
  4 .ARM          00000008  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005798  08005798  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080057a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000074  08005814  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08005814  0000762c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1db  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232a  00000000  00000000  0001627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  000185b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0b  00000000  00000000  000193d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001867b  00000000  00000000  00019ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107de  00000000  00000000  0003255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc71  00000000  00000000  00042d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de9ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046dc  00000000  00000000  000de9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e30cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055d8 	.word	0x080055d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080055d8 	.word	0x080055d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
int x, y = 12, idx = 0;
int v = 0;
int cx = 39, cy = 12;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Start(&hadc1);
	//HAL_ADC_PollForConversion(&hadc1, 1000); // start Trigger

	int v = HAL_ADC_GetValue(&hadc1)/1400 - 1; //(0~4096/1400)-1 = -1 0 1
 8000d64:	4815      	ldr	r0, [pc, #84]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0x60>)
 8000d66:	f001 f88d 	bl	8001e84 <HAL_ADC_GetValue>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
	if(idx == 0) x = cx+ v; else y = cy+ v;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x68>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d106      	bne.n	8000d8e <HAL_ADC_ConvCpltCallback+0x32>
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_ADC_ConvCpltCallback+0x70>)
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e005      	b.n	8000d9a <HAL_ADC_ConvCpltCallback+0x3e>
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x74>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x78>)
 8000d98:	6013      	str	r3, [r2, #0]
	//printf("ADC value : %d\r\n", v);
	//HAL_Delay(200);
	if(++idx == 2) idx = 0;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x68>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x68>)
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d102      	bne.n	8000db2 <HAL_ADC_ConvCpltCallback+0x56>
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x68>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	5d9f7391 	.word	0x5d9f7391
 8000dc4:	200001b4 	.word	0x200001b4
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	200001b0 	.word	0x200001b0
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000de2:	f000 fe81 	bl	8001ae8 <HAL_ADC_Start_IT>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000090 	.word	0x20000090
 8000df4:	00000000 	.word	0x00000000

08000df8 <MakeItem>:

int xa[100],ya[100];
void MakeItem()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
	int i;
	//srand(htim4.Instance->CNT);
	srand(hadc1.Instance->DR);
 8000dfe:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <MakeItem+0xd0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fb2d 	bl	8004464 <srand>
	for(i=0;i<100;i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e04c      	b.n	8000eaa <MakeItem+0xb2>
	{
		int v1 =  rand();  //0 ~ 2,147,483,647
 8000e10:	f003 fb56 	bl	80044c0 <rand>
 8000e14:	60b8      	str	r0, [r7, #8]
		int v2 =  rand();
 8000e16:	f003 fb53 	bl	80044c0 <rand>
 8000e1a:	6078      	str	r0, [r7, #4]
		//printf("v : %d\r\n", x);
		//HAL_Delay(100);
		xa[i] = (((double)v1 / 2147483647.)) * 80;
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f7ff fb81 	bl	8000524 <__aeabi_i2d>
 8000e22:	a327      	add	r3, pc, #156	@ (adr r3, 8000ec0 <MakeItem+0xc8>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fd10 	bl	800084c <__aeabi_ddiv>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MakeItem+0xd4>)
 8000e3a:	f7ff fbdd 	bl	80005f8 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff fde9 	bl	8000a1c <__aeabi_d2iz>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4920      	ldr	r1, [pc, #128]	@ (8000ed0 <MakeItem+0xd8>)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ya[i] = (((double)v2 / 2147483647.)) * 24;
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fb65 	bl	8000524 <__aeabi_i2d>
 8000e5a:	a319      	add	r3, pc, #100	@ (adr r3, 8000ec0 <MakeItem+0xc8>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fcf4 	bl	800084c <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <MakeItem+0xdc>)
 8000e72:	f7ff fbc1 	bl	80005f8 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fdcd 	bl	8000a1c <__aeabi_d2iz>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4914      	ldr	r1, [pc, #80]	@ (8000ed8 <MakeItem+0xe0>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//printf("[%d;%d](%d,%d)\r\n",v1, v2, xa[i], ya[i]);
		printf("\033[%d;%dHo",ya[i], xa[i]);
 8000e8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <MakeItem+0xe0>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <MakeItem+0xd8>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	480f      	ldr	r0, [pc, #60]	@ (8000edc <MakeItem+0xe4>)
 8000ea0:	f003 fc0e 	bl	80046c0 <iprintf>
	for(i=0;i<100;i++)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b63      	cmp	r3, #99	@ 0x63
 8000eae:	ddaf      	ble.n	8000e10 <MakeItem+0x18>
	}
	printf("\n");
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f003 fc17 	bl	80046e4 <putchar>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	ffc00000 	.word	0xffc00000
 8000ec4:	41dfffff 	.word	0x41dfffff
 8000ec8:	20000090 	.word	0x20000090
 8000ecc:	40540000 	.word	0x40540000
 8000ed0:	200001b8 	.word	0x200001b8
 8000ed4:	40380000 	.word	0x40380000
 8000ed8:	20000348 	.word	0x20000348
 8000edc:	080055f0 	.word	0x080055f0

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fd25 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f871 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fa03 	bl	80012f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ef2:	f000 f9d7 	bl	80012a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ef6:	f000 f8d5 	bl	80010a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000efa:	f000 f937 	bl	800116c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000efe:	f000 f983 	bl	8001208 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000f02:	4828      	ldr	r0, [pc, #160]	@ (8000fa4 <main+0xc4>)
 8000f04:	f002 f9c8 	bl	8003298 <HAL_TIM_Base_Start>
  ProgramStart("ADC_INTR");
 8000f08:	4827      	ldr	r0, [pc, #156]	@ (8000fa8 <main+0xc8>)
 8000f0a:	f000 faaf 	bl	800146c <ProgramStart>
  //HAL_ADC_Start_IT(&hadc1); //One time Command->Run 1 time only
  HAL_TIM_Base_Start_IT(&htim3);
 8000f0e:	4827      	ldr	r0, [pc, #156]	@ (8000fac <main+0xcc>)
 8000f10:	f002 fa1c 	bl	800334c <HAL_TIM_Base_Start_IT>
  printf("\033[2J\033[?25l\n");
 8000f14:	4826      	ldr	r0, [pc, #152]	@ (8000fb0 <main+0xd0>)
 8000f16:	f003 fc43 	bl	80047a0 <puts>
  MakeItem();
 8000f1a:	f7ff ff6d 	bl	8000df8 <MakeItem>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int sx = 80, sy = 24;
 8000f1e:	2350      	movs	r3, #80	@ 0x50
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	2318      	movs	r3, #24
 8000f24:	60bb      	str	r3, [r7, #8]

  while (1)
  {
	  //printf("Current ADC value : (%d, %d)\r\n", x, y);
	  x = (x > 78) ? 78 : (x < 0) ? 0 : x;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <main+0xd4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f2c:	dc04      	bgt.n	8000f38 <main+0x58>
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <main+0xd4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000f36:	e000      	b.n	8000f3a <main+0x5a>
 8000f38:	234e      	movs	r3, #78	@ 0x4e
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb4 <main+0xd4>)
 8000f3c:	6013      	str	r3, [r2, #0]
	  y = (y > 23) ? 23 : (y < 0) ? 0 : y;
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <main+0xd8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b17      	cmp	r3, #23
 8000f44:	dc04      	bgt.n	8000f50 <main+0x70>
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <main+0xd8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000f4e:	e000      	b.n	8000f52 <main+0x72>
 8000f50:	2317      	movs	r3, #23
 8000f52:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <main+0xd8>)
 8000f54:	6013      	str	r3, [r2, #0]
	  int z = HAL_GPIO_ReadPin(Z_Axis_GPIO_Port, Z_Axis_Pin);
 8000f56:	2101      	movs	r1, #1
 8000f58:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <main+0xdc>)
 8000f5a:	f001 fc83 	bl	8002864 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	607b      	str	r3, [r7, #4]
	  printf("\033[0;0HADC Value : (%d,%d,%d)", x, y, z);  // location info
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <main+0xd4>)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <main+0xd8>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <main+0xe0>)
 8000f6e:	f003 fba7 	bl	80046c0 <iprintf>
	  printf("\033[%d;%dH \033[%d;%dH@\033[A\n", cy, cx, y, x);
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <main+0xe4>)
 8000f74:	6819      	ldr	r1, [r3, #0]
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <main+0xe8>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <main+0xd8>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <main+0xd4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4603      	mov	r3, r0
 8000f86:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <main+0xec>)
 8000f88:	f003 fb9a 	bl	80046c0 <iprintf>
	  cx = x; cy = y;  //save current pos
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <main+0xd4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <main+0xe8>)
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <main+0xd8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <main+0xe4>)
 8000f9a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f000 fd3b 	bl	8001a18 <HAL_Delay>
  {
 8000fa2:	e7c0      	b.n	8000f26 <main+0x46>
 8000fa4:	20000120 	.word	0x20000120
 8000fa8:	080055fc 	.word	0x080055fc
 8000fac:	200000d8 	.word	0x200000d8
 8000fb0:	08005608 	.word	0x08005608
 8000fb4:	200001b0 	.word	0x200001b0
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	08005614 	.word	0x08005614
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	08005634 	.word	0x08005634

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	@ 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	@ 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 fcbe 	bl	8004960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	@ (800109c <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	@ (800109c <SystemClock_Config+0xcc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	@ 0x40
 8001004:	4b25      	ldr	r3, [pc, #148]	@ (800109c <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	@ (80010a0 <SystemClock_Config+0xd0>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001040:	2310      	movs	r3, #16
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001044:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001048:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800104a:	2304      	movs	r3, #4
 800104c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fc36 	bl	80028c8 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001062:	f000 f9c5 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2102      	movs	r1, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fe98 	bl	8002db8 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108e:	f000 f9af 	bl	80013f0 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	@ 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001164 <MX_ADC1_Init+0xc0>)
 80010ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c4:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d0:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010d6:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80010de:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <MX_ADC1_Init+0xc4>)
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_ADC1_Init+0xbc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_ADC1_Init+0xbc>)
 8001106:	2201      	movs	r2, #1
 8001108:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110a:	4815      	ldr	r0, [pc, #84]	@ (8001160 <MX_ADC1_Init+0xbc>)
 800110c:	f000 fca8 	bl	8001a60 <HAL_ADC_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8001116:	f000 f96b 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800111a:	230a      	movs	r3, #10
 800111c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_ADC1_Init+0xbc>)
 800112c:	f000 fecc 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001136:	f000 f95b 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800113a:	230b      	movs	r3, #11
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_ADC1_Init+0xbc>)
 8001148:	f000 febe 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001152:	f000 f94d 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000090 	.word	0x20000090
 8001164:	40012000 	.word	0x40012000
 8001168:	0f000001 	.word	0x0f000001

0800116c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_TIM3_Init+0x94>)
 800118a:	4a1e      	ldr	r2, [pc, #120]	@ (8001204 <MX_TIM3_Init+0x98>)
 800118c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_TIM3_Init+0x94>)
 8001190:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_TIM3_Init+0x94>)
 800119e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80011a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011b2:	f002 f821 	bl	80031f8 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011bc:	f000 f918 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011ce:	f002 fa0f 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 f90a 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011ea:	f002 fc17 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 f8fc 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000d8 	.word	0x200000d8
 8001204:	40000400 	.word	0x40000400

08001208 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_TIM4_Init+0x94>)
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <MX_TIM4_Init+0x98>)
 8001228:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800122a:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <MX_TIM4_Init+0x94>)
 800122c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001230:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_TIM4_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_TIM4_Init+0x94>)
 800123a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800123e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_TIM4_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_TIM4_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800124c:	4813      	ldr	r0, [pc, #76]	@ (800129c <MX_TIM4_Init+0x94>)
 800124e:	f001 ffd3 	bl	80031f8 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001258:	f000 f8ca 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <MX_TIM4_Init+0x94>)
 800126a:	f002 f9c1 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 f8bc 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_TIM4_Init+0x94>)
 8001286:	f002 fbc9 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001290:	f000 f8ae 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000120 	.word	0x20000120
 80012a0:	40000800 	.word	0x40000800

080012a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <MX_USART2_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012dc:	f002 fc20 	bl	8003b20 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f883 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000168 	.word	0x20000168
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a32      	ldr	r2, [pc, #200]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a2b      	ldr	r2, [pc, #172]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_GPIO_Init+0xe8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <MX_GPIO_Init+0xec>)
 8001384:	f001 fa86 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4812      	ldr	r0, [pc, #72]	@ (80013e8 <MX_GPIO_Init+0xf0>)
 80013a0:	f001 f8dc 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a4:	2320      	movs	r3, #32
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <MX_GPIO_Init+0xec>)
 80013bc:	f001 f8ce 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_Axis_Pin */
  GPIO_InitStruct.Pin = Z_Axis_Pin;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_Axis_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <MX_GPIO_Init+0xf4>)
 80013d4:	f001 f8c2 	bl	800255c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020400 	.word	0x40020400

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <Error_Handler+0x8>

080013fc <__io_putchar>:
 */
#include "main.h"

extern UART_HandleTypeDef huart2;
int __io_putchar(int ch)//  1 char output to terminal
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	230a      	movs	r3, #10
 8001408:	2201      	movs	r2, #1
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <__io_putchar+0x20>)
 800140c:	f002 fbd8 	bl	8003bc0 <HAL_UART_Transmit>
	return ch;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000168 	.word	0x20000168

08001420 <__io_getchar>:
int __io_getchar(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	char ch;
	while (HAL_UART_Receive (&huart2, &ch, 1, 10) != HAL_OK);
 8001426:	bf00      	nop
 8001428:	1df9      	adds	r1, r7, #7
 800142a:	230a      	movs	r3, #10
 800142c:	2201      	movs	r2, #1
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <__io_getchar+0x44>)
 8001430:	f002 fc51 	bl	8003cd6 <HAL_UART_Receive>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f6      	bne.n	8001428 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800143a:	1df9      	adds	r1, r7, #7
 800143c:	230a      	movs	r3, #10
 800143e:	2201      	movs	r2, #1
 8001440:	4808      	ldr	r0, [pc, #32]	@ (8001464 <__io_getchar+0x44>)
 8001442:	f002 fbbd 	bl	8003bc0 <HAL_UART_Transmit>
	if(ch == '\r') HAL_UART_Transmit (&huart2, "\n", 1, 10); // echo
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b0d      	cmp	r3, #13
 800144a:	d105      	bne.n	8001458 <__io_getchar+0x38>
 800144c:	230a      	movs	r3, #10
 800144e:	2201      	movs	r2, #1
 8001450:	4905      	ldr	r1, [pc, #20]	@ (8001468 <__io_getchar+0x48>)
 8001452:	4804      	ldr	r0, [pc, #16]	@ (8001464 <__io_getchar+0x44>)
 8001454:	f002 fbb4 	bl	8003bc0 <HAL_UART_Transmit>
	return ch;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000168 	.word	0x20000168
 8001468:	0800564c 	.word	0x0800564c

0800146c <ProgramStart>:
void Wait()
{
	while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
}
void ProgramStart(char *name)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	printf("\033[2J\033[1;1H\n");//[y;xH : (x,y)move axis]
 8001474:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <ProgramStart+0x38>)
 8001476:	f003 f993 	bl	80047a0 <puts>
	printf("Program(%s) ready. Press Blue button to start\r\n", name);
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <ProgramStart+0x3c>)
 800147e:	f003 f91f 	bl	80046c0 <iprintf>
	while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0); //B1 push for start
 8001482:	bf00      	nop
 8001484:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001488:	4808      	ldr	r0, [pc, #32]	@ (80014ac <ProgramStart+0x40>)
 800148a:	f001 f9eb 	bl	8002864 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f7      	bne.n	8001484 <ProgramStart+0x18>
	printf("\033[2J\033[?251\n"); //Clear screen & cursor invisible
 8001494:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <ProgramStart+0x44>)
 8001496:	f003 f983 	bl	80047a0 <puts>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08005650 	.word	0x08005650
 80014a8:	0800565c 	.word	0x0800565c
 80014ac:	40020800 	.word	0x40020800
 80014b0:	0800568c 	.word	0x0800568c

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <HAL_MspInit+0x4c>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f2:	2007      	movs	r0, #7
 80014f4:	f000 fff0 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <HAL_ADC_MspInit+0x8c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12f      	bne.n	8001586 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_ADC_MspInit+0x90>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <HAL_ADC_MspInit+0x90>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_ADC_MspInit+0x90>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <HAL_ADC_MspInit+0x90>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <HAL_ADC_MspInit+0x90>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_ADC_MspInit+0x90>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = X_Axis_Pin|Y_Axis_Pin;
 800155e:	2303      	movs	r3, #3
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4809      	ldr	r0, [pc, #36]	@ (8001598 <HAL_ADC_MspInit+0x94>)
 8001572:	f000 fff3 	bl	800255c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2012      	movs	r0, #18
 800157c:	f000 ffb7 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001580:	2012      	movs	r0, #18
 8001582:	f000 ffd0 	bl	8002526 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	@ 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40012000 	.word	0x40012000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020800 	.word	0x40020800

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a18      	ldr	r2, [pc, #96]	@ (800160c <HAL_TIM_Base_MspInit+0x70>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d116      	bne.n	80015dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	201d      	movs	r0, #29
 80015d0:	f000 ff8d 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015d4:	201d      	movs	r0, #29
 80015d6:	f000 ffa6 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015da:	e012      	b.n	8001602 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001614 <HAL_TIM_Base_MspInit+0x78>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10d      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40000400 	.word	0x40000400
 8001610:	40023800 	.word	0x40023800
 8001614:	40000800 	.word	0x40000800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	@ (800169c <HAL_UART_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001672:	230c      	movs	r3, #12
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <HAL_UART_MspInit+0x8c>)
 800168e:	f000 ff65 	bl	800255c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	@ 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f96b 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <ADC_IRQHandler+0x10>)
 800170e:	f000 faa9 	bl	8001c64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000090 	.word	0x20000090

0800171c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <TIM3_IRQHandler+0x10>)
 8001722:	f001 fe75 	bl	8003410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000d8 	.word	0x200000d8

08001730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return 1;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_kill>:

int _kill(int pid, int sig)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800174a:	f003 f957 	bl	80049fc <__errno>
 800174e:	4603      	mov	r3, r0
 8001750:	2216      	movs	r2, #22
 8001752:	601a      	str	r2, [r3, #0]
  return -1;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_exit>:

void _exit (int status)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ffe7 	bl	8001740 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001772:	bf00      	nop
 8001774:	e7fd      	b.n	8001772 <_exit+0x12>

08001776 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e00a      	b.n	800179e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001788:	f7ff fe4a 	bl	8001420 <__io_getchar>
 800178c:	4601      	mov	r1, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	60ba      	str	r2, [r7, #8]
 8001794:	b2ca      	uxtb	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbf0      	blt.n	8001788 <_read+0x12>
  }

  return len;
 80017a6:	687b      	ldr	r3, [r7, #4]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e009      	b.n	80017d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	60ba      	str	r2, [r7, #8]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fe16 	bl	80013fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	dbf1      	blt.n	80017c2 <_write+0x12>
  }
  return len;
 80017de:	687b      	ldr	r3, [r7, #4]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_close>:

int _close(int file)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001810:	605a      	str	r2, [r3, #4]
  return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_isatty>:

int _isatty(int file)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f003 f8bc 	bl	80049fc <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	200004d8 	.word	0x200004d8
 80018b8:	20000630 	.word	0x20000630

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001918 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e4:	f7ff ffea 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ea:	490d      	ldr	r1, [pc, #52]	@ (8001920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001900:	4c0a      	ldr	r4, [pc, #40]	@ (800192c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800190e:	f003 f87b 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff fae5 	bl	8000ee0 <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001924:	080057a0 	.word	0x080057a0
  ldr r2, =_sbss
 8001928:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800192c:	2000062c 	.word	0x2000062c

08001930 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <DMA1_Stream0_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_Init+0x40>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_Init+0x40>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800194e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_Init+0x40>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 fdbb 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f808 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fda4 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fdd3 	bl	8002542 <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 fd9b 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000000c 	.word	0x2000000c
 80019d0:	20000014 	.word	0x20000014
 80019d4:	20000010 	.word	0x20000010

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000014 	.word	0x20000014
 80019fc:	200004dc 	.word	0x200004dc

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200004dc 	.word	0x200004dc

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000014 	.word	0x20000014

08001a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e033      	b.n	8001ade <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fd40 	bl	8001504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aa6:	f023 0302 	bic.w	r3, r3, #2
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fb3a 	bl	800212c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ace:	e001      	b.n	8001ad4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Start_IT+0x1a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0a1      	b.n	8001c46 <HAL_ADC_Start_IT+0x15e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d018      	beq.n	8001b4a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b28:	4b4a      	ldr	r3, [pc, #296]	@ (8001c54 <HAL_ADC_Start_IT+0x16c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c58 <HAL_ADC_Start_IT+0x170>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9a      	lsrs	r2, r3, #18
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d169      	bne.n	8001c2c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b96:	d106      	bne.n	8001ba6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	f023 0206 	bic.w	r2, r3, #6
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ba4:	e002      	b.n	8001bac <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_ADC_Start_IT+0x174>)
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d129      	bne.n	8001c44 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e020      	b.n	8001c44 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <HAL_ADC_Start_IT+0x178>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d11b      	bne.n	8001c44 <HAL_ADC_Start_IT+0x15c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d114      	bne.n	8001c44 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e00b      	b.n	8001c44 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f043 0210 	orr.w	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	40012300 	.word	0x40012300
 8001c60:	40012000 	.word	0x40012000

08001c64 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d049      	beq.n	8001d2e <HAL_ADC_IRQHandler+0xca>
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d046      	beq.n	8001d2e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d12b      	bne.n	8001d1e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d127      	bne.n	8001d1e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d119      	bne.n	8001d1e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0220 	bic.w	r2, r2, #32
 8001cf8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff f81c 	bl	8000d5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0212 	mvn.w	r2, #18
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d057      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x190>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d054      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d139      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d12b      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d124      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11d      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d119      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dbe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fa9d 	bl	8002324 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f06f 020c 	mvn.w	r2, #12
 8001df2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e02:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d017      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x1d6>
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10d      	bne.n	8001e3a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f837 	bl	8001e9e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0201 	mvn.w	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e48:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d015      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x218>
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d012      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f043 0202 	orr.w	r2, r3, #2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f06f 0220 	mvn.w	r2, #32
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f820 	bl	8001eb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0220 	mvn.w	r2, #32
 8001e7a:	601a      	str	r2, [r3, #0]
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e113      	b.n	800210c <HAL_ADC_ConfigChannel+0x244>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d925      	bls.n	8001f40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	409a      	lsls	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	e022      	b.n	8001f86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	2207      	movs	r2, #7
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d824      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b05      	subs	r3, #5
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd6:	e04c      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d824      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b23      	subs	r3, #35	@ 0x23
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b23      	subs	r3, #35	@ 0x23
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
 8002028:	e023      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b41      	subs	r3, #65	@ 0x41
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b41      	subs	r3, #65	@ 0x41
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <HAL_ADC_ConfigChannel+0x250>)
 8002074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a28      	ldr	r2, [pc, #160]	@ (800211c <HAL_ADC_ConfigChannel+0x254>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10f      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d10b      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	@ (800211c <HAL_ADC_ConfigChannel+0x254>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12b      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002120 <HAL_ADC_ConfigChannel+0x258>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x1f4>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d122      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a11      	ldr	r2, [pc, #68]	@ (8002120 <HAL_ADC_ConfigChannel+0x258>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_ADC_ConfigChannel+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a11      	ldr	r2, [pc, #68]	@ (8002128 <HAL_ADC_ConfigChannel+0x260>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9a      	lsrs	r2, r3, #18
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	40012000 	.word	0x40012000
 8002120:	10000012 	.word	0x10000012
 8002124:	2000000c 	.word	0x2000000c
 8002128:	431bde83 	.word	0x431bde83

0800212c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002134:	4b79      	ldr	r3, [pc, #484]	@ (800231c <ADC_Init+0x1f0>)
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	4a58      	ldr	r2, [pc, #352]	@ (8002320 <ADC_Init+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e00f      	b.n	800222a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002228:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0202 	bic.w	r2, r2, #2
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
 8002244:	005a      	lsls	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002266:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	3b01      	subs	r3, #1
 8002284:	035a      	lsls	r2, r3, #13
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e007      	b.n	80022a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	051a      	lsls	r2, r3, #20
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	029a      	lsls	r2, r3, #10
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40012300 	.word	0x40012300
 8002320:	0f000001 	.word	0x0f000001

08002324 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e159      	b.n	800282c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8148 	bne.w	8002826 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d005      	beq.n	80025ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d130      	bne.n	8002610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 0201 	and.w	r2, r3, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d017      	beq.n	800264c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d123      	bne.n	80026a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	69b9      	ldr	r1, [r7, #24]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a2 	beq.w	8002826 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b57      	ldr	r3, [pc, #348]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	4a56      	ldr	r2, [pc, #344]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f2:	4b54      	ldr	r3, [pc, #336]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fe:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_GPIO_Init+0x2ec>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a49      	ldr	r2, [pc, #292]	@ (800284c <HAL_GPIO_Init+0x2f0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x202>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a48      	ldr	r2, [pc, #288]	@ (8002850 <HAL_GPIO_Init+0x2f4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x1fe>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a47      	ldr	r2, [pc, #284]	@ (8002854 <HAL_GPIO_Init+0x2f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x1fa>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a46      	ldr	r2, [pc, #280]	@ (8002858 <HAL_GPIO_Init+0x2fc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x1f6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a45      	ldr	r2, [pc, #276]	@ (800285c <HAL_GPIO_Init+0x300>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x1f2>
 800274a:	2304      	movs	r3, #4
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800274e:	2307      	movs	r3, #7
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x204>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x204>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	@ (8002848 <HAL_GPIO_Init+0x2ec>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <HAL_GPIO_Init+0x304>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d2:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_GPIO_Init+0x304>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f aea2 	bls.w	8002578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e001      	b.n	8002886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e267      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d075      	beq.n	80029d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e6:	4b88      	ldr	r3, [pc, #544]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b85      	ldr	r3, [pc, #532]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e242      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x74>
 800292e:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6d      	ldr	r3, [pc, #436]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6c      	ldr	r2, [pc, #432]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 8002960:	4b69      	ldr	r3, [pc, #420]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a68      	ldr	r2, [pc, #416]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff f83e 	bl	8001a00 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff f83a 	bl	8001a00 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e207      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xc0>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff f82a 	bl	8001a00 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff f826 	bl	8001a00 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1f3      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b51      	ldr	r3, [pc, #324]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029de:	4b4a      	ldr	r3, [pc, #296]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b44      	ldr	r3, [pc, #272]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1c7      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4937      	ldr	r1, [pc, #220]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe ffdf 	bl	8001a00 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe ffdb 	bl	8001a00 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1a8      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4925      	ldr	r1, [pc, #148]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe ffbe 	bl	8001a00 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe ffba 	bl	8001a00 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e187      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d036      	beq.n	8002b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe ff9e 	bl	8001a00 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe ff9a 	bl	8001a00 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e167      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x200>
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe ff87 	bl	8001a00 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	e00e      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe ff83 	bl	8001a00 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d907      	bls.n	8002b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e150      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470000 	.word	0x42470000
 8002b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b88      	ldr	r3, [pc, #544]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ea      	bne.n	8002af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8097 	beq.w	8002c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b81      	ldr	r3, [pc, #516]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b7d      	ldr	r3, [pc, #500]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	4a7c      	ldr	r2, [pc, #496]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b77      	ldr	r3, [pc, #476]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b74      	ldr	r3, [pc, #464]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ff43 	bl	8001a00 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fe ff3f 	bl	8001a00 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e10c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x2ea>
 8002ba4:	4b64      	ldr	r3, [pc, #400]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4a63      	ldr	r2, [pc, #396]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x30c>
 8002bba:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	4a5b      	ldr	r2, [pc, #364]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bd4:	4b58      	ldr	r3, [pc, #352]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be0:	4b55      	ldr	r3, [pc, #340]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a54      	ldr	r2, [pc, #336]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe ff04 	bl	8001a00 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe ff00 	bl	8001a00 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0cb      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	4b49      	ldr	r3, [pc, #292]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ee      	beq.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fe feee 	bl	8001a00 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe feea 	bl	8001a00 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0b5      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	4a38      	ldr	r2, [pc, #224]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a1 	beq.w	8002da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c66:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d05c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d141      	bne.n	8002cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe febe 	bl	8001a00 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe feba 	bl	8001a00 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	491b      	ldr	r1, [pc, #108]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fe93 	bl	8001a00 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fe fe8f 	bl	8001a00 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e05c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x416>
 8002cfc:	e054      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fe7c 	bl	8001a00 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe fe78 	bl	8001a00 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e045      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e038      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x4ec>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0cc      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b68      	ldr	r3, [pc, #416]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d90c      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b65      	ldr	r3, [pc, #404]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a58      	ldr	r2, [pc, #352]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a52      	ldr	r2, [pc, #328]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d044      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e067      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4934      	ldr	r1, [pc, #208]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fdaa 	bl	8001a00 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe fda6 	bl	8001a00 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d20c      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fd0a 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08005698 	.word	0x08005698
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	20000010 	.word	0x20000010

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b094      	sub	sp, #80	@ 0x50
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f90:	2300      	movs	r3, #0
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f94:	2300      	movs	r3, #0
 8002f96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9c:	4b79      	ldr	r3, [pc, #484]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f200 80e1 	bhi.w	8003170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb6:	e0db      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b73      	ldr	r3, [pc, #460]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002fbc:	e0db      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fbe:	4b73      	ldr	r3, [pc, #460]	@ (800318c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc2:	e0d8      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fce:	4b6d      	ldr	r3, [pc, #436]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d063      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fee:	2300      	movs	r3, #0
 8002ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003008:	0150      	lsls	r0, r2, #5
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4621      	mov	r1, r4
 8003010:	1a51      	subs	r1, r2, r1
 8003012:	6139      	str	r1, [r7, #16]
 8003014:	4629      	mov	r1, r5
 8003016:	eb63 0301 	sbc.w	r3, r3, r1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003028:	4659      	mov	r1, fp
 800302a:	018b      	lsls	r3, r1, #6
 800302c:	4651      	mov	r1, sl
 800302e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003032:	4651      	mov	r1, sl
 8003034:	018a      	lsls	r2, r1, #6
 8003036:	4651      	mov	r1, sl
 8003038:	ebb2 0801 	subs.w	r8, r2, r1
 800303c:	4659      	mov	r1, fp
 800303e:	eb63 0901 	sbc.w	r9, r3, r1
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800304e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003056:	4690      	mov	r8, r2
 8003058:	4699      	mov	r9, r3
 800305a:	4623      	mov	r3, r4
 800305c:	eb18 0303 	adds.w	r3, r8, r3
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	462b      	mov	r3, r5
 8003064:	eb49 0303 	adc.w	r3, r9, r3
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003076:	4629      	mov	r1, r5
 8003078:	024b      	lsls	r3, r1, #9
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003080:	4621      	mov	r1, r4
 8003082:	024a      	lsls	r2, r1, #9
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800308e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003094:	f7fd fcea 	bl	8000a6c <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030a0:	e058      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b38      	ldr	r3, [pc, #224]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	4611      	mov	r1, r2
 80030ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0159      	lsls	r1, r3, #5
 80030ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ce:	0150      	lsls	r0, r2, #5
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4641      	mov	r1, r8
 80030d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030da:	4649      	mov	r1, r9
 80030dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f4:	ebb2 040a 	subs.w	r4, r2, sl
 80030f8:	eb63 050b 	sbc.w	r5, r3, fp
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	464b      	mov	r3, r9
 8003118:	eb45 0303 	adc.w	r3, r5, r3
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312a:	4629      	mov	r1, r5
 800312c:	028b      	lsls	r3, r1, #10
 800312e:	4621      	mov	r1, r4
 8003130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003134:	4621      	mov	r1, r4
 8003136:	028a      	lsls	r2, r1, #10
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	61fa      	str	r2, [r7, #28]
 8003144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003148:	f7fd fc90 	bl	8000a6c <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	3301      	adds	r3, #1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003164:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800316e:	e002      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x204>)
 8003172:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003178:	4618      	mov	r0, r3
 800317a:	3750      	adds	r7, #80	@ 0x50
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	080056a8 	.word	0x080056a8

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffdc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	080056a8 	.word	0x080056a8

080031f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e041      	b.n	800328e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe f9bc 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f000 faca 	bl	80037d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e03c      	b.n	800332a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <HAL_TIM_Base_Start+0xa0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_TIM_Base_Start+0x5c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d013      	beq.n	80032f4 <HAL_TIM_Base_Start+0x5c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1a      	ldr	r2, [pc, #104]	@ (800333c <HAL_TIM_Base_Start+0xa4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_TIM_Base_Start+0x5c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	@ (8003340 <HAL_TIM_Base_Start+0xa8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_TIM_Base_Start+0x5c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	@ (8003344 <HAL_TIM_Base_Start+0xac>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_Base_Start+0x5c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	@ (8003348 <HAL_TIM_Base_Start+0xb0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d111      	bne.n	8003318 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d010      	beq.n	8003328 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	e007      	b.n	8003328 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d001      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e044      	b.n	80033ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_TIM_Base_Start_IT+0xb0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <HAL_TIM_Base_Start_IT+0xb4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x6c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <HAL_TIM_Base_Start_IT+0xb8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x6c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HAL_TIM_Base_Start_IT+0xbc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x6c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_TIM_Base_Start_IT+0xc0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d010      	beq.n	80033ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	e007      	b.n	80033ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40014000 	.word	0x40014000

08003410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0202 	mvn.w	r2, #2
 8003444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f999 	bl	8003792 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f98b 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f99c 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d020      	beq.n	80034c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0204 	mvn.w	r2, #4
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f973 	bl	8003792 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f965 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f976 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d020      	beq.n	800350c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0208 	mvn.w	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f94d 	bl	8003792 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f93f 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f950 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d020      	beq.n	8003558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01b      	beq.n	8003558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f927 	bl	8003792 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f919 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f92a 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0201 	mvn.w	r2, #1
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fc2e 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fab6 	bl	8003b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8fb 	bl	80037ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0220 	mvn.w	r2, #32
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa88 	bl	8003af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIM_ConfigClockSource+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e0b4      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x186>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003644:	d03e      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	f200 8087 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003652:	f000 8086 	beq.w	8003762 <HAL_TIM_ConfigClockSource+0x172>
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365a:	d87f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b70      	cmp	r3, #112	@ 0x70
 800365e:	d01a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0xa6>
 8003660:	2b70      	cmp	r3, #112	@ 0x70
 8003662:	d87b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b60      	cmp	r3, #96	@ 0x60
 8003666:	d050      	beq.n	800370a <HAL_TIM_ConfigClockSource+0x11a>
 8003668:	2b60      	cmp	r3, #96	@ 0x60
 800366a:	d877      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d03c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0xfa>
 8003670:	2b50      	cmp	r3, #80	@ 0x50
 8003672:	d873      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d058      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x13a>
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	d86f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b30      	cmp	r3, #48	@ 0x30
 800367e:	d064      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b30      	cmp	r3, #48	@ 0x30
 8003682:	d86b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d060      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d867      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d05a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003694:	e062      	b.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	f000 f999 	bl	80039dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	609a      	str	r2, [r3, #8]
      break;
 80036c2:	e04f      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	f000 f982 	bl	80039dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e6:	609a      	str	r2, [r3, #8]
      break;
 80036e8:	e03c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 f8f6 	bl	80038e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2150      	movs	r1, #80	@ 0x50
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f94f 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003708:	e02c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003716:	461a      	mov	r2, r3
 8003718:	f000 f915 	bl	8003946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2160      	movs	r1, #96	@ 0x60
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f93f 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003728:	e01c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	461a      	mov	r2, r3
 8003738:	f000 f8d6 	bl	80038e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2140      	movs	r1, #64	@ 0x40
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f92f 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003748:	e00c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 f926 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 800375a:	e003      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a3a      	ldr	r2, [pc, #232]	@ (80038cc <TIM_Base_SetConfig+0xfc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00f      	beq.n	8003808 <TIM_Base_SetConfig+0x38>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ee:	d00b      	beq.n	8003808 <TIM_Base_SetConfig+0x38>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a37      	ldr	r2, [pc, #220]	@ (80038d0 <TIM_Base_SetConfig+0x100>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0x38>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a36      	ldr	r2, [pc, #216]	@ (80038d4 <TIM_Base_SetConfig+0x104>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0x38>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a35      	ldr	r2, [pc, #212]	@ (80038d8 <TIM_Base_SetConfig+0x108>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2b      	ldr	r2, [pc, #172]	@ (80038cc <TIM_Base_SetConfig+0xfc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01b      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003828:	d017      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <TIM_Base_SetConfig+0x100>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a27      	ldr	r2, [pc, #156]	@ (80038d4 <TIM_Base_SetConfig+0x104>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00f      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a26      	ldr	r2, [pc, #152]	@ (80038d8 <TIM_Base_SetConfig+0x108>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a25      	ldr	r2, [pc, #148]	@ (80038dc <TIM_Base_SetConfig+0x10c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a24      	ldr	r2, [pc, #144]	@ (80038e0 <TIM_Base_SetConfig+0x110>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a23      	ldr	r2, [pc, #140]	@ (80038e4 <TIM_Base_SetConfig+0x114>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d108      	bne.n	800386c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <TIM_Base_SetConfig+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d103      	bne.n	80038a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f023 0201 	bic.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]
  }
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f023 0201 	bic.w	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 030a 	bic.w	r3, r3, #10
 8003924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003946:	b480      	push	{r7}
 8003948:	b087      	sub	sp, #28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f023 0210 	bic.w	r2, r3, #16
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	031b      	lsls	r3, r3, #12
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f043 0307 	orr.w	r3, r3, #7
 80039c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	609a      	str	r2, [r3, #8]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e050      	b.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d013      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a16      	ldr	r2, [pc, #88]	@ (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40014000 	.word	0x40014000

08003af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e042      	b.n	8003bb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fd66 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	@ 0x24
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa09 	bl	8003f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d175      	bne.n	8003ccc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_UART_Transmit+0x2c>
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e06e      	b.n	8003cce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2221      	movs	r2, #33	@ 0x21
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bfe:	f7fd feff 	bl	8001a00 <HAL_GetTick>
 8003c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c18:	d108      	bne.n	8003c2c <HAL_UART_Transmit+0x6c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e003      	b.n	8003c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c34:	e02e      	b.n	8003c94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2180      	movs	r1, #128	@ 0x80
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f8df 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e03a      	b.n	8003cce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	3302      	adds	r3, #2
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	e007      	b.n	8003c86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	3301      	adds	r3, #1
 8003c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1cb      	bne.n	8003c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2140      	movs	r1, #64	@ 0x40
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f8ab 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e006      	b.n	8003cce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b08a      	sub	sp, #40	@ 0x28
 8003cda:	af02      	add	r7, sp, #8
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 8081 	bne.w	8003dfa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Receive+0x2e>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e079      	b.n	8003dfc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2222      	movs	r2, #34	@ 0x22
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fe70 	bl	8001a00 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d36:	d108      	bne.n	8003d4a <HAL_UART_Receive+0x74>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e003      	b.n	8003d52 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d52:	e047      	b.n	8003de4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2120      	movs	r1, #32
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f850 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e042      	b.n	8003dfc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10c      	bne.n	8003d96 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3302      	adds	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e01f      	b.n	8003dd6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9e:	d007      	beq.n	8003db0 <HAL_UART_Receive+0xda>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_UART_Receive+0xe8>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e008      	b.n	8003dd0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1b2      	bne.n	8003d54 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	e03b      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d037      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fd fdef 	bl	8001a00 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e03a      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d023      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b80      	cmp	r3, #128	@ 0x80
 8003e4a:	d020      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b40      	cmp	r3, #64	@ 0x40
 8003e50:	d01d      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d116      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f81d 	bl	8003eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2208      	movs	r2, #8
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e00f      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0b4      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b095      	sub	sp, #84	@ 0x54
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ede:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d119      	bne.n	8003f62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0310 	bic.w	r3, r3, #16
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f4e:	61ba      	str	r2, [r7, #24]
 8003f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f70:	bf00      	nop
 8003f72:	3754      	adds	r7, #84	@ 0x54
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f80:	b0c0      	sub	sp, #256	@ 0x100
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	68d9      	ldr	r1, [r3, #12]
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	ea40 0301 	orr.w	r3, r0, r1
 8003fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fd4:	f021 010c 	bic.w	r1, r1, #12
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	6999      	ldr	r1, [r3, #24]
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	ea40 0301 	orr.w	r3, r0, r1
 8004002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b8f      	ldr	r3, [pc, #572]	@ (8004248 <UART_SetConfig+0x2cc>)
 800400c:	429a      	cmp	r2, r3
 800400e:	d005      	beq.n	800401c <UART_SetConfig+0xa0>
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b8d      	ldr	r3, [pc, #564]	@ (800424c <UART_SetConfig+0x2d0>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d104      	bne.n	8004026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7ff f8d8 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8004020:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004024:	e003      	b.n	800402e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004026:	f7ff f8bf 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 800402a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004038:	f040 810c 	bne.w	8004254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800403c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004046:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800404a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800404e:	4622      	mov	r2, r4
 8004050:	462b      	mov	r3, r5
 8004052:	1891      	adds	r1, r2, r2
 8004054:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004056:	415b      	adcs	r3, r3
 8004058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800405a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800405e:	4621      	mov	r1, r4
 8004060:	eb12 0801 	adds.w	r8, r2, r1
 8004064:	4629      	mov	r1, r5
 8004066:	eb43 0901 	adc.w	r9, r3, r1
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800407e:	4690      	mov	r8, r2
 8004080:	4699      	mov	r9, r3
 8004082:	4623      	mov	r3, r4
 8004084:	eb18 0303 	adds.w	r3, r8, r3
 8004088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800408c:	462b      	mov	r3, r5
 800408e:	eb49 0303 	adc.w	r3, r9, r3
 8004092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040aa:	460b      	mov	r3, r1
 80040ac:	18db      	adds	r3, r3, r3
 80040ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b0:	4613      	mov	r3, r2
 80040b2:	eb42 0303 	adc.w	r3, r2, r3
 80040b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80040b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040c0:	f7fc fcd4 	bl	8000a6c <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4b61      	ldr	r3, [pc, #388]	@ (8004250 <UART_SetConfig+0x2d4>)
 80040ca:	fba3 2302 	umull	r2, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	011c      	lsls	r4, r3, #4
 80040d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040e4:	4642      	mov	r2, r8
 80040e6:	464b      	mov	r3, r9
 80040e8:	1891      	adds	r1, r2, r2
 80040ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040ec:	415b      	adcs	r3, r3
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040f4:	4641      	mov	r1, r8
 80040f6:	eb12 0a01 	adds.w	sl, r2, r1
 80040fa:	4649      	mov	r1, r9
 80040fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800410c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004114:	4692      	mov	sl, r2
 8004116:	469b      	mov	fp, r3
 8004118:	4643      	mov	r3, r8
 800411a:	eb1a 0303 	adds.w	r3, sl, r3
 800411e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004122:	464b      	mov	r3, r9
 8004124:	eb4b 0303 	adc.w	r3, fp, r3
 8004128:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004138:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800413c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004140:	460b      	mov	r3, r1
 8004142:	18db      	adds	r3, r3, r3
 8004144:	643b      	str	r3, [r7, #64]	@ 0x40
 8004146:	4613      	mov	r3, r2
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	647b      	str	r3, [r7, #68]	@ 0x44
 800414e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004156:	f7fc fc89 	bl	8000a6c <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4611      	mov	r1, r2
 8004160:	4b3b      	ldr	r3, [pc, #236]	@ (8004250 <UART_SetConfig+0x2d4>)
 8004162:	fba3 2301 	umull	r2, r3, r3, r1
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2264      	movs	r2, #100	@ 0x64
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	1acb      	subs	r3, r1, r3
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004176:	4b36      	ldr	r3, [pc, #216]	@ (8004250 <UART_SetConfig+0x2d4>)
 8004178:	fba3 2302 	umull	r2, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004184:	441c      	add	r4, r3
 8004186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418a:	2200      	movs	r2, #0
 800418c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004190:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	1891      	adds	r1, r2, r2
 800419e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041a0:	415b      	adcs	r3, r3
 80041a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041a8:	4641      	mov	r1, r8
 80041aa:	1851      	adds	r1, r2, r1
 80041ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80041ae:	4649      	mov	r1, r9
 80041b0:	414b      	adcs	r3, r1
 80041b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041c0:	4659      	mov	r1, fp
 80041c2:	00cb      	lsls	r3, r1, #3
 80041c4:	4651      	mov	r1, sl
 80041c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ca:	4651      	mov	r1, sl
 80041cc:	00ca      	lsls	r2, r1, #3
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	4642      	mov	r2, r8
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041dc:	464b      	mov	r3, r9
 80041de:	460a      	mov	r2, r1
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041fc:	460b      	mov	r3, r1
 80041fe:	18db      	adds	r3, r3, r3
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004202:	4613      	mov	r3, r2
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800420e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004212:	f7fc fc2b 	bl	8000a6c <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <UART_SetConfig+0x2d4>)
 800421c:	fba3 1302 	umull	r1, r3, r3, r2
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	2164      	movs	r1, #100	@ 0x64
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	3332      	adds	r3, #50	@ 0x32
 800422e:	4a08      	ldr	r2, [pc, #32]	@ (8004250 <UART_SetConfig+0x2d4>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	f003 0207 	and.w	r2, r3, #7
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4422      	add	r2, r4
 8004242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004244:	e106      	b.n	8004454 <UART_SetConfig+0x4d8>
 8004246:	bf00      	nop
 8004248:	40011000 	.word	0x40011000
 800424c:	40011400 	.word	0x40011400
 8004250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800425e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004266:	4642      	mov	r2, r8
 8004268:	464b      	mov	r3, r9
 800426a:	1891      	adds	r1, r2, r2
 800426c:	6239      	str	r1, [r7, #32]
 800426e:	415b      	adcs	r3, r3
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
 8004272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004276:	4641      	mov	r1, r8
 8004278:	1854      	adds	r4, r2, r1
 800427a:	4649      	mov	r1, r9
 800427c:	eb43 0501 	adc.w	r5, r3, r1
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	00eb      	lsls	r3, r5, #3
 800428a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	4643      	mov	r3, r8
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800429c:	464b      	mov	r3, r9
 800429e:	eb45 0303 	adc.w	r3, r5, r3
 80042a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042c2:	4629      	mov	r1, r5
 80042c4:	008b      	lsls	r3, r1, #2
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042cc:	4621      	mov	r1, r4
 80042ce:	008a      	lsls	r2, r1, #2
 80042d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042d4:	f7fc fbca 	bl	8000a6c <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4b60      	ldr	r3, [pc, #384]	@ (8004460 <UART_SetConfig+0x4e4>)
 80042de:	fba3 2302 	umull	r2, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	011c      	lsls	r4, r3, #4
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	1891      	adds	r1, r2, r2
 80042fe:	61b9      	str	r1, [r7, #24]
 8004300:	415b      	adcs	r3, r3
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004308:	4641      	mov	r1, r8
 800430a:	1851      	adds	r1, r2, r1
 800430c:	6139      	str	r1, [r7, #16]
 800430e:	4649      	mov	r1, r9
 8004310:	414b      	adcs	r3, r1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004320:	4659      	mov	r1, fp
 8004322:	00cb      	lsls	r3, r1, #3
 8004324:	4651      	mov	r1, sl
 8004326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432a:	4651      	mov	r1, sl
 800432c:	00ca      	lsls	r2, r1, #3
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	4603      	mov	r3, r0
 8004334:	4642      	mov	r2, r8
 8004336:	189b      	adds	r3, r3, r2
 8004338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800433c:	464b      	mov	r3, r9
 800433e:	460a      	mov	r2, r1
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004352:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004360:	4649      	mov	r1, r9
 8004362:	008b      	lsls	r3, r1, #2
 8004364:	4641      	mov	r1, r8
 8004366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436a:	4641      	mov	r1, r8
 800436c:	008a      	lsls	r2, r1, #2
 800436e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004372:	f7fc fb7b 	bl	8000a6c <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4611      	mov	r1, r2
 800437c:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <UART_SetConfig+0x4e4>)
 800437e:	fba3 2301 	umull	r2, r3, r3, r1
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2264      	movs	r2, #100	@ 0x64
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	1acb      	subs	r3, r1, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	@ 0x32
 8004390:	4a33      	ldr	r2, [pc, #204]	@ (8004460 <UART_SetConfig+0x4e4>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800439c:	441c      	add	r4, r3
 800439e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a2:	2200      	movs	r2, #0
 80043a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80043a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80043a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	1891      	adds	r1, r2, r2
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	415b      	adcs	r3, r3
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043bc:	4641      	mov	r1, r8
 80043be:	1851      	adds	r1, r2, r1
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	4649      	mov	r1, r9
 80043c4:	414b      	adcs	r3, r1
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043d4:	4659      	mov	r1, fp
 80043d6:	00cb      	lsls	r3, r1, #3
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043de:	4651      	mov	r1, sl
 80043e0:	00ca      	lsls	r2, r1, #3
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	4642      	mov	r2, r8
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ee:	464b      	mov	r3, r9
 80043f0:	460a      	mov	r2, r1
 80043f2:	eb42 0303 	adc.w	r3, r2, r3
 80043f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	663b      	str	r3, [r7, #96]	@ 0x60
 8004402:	667a      	str	r2, [r7, #100]	@ 0x64
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004410:	4649      	mov	r1, r9
 8004412:	008b      	lsls	r3, r1, #2
 8004414:	4641      	mov	r1, r8
 8004416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441a:	4641      	mov	r1, r8
 800441c:	008a      	lsls	r2, r1, #2
 800441e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004422:	f7fc fb23 	bl	8000a6c <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <UART_SetConfig+0x4e4>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	@ 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	3332      	adds	r3, #50	@ 0x32
 800443e:	4a08      	ldr	r2, [pc, #32]	@ (8004460 <UART_SetConfig+0x4e4>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f003 020f 	and.w	r2, r3, #15
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4422      	add	r2, r4
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800445a:	46bd      	mov	sp, r7
 800445c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004460:	51eb851f 	.word	0x51eb851f

08004464 <srand>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <srand+0x44>)
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800446c:	4604      	mov	r4, r0
 800446e:	b9b3      	cbnz	r3, 800449e <srand+0x3a>
 8004470:	2018      	movs	r0, #24
 8004472:	f000 fb59 	bl	8004b28 <malloc>
 8004476:	4602      	mov	r2, r0
 8004478:	6328      	str	r0, [r5, #48]	@ 0x30
 800447a:	b920      	cbnz	r0, 8004486 <srand+0x22>
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <srand+0x48>)
 800447e:	480c      	ldr	r0, [pc, #48]	@ (80044b0 <srand+0x4c>)
 8004480:	2146      	movs	r1, #70	@ 0x46
 8004482:	f000 fae9 	bl	8004a58 <__assert_func>
 8004486:	490b      	ldr	r1, [pc, #44]	@ (80044b4 <srand+0x50>)
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <srand+0x54>)
 800448a:	e9c0 1300 	strd	r1, r3, [r0]
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <srand+0x58>)
 8004490:	6083      	str	r3, [r0, #8]
 8004492:	230b      	movs	r3, #11
 8004494:	8183      	strh	r3, [r0, #12]
 8004496:	2100      	movs	r1, #0
 8004498:	2001      	movs	r0, #1
 800449a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800449e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80044a0:	2200      	movs	r2, #0
 80044a2:	611c      	str	r4, [r3, #16]
 80044a4:	615a      	str	r2, [r3, #20]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000024 	.word	0x20000024
 80044ac:	080056b0 	.word	0x080056b0
 80044b0:	080056c7 	.word	0x080056c7
 80044b4:	abcd330e 	.word	0xabcd330e
 80044b8:	e66d1234 	.word	0xe66d1234
 80044bc:	0005deec 	.word	0x0005deec

080044c0 <rand>:
 80044c0:	4b16      	ldr	r3, [pc, #88]	@ (800451c <rand+0x5c>)
 80044c2:	b510      	push	{r4, lr}
 80044c4:	681c      	ldr	r4, [r3, #0]
 80044c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80044c8:	b9b3      	cbnz	r3, 80044f8 <rand+0x38>
 80044ca:	2018      	movs	r0, #24
 80044cc:	f000 fb2c 	bl	8004b28 <malloc>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80044d4:	b920      	cbnz	r0, 80044e0 <rand+0x20>
 80044d6:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <rand+0x60>)
 80044d8:	4812      	ldr	r0, [pc, #72]	@ (8004524 <rand+0x64>)
 80044da:	2152      	movs	r1, #82	@ 0x52
 80044dc:	f000 fabc 	bl	8004a58 <__assert_func>
 80044e0:	4911      	ldr	r1, [pc, #68]	@ (8004528 <rand+0x68>)
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <rand+0x6c>)
 80044e4:	e9c0 1300 	strd	r1, r3, [r0]
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <rand+0x70>)
 80044ea:	6083      	str	r3, [r0, #8]
 80044ec:	230b      	movs	r3, #11
 80044ee:	8183      	strh	r3, [r0, #12]
 80044f0:	2100      	movs	r1, #0
 80044f2:	2001      	movs	r0, #1
 80044f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80044f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80044fa:	480e      	ldr	r0, [pc, #56]	@ (8004534 <rand+0x74>)
 80044fc:	690b      	ldr	r3, [r1, #16]
 80044fe:	694c      	ldr	r4, [r1, #20]
 8004500:	4a0d      	ldr	r2, [pc, #52]	@ (8004538 <rand+0x78>)
 8004502:	4358      	muls	r0, r3
 8004504:	fb02 0004 	mla	r0, r2, r4, r0
 8004508:	fba3 3202 	umull	r3, r2, r3, r2
 800450c:	3301      	adds	r3, #1
 800450e:	eb40 0002 	adc.w	r0, r0, r2
 8004512:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004516:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800451a:	bd10      	pop	{r4, pc}
 800451c:	20000024 	.word	0x20000024
 8004520:	080056b0 	.word	0x080056b0
 8004524:	080056c7 	.word	0x080056c7
 8004528:	abcd330e 	.word	0xabcd330e
 800452c:	e66d1234 	.word	0xe66d1234
 8004530:	0005deec 	.word	0x0005deec
 8004534:	5851f42d 	.word	0x5851f42d
 8004538:	4c957f2d 	.word	0x4c957f2d

0800453c <std>:
 800453c:	2300      	movs	r3, #0
 800453e:	b510      	push	{r4, lr}
 8004540:	4604      	mov	r4, r0
 8004542:	e9c0 3300 	strd	r3, r3, [r0]
 8004546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800454a:	6083      	str	r3, [r0, #8]
 800454c:	8181      	strh	r1, [r0, #12]
 800454e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004550:	81c2      	strh	r2, [r0, #14]
 8004552:	6183      	str	r3, [r0, #24]
 8004554:	4619      	mov	r1, r3
 8004556:	2208      	movs	r2, #8
 8004558:	305c      	adds	r0, #92	@ 0x5c
 800455a:	f000 fa01 	bl	8004960 <memset>
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <std+0x58>)
 8004560:	6263      	str	r3, [r4, #36]	@ 0x24
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <std+0x5c>)
 8004564:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <std+0x60>)
 8004568:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <std+0x64>)
 800456c:	6323      	str	r3, [r4, #48]	@ 0x30
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <std+0x68>)
 8004570:	6224      	str	r4, [r4, #32]
 8004572:	429c      	cmp	r4, r3
 8004574:	d006      	beq.n	8004584 <std+0x48>
 8004576:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800457a:	4294      	cmp	r4, r2
 800457c:	d002      	beq.n	8004584 <std+0x48>
 800457e:	33d0      	adds	r3, #208	@ 0xd0
 8004580:	429c      	cmp	r4, r3
 8004582:	d105      	bne.n	8004590 <std+0x54>
 8004584:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458c:	f000 ba60 	b.w	8004a50 <__retarget_lock_init_recursive>
 8004590:	bd10      	pop	{r4, pc}
 8004592:	bf00      	nop
 8004594:	080047b1 	.word	0x080047b1
 8004598:	080047d3 	.word	0x080047d3
 800459c:	0800480b 	.word	0x0800480b
 80045a0:	0800482f 	.word	0x0800482f
 80045a4:	200004e0 	.word	0x200004e0

080045a8 <stdio_exit_handler>:
 80045a8:	4a02      	ldr	r2, [pc, #8]	@ (80045b4 <stdio_exit_handler+0xc>)
 80045aa:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <stdio_exit_handler+0x10>)
 80045ac:	4803      	ldr	r0, [pc, #12]	@ (80045bc <stdio_exit_handler+0x14>)
 80045ae:	f000 b869 	b.w	8004684 <_fwalk_sglue>
 80045b2:	bf00      	nop
 80045b4:	20000018 	.word	0x20000018
 80045b8:	0800533d 	.word	0x0800533d
 80045bc:	20000028 	.word	0x20000028

080045c0 <cleanup_stdio>:
 80045c0:	6841      	ldr	r1, [r0, #4]
 80045c2:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <cleanup_stdio+0x34>)
 80045c4:	4299      	cmp	r1, r3
 80045c6:	b510      	push	{r4, lr}
 80045c8:	4604      	mov	r4, r0
 80045ca:	d001      	beq.n	80045d0 <cleanup_stdio+0x10>
 80045cc:	f000 feb6 	bl	800533c <_fflush_r>
 80045d0:	68a1      	ldr	r1, [r4, #8]
 80045d2:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <cleanup_stdio+0x38>)
 80045d4:	4299      	cmp	r1, r3
 80045d6:	d002      	beq.n	80045de <cleanup_stdio+0x1e>
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 feaf 	bl	800533c <_fflush_r>
 80045de:	68e1      	ldr	r1, [r4, #12]
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <cleanup_stdio+0x3c>)
 80045e2:	4299      	cmp	r1, r3
 80045e4:	d004      	beq.n	80045f0 <cleanup_stdio+0x30>
 80045e6:	4620      	mov	r0, r4
 80045e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ec:	f000 bea6 	b.w	800533c <_fflush_r>
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	bf00      	nop
 80045f4:	200004e0 	.word	0x200004e0
 80045f8:	20000548 	.word	0x20000548
 80045fc:	200005b0 	.word	0x200005b0

08004600 <global_stdio_init.part.0>:
 8004600:	b510      	push	{r4, lr}
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <global_stdio_init.part.0+0x30>)
 8004604:	4c0b      	ldr	r4, [pc, #44]	@ (8004634 <global_stdio_init.part.0+0x34>)
 8004606:	4a0c      	ldr	r2, [pc, #48]	@ (8004638 <global_stdio_init.part.0+0x38>)
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	4620      	mov	r0, r4
 800460c:	2200      	movs	r2, #0
 800460e:	2104      	movs	r1, #4
 8004610:	f7ff ff94 	bl	800453c <std>
 8004614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004618:	2201      	movs	r2, #1
 800461a:	2109      	movs	r1, #9
 800461c:	f7ff ff8e 	bl	800453c <std>
 8004620:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004624:	2202      	movs	r2, #2
 8004626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800462a:	2112      	movs	r1, #18
 800462c:	f7ff bf86 	b.w	800453c <std>
 8004630:	20000618 	.word	0x20000618
 8004634:	200004e0 	.word	0x200004e0
 8004638:	080045a9 	.word	0x080045a9

0800463c <__sfp_lock_acquire>:
 800463c:	4801      	ldr	r0, [pc, #4]	@ (8004644 <__sfp_lock_acquire+0x8>)
 800463e:	f000 ba08 	b.w	8004a52 <__retarget_lock_acquire_recursive>
 8004642:	bf00      	nop
 8004644:	20000621 	.word	0x20000621

08004648 <__sfp_lock_release>:
 8004648:	4801      	ldr	r0, [pc, #4]	@ (8004650 <__sfp_lock_release+0x8>)
 800464a:	f000 ba03 	b.w	8004a54 <__retarget_lock_release_recursive>
 800464e:	bf00      	nop
 8004650:	20000621 	.word	0x20000621

08004654 <__sinit>:
 8004654:	b510      	push	{r4, lr}
 8004656:	4604      	mov	r4, r0
 8004658:	f7ff fff0 	bl	800463c <__sfp_lock_acquire>
 800465c:	6a23      	ldr	r3, [r4, #32]
 800465e:	b11b      	cbz	r3, 8004668 <__sinit+0x14>
 8004660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004664:	f7ff bff0 	b.w	8004648 <__sfp_lock_release>
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <__sinit+0x28>)
 800466a:	6223      	str	r3, [r4, #32]
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <__sinit+0x2c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f5      	bne.n	8004660 <__sinit+0xc>
 8004674:	f7ff ffc4 	bl	8004600 <global_stdio_init.part.0>
 8004678:	e7f2      	b.n	8004660 <__sinit+0xc>
 800467a:	bf00      	nop
 800467c:	080045c1 	.word	0x080045c1
 8004680:	20000618 	.word	0x20000618

08004684 <_fwalk_sglue>:
 8004684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004688:	4607      	mov	r7, r0
 800468a:	4688      	mov	r8, r1
 800468c:	4614      	mov	r4, r2
 800468e:	2600      	movs	r6, #0
 8004690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004694:	f1b9 0901 	subs.w	r9, r9, #1
 8004698:	d505      	bpl.n	80046a6 <_fwalk_sglue+0x22>
 800469a:	6824      	ldr	r4, [r4, #0]
 800469c:	2c00      	cmp	r4, #0
 800469e:	d1f7      	bne.n	8004690 <_fwalk_sglue+0xc>
 80046a0:	4630      	mov	r0, r6
 80046a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046a6:	89ab      	ldrh	r3, [r5, #12]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d907      	bls.n	80046bc <_fwalk_sglue+0x38>
 80046ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b0:	3301      	adds	r3, #1
 80046b2:	d003      	beq.n	80046bc <_fwalk_sglue+0x38>
 80046b4:	4629      	mov	r1, r5
 80046b6:	4638      	mov	r0, r7
 80046b8:	47c0      	blx	r8
 80046ba:	4306      	orrs	r6, r0
 80046bc:	3568      	adds	r5, #104	@ 0x68
 80046be:	e7e9      	b.n	8004694 <_fwalk_sglue+0x10>

080046c0 <iprintf>:
 80046c0:	b40f      	push	{r0, r1, r2, r3}
 80046c2:	b507      	push	{r0, r1, r2, lr}
 80046c4:	4906      	ldr	r1, [pc, #24]	@ (80046e0 <iprintf+0x20>)
 80046c6:	ab04      	add	r3, sp, #16
 80046c8:	6808      	ldr	r0, [r1, #0]
 80046ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ce:	6881      	ldr	r1, [r0, #8]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	f000 fb09 	bl	8004ce8 <_vfiprintf_r>
 80046d6:	b003      	add	sp, #12
 80046d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046dc:	b004      	add	sp, #16
 80046de:	4770      	bx	lr
 80046e0:	20000024 	.word	0x20000024

080046e4 <putchar>:
 80046e4:	4b02      	ldr	r3, [pc, #8]	@ (80046f0 <putchar+0xc>)
 80046e6:	4601      	mov	r1, r0
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	6882      	ldr	r2, [r0, #8]
 80046ec:	f000 bec2 	b.w	8005474 <_putc_r>
 80046f0:	20000024 	.word	0x20000024

080046f4 <_puts_r>:
 80046f4:	6a03      	ldr	r3, [r0, #32]
 80046f6:	b570      	push	{r4, r5, r6, lr}
 80046f8:	6884      	ldr	r4, [r0, #8]
 80046fa:	4605      	mov	r5, r0
 80046fc:	460e      	mov	r6, r1
 80046fe:	b90b      	cbnz	r3, 8004704 <_puts_r+0x10>
 8004700:	f7ff ffa8 	bl	8004654 <__sinit>
 8004704:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004706:	07db      	lsls	r3, r3, #31
 8004708:	d405      	bmi.n	8004716 <_puts_r+0x22>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	0598      	lsls	r0, r3, #22
 800470e:	d402      	bmi.n	8004716 <_puts_r+0x22>
 8004710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004712:	f000 f99e 	bl	8004a52 <__retarget_lock_acquire_recursive>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	0719      	lsls	r1, r3, #28
 800471a:	d502      	bpl.n	8004722 <_puts_r+0x2e>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d135      	bne.n	800478e <_puts_r+0x9a>
 8004722:	4621      	mov	r1, r4
 8004724:	4628      	mov	r0, r5
 8004726:	f000 f8c5 	bl	80048b4 <__swsetup_r>
 800472a:	b380      	cbz	r0, 800478e <_puts_r+0x9a>
 800472c:	f04f 35ff 	mov.w	r5, #4294967295
 8004730:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004732:	07da      	lsls	r2, r3, #31
 8004734:	d405      	bmi.n	8004742 <_puts_r+0x4e>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	059b      	lsls	r3, r3, #22
 800473a:	d402      	bmi.n	8004742 <_puts_r+0x4e>
 800473c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800473e:	f000 f989 	bl	8004a54 <__retarget_lock_release_recursive>
 8004742:	4628      	mov	r0, r5
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	2b00      	cmp	r3, #0
 8004748:	da04      	bge.n	8004754 <_puts_r+0x60>
 800474a:	69a2      	ldr	r2, [r4, #24]
 800474c:	429a      	cmp	r2, r3
 800474e:	dc17      	bgt.n	8004780 <_puts_r+0x8c>
 8004750:	290a      	cmp	r1, #10
 8004752:	d015      	beq.n	8004780 <_puts_r+0x8c>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	6022      	str	r2, [r4, #0]
 800475a:	7019      	strb	r1, [r3, #0]
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004762:	3b01      	subs	r3, #1
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	2900      	cmp	r1, #0
 8004768:	d1ed      	bne.n	8004746 <_puts_r+0x52>
 800476a:	2b00      	cmp	r3, #0
 800476c:	da11      	bge.n	8004792 <_puts_r+0x9e>
 800476e:	4622      	mov	r2, r4
 8004770:	210a      	movs	r1, #10
 8004772:	4628      	mov	r0, r5
 8004774:	f000 f85f 	bl	8004836 <__swbuf_r>
 8004778:	3001      	adds	r0, #1
 800477a:	d0d7      	beq.n	800472c <_puts_r+0x38>
 800477c:	250a      	movs	r5, #10
 800477e:	e7d7      	b.n	8004730 <_puts_r+0x3c>
 8004780:	4622      	mov	r2, r4
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f857 	bl	8004836 <__swbuf_r>
 8004788:	3001      	adds	r0, #1
 800478a:	d1e7      	bne.n	800475c <_puts_r+0x68>
 800478c:	e7ce      	b.n	800472c <_puts_r+0x38>
 800478e:	3e01      	subs	r6, #1
 8004790:	e7e4      	b.n	800475c <_puts_r+0x68>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	6022      	str	r2, [r4, #0]
 8004798:	220a      	movs	r2, #10
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e7ee      	b.n	800477c <_puts_r+0x88>
	...

080047a0 <puts>:
 80047a0:	4b02      	ldr	r3, [pc, #8]	@ (80047ac <puts+0xc>)
 80047a2:	4601      	mov	r1, r0
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	f7ff bfa5 	b.w	80046f4 <_puts_r>
 80047aa:	bf00      	nop
 80047ac:	20000024 	.word	0x20000024

080047b0 <__sread>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b8:	f000 f8fc 	bl	80049b4 <_read_r>
 80047bc:	2800      	cmp	r0, #0
 80047be:	bfab      	itete	ge
 80047c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047c2:	89a3      	ldrhlt	r3, [r4, #12]
 80047c4:	181b      	addge	r3, r3, r0
 80047c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047ca:	bfac      	ite	ge
 80047cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047ce:	81a3      	strhlt	r3, [r4, #12]
 80047d0:	bd10      	pop	{r4, pc}

080047d2 <__swrite>:
 80047d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d6:	461f      	mov	r7, r3
 80047d8:	898b      	ldrh	r3, [r1, #12]
 80047da:	05db      	lsls	r3, r3, #23
 80047dc:	4605      	mov	r5, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	4616      	mov	r6, r2
 80047e2:	d505      	bpl.n	80047f0 <__swrite+0x1e>
 80047e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e8:	2302      	movs	r3, #2
 80047ea:	2200      	movs	r2, #0
 80047ec:	f000 f8d0 	bl	8004990 <_lseek_r>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	4632      	mov	r2, r6
 80047fe:	463b      	mov	r3, r7
 8004800:	4628      	mov	r0, r5
 8004802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	f000 b8e7 	b.w	80049d8 <_write_r>

0800480a <__sseek>:
 800480a:	b510      	push	{r4, lr}
 800480c:	460c      	mov	r4, r1
 800480e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004812:	f000 f8bd 	bl	8004990 <_lseek_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	bf15      	itete	ne
 800481c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800481e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004826:	81a3      	strheq	r3, [r4, #12]
 8004828:	bf18      	it	ne
 800482a:	81a3      	strhne	r3, [r4, #12]
 800482c:	bd10      	pop	{r4, pc}

0800482e <__sclose>:
 800482e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004832:	f000 b89d 	b.w	8004970 <_close_r>

08004836 <__swbuf_r>:
 8004836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004838:	460e      	mov	r6, r1
 800483a:	4614      	mov	r4, r2
 800483c:	4605      	mov	r5, r0
 800483e:	b118      	cbz	r0, 8004848 <__swbuf_r+0x12>
 8004840:	6a03      	ldr	r3, [r0, #32]
 8004842:	b90b      	cbnz	r3, 8004848 <__swbuf_r+0x12>
 8004844:	f7ff ff06 	bl	8004654 <__sinit>
 8004848:	69a3      	ldr	r3, [r4, #24]
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	071a      	lsls	r2, r3, #28
 8004850:	d501      	bpl.n	8004856 <__swbuf_r+0x20>
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	b943      	cbnz	r3, 8004868 <__swbuf_r+0x32>
 8004856:	4621      	mov	r1, r4
 8004858:	4628      	mov	r0, r5
 800485a:	f000 f82b 	bl	80048b4 <__swsetup_r>
 800485e:	b118      	cbz	r0, 8004868 <__swbuf_r+0x32>
 8004860:	f04f 37ff 	mov.w	r7, #4294967295
 8004864:	4638      	mov	r0, r7
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	6922      	ldr	r2, [r4, #16]
 800486c:	1a98      	subs	r0, r3, r2
 800486e:	6963      	ldr	r3, [r4, #20]
 8004870:	b2f6      	uxtb	r6, r6
 8004872:	4283      	cmp	r3, r0
 8004874:	4637      	mov	r7, r6
 8004876:	dc05      	bgt.n	8004884 <__swbuf_r+0x4e>
 8004878:	4621      	mov	r1, r4
 800487a:	4628      	mov	r0, r5
 800487c:	f000 fd5e 	bl	800533c <_fflush_r>
 8004880:	2800      	cmp	r0, #0
 8004882:	d1ed      	bne.n	8004860 <__swbuf_r+0x2a>
 8004884:	68a3      	ldr	r3, [r4, #8]
 8004886:	3b01      	subs	r3, #1
 8004888:	60a3      	str	r3, [r4, #8]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	6022      	str	r2, [r4, #0]
 8004890:	701e      	strb	r6, [r3, #0]
 8004892:	6962      	ldr	r2, [r4, #20]
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	429a      	cmp	r2, r3
 8004898:	d004      	beq.n	80048a4 <__swbuf_r+0x6e>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	07db      	lsls	r3, r3, #31
 800489e:	d5e1      	bpl.n	8004864 <__swbuf_r+0x2e>
 80048a0:	2e0a      	cmp	r6, #10
 80048a2:	d1df      	bne.n	8004864 <__swbuf_r+0x2e>
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 fd48 	bl	800533c <_fflush_r>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d0d9      	beq.n	8004864 <__swbuf_r+0x2e>
 80048b0:	e7d6      	b.n	8004860 <__swbuf_r+0x2a>
	...

080048b4 <__swsetup_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4b29      	ldr	r3, [pc, #164]	@ (800495c <__swsetup_r+0xa8>)
 80048b8:	4605      	mov	r5, r0
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	460c      	mov	r4, r1
 80048be:	b118      	cbz	r0, 80048c8 <__swsetup_r+0x14>
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	b90b      	cbnz	r3, 80048c8 <__swsetup_r+0x14>
 80048c4:	f7ff fec6 	bl	8004654 <__sinit>
 80048c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048cc:	0719      	lsls	r1, r3, #28
 80048ce:	d422      	bmi.n	8004916 <__swsetup_r+0x62>
 80048d0:	06da      	lsls	r2, r3, #27
 80048d2:	d407      	bmi.n	80048e4 <__swsetup_r+0x30>
 80048d4:	2209      	movs	r2, #9
 80048d6:	602a      	str	r2, [r5, #0]
 80048d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	f04f 30ff 	mov.w	r0, #4294967295
 80048e2:	e033      	b.n	800494c <__swsetup_r+0x98>
 80048e4:	0758      	lsls	r0, r3, #29
 80048e6:	d512      	bpl.n	800490e <__swsetup_r+0x5a>
 80048e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048ea:	b141      	cbz	r1, 80048fe <__swsetup_r+0x4a>
 80048ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048f0:	4299      	cmp	r1, r3
 80048f2:	d002      	beq.n	80048fa <__swsetup_r+0x46>
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f8cd 	bl	8004a94 <_free_r>
 80048fa:	2300      	movs	r3, #0
 80048fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	2300      	movs	r3, #0
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	b94b      	cbnz	r3, 800492e <__swsetup_r+0x7a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004924:	d003      	beq.n	800492e <__swsetup_r+0x7a>
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 fd67 	bl	80053fc <__smakebuf_r>
 800492e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004932:	f013 0201 	ands.w	r2, r3, #1
 8004936:	d00a      	beq.n	800494e <__swsetup_r+0x9a>
 8004938:	2200      	movs	r2, #0
 800493a:	60a2      	str	r2, [r4, #8]
 800493c:	6962      	ldr	r2, [r4, #20]
 800493e:	4252      	negs	r2, r2
 8004940:	61a2      	str	r2, [r4, #24]
 8004942:	6922      	ldr	r2, [r4, #16]
 8004944:	b942      	cbnz	r2, 8004958 <__swsetup_r+0xa4>
 8004946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800494a:	d1c5      	bne.n	80048d8 <__swsetup_r+0x24>
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	0799      	lsls	r1, r3, #30
 8004950:	bf58      	it	pl
 8004952:	6962      	ldrpl	r2, [r4, #20]
 8004954:	60a2      	str	r2, [r4, #8]
 8004956:	e7f4      	b.n	8004942 <__swsetup_r+0x8e>
 8004958:	2000      	movs	r0, #0
 800495a:	e7f7      	b.n	800494c <__swsetup_r+0x98>
 800495c:	20000024 	.word	0x20000024

08004960 <memset>:
 8004960:	4402      	add	r2, r0
 8004962:	4603      	mov	r3, r0
 8004964:	4293      	cmp	r3, r2
 8004966:	d100      	bne.n	800496a <memset+0xa>
 8004968:	4770      	bx	lr
 800496a:	f803 1b01 	strb.w	r1, [r3], #1
 800496e:	e7f9      	b.n	8004964 <memset+0x4>

08004970 <_close_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	@ (800498c <_close_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc ff34 	bl	80017e8 <_close>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_close_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_close_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	2000061c 	.word	0x2000061c

08004990 <_lseek_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_lseek_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc ff49 	bl	8001836 <_lseek>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_lseek_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_lseek_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	2000061c 	.word	0x2000061c

080049b4 <_read_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	@ (80049d4 <_read_r+0x20>)
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fc fed7 	bl	8001776 <_read>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_read_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_read_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	2000061c 	.word	0x2000061c

080049d8 <_write_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d07      	ldr	r5, [pc, #28]	@ (80049f8 <_write_r+0x20>)
 80049dc:	4604      	mov	r4, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7fc fee2 	bl	80017b0 <_write>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_write_r+0x1e>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_write_r+0x1e>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	2000061c 	.word	0x2000061c

080049fc <__errno>:
 80049fc:	4b01      	ldr	r3, [pc, #4]	@ (8004a04 <__errno+0x8>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000024 	.word	0x20000024

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	@ (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f000 fddc 	bl	80055d8 <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08005798 	.word	0x08005798
 8004a44:	08005798 	.word	0x08005798
 8004a48:	08005798 	.word	0x08005798
 8004a4c:	0800579c 	.word	0x0800579c

08004a50 <__retarget_lock_init_recursive>:
 8004a50:	4770      	bx	lr

08004a52 <__retarget_lock_acquire_recursive>:
 8004a52:	4770      	bx	lr

08004a54 <__retarget_lock_release_recursive>:
 8004a54:	4770      	bx	lr
	...

08004a58 <__assert_func>:
 8004a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <__assert_func+0x2c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4605      	mov	r5, r0
 8004a64:	68d8      	ldr	r0, [r3, #12]
 8004a66:	b954      	cbnz	r4, 8004a7e <__assert_func+0x26>
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <__assert_func+0x30>)
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a70:	9100      	str	r1, [sp, #0]
 8004a72:	462b      	mov	r3, r5
 8004a74:	4905      	ldr	r1, [pc, #20]	@ (8004a8c <__assert_func+0x34>)
 8004a76:	f000 fc89 	bl	800538c <fiprintf>
 8004a7a:	f000 fd61 	bl	8005540 <abort>
 8004a7e:	4b04      	ldr	r3, [pc, #16]	@ (8004a90 <__assert_func+0x38>)
 8004a80:	e7f4      	b.n	8004a6c <__assert_func+0x14>
 8004a82:	bf00      	nop
 8004a84:	20000024 	.word	0x20000024
 8004a88:	0800575a 	.word	0x0800575a
 8004a8c:	0800572c 	.word	0x0800572c
 8004a90:	0800571f 	.word	0x0800571f

08004a94 <_free_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4605      	mov	r5, r0
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d041      	beq.n	8004b20 <_free_r+0x8c>
 8004a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa0:	1f0c      	subs	r4, r1, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfb8      	it	lt
 8004aa6:	18e4      	addlt	r4, r4, r3
 8004aa8:	f000 f8e8 	bl	8004c7c <__malloc_lock>
 8004aac:	4a1d      	ldr	r2, [pc, #116]	@ (8004b24 <_free_r+0x90>)
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	b933      	cbnz	r3, 8004ac0 <_free_r+0x2c>
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	6014      	str	r4, [r2, #0]
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004abc:	f000 b8e4 	b.w	8004c88 <__malloc_unlock>
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d908      	bls.n	8004ad6 <_free_r+0x42>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	1821      	adds	r1, r4, r0
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	bf01      	itttt	eq
 8004acc:	6819      	ldreq	r1, [r3, #0]
 8004ace:	685b      	ldreq	r3, [r3, #4]
 8004ad0:	1809      	addeq	r1, r1, r0
 8004ad2:	6021      	streq	r1, [r4, #0]
 8004ad4:	e7ed      	b.n	8004ab2 <_free_r+0x1e>
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	b10b      	cbz	r3, 8004ae0 <_free_r+0x4c>
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d9fa      	bls.n	8004ad6 <_free_r+0x42>
 8004ae0:	6811      	ldr	r1, [r2, #0]
 8004ae2:	1850      	adds	r0, r2, r1
 8004ae4:	42a0      	cmp	r0, r4
 8004ae6:	d10b      	bne.n	8004b00 <_free_r+0x6c>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	4401      	add	r1, r0
 8004aec:	1850      	adds	r0, r2, r1
 8004aee:	4283      	cmp	r3, r0
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	d1e0      	bne.n	8004ab6 <_free_r+0x22>
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	6053      	str	r3, [r2, #4]
 8004afa:	4408      	add	r0, r1
 8004afc:	6010      	str	r0, [r2, #0]
 8004afe:	e7da      	b.n	8004ab6 <_free_r+0x22>
 8004b00:	d902      	bls.n	8004b08 <_free_r+0x74>
 8004b02:	230c      	movs	r3, #12
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	e7d6      	b.n	8004ab6 <_free_r+0x22>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	1821      	adds	r1, r4, r0
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	bf04      	itt	eq
 8004b10:	6819      	ldreq	r1, [r3, #0]
 8004b12:	685b      	ldreq	r3, [r3, #4]
 8004b14:	6063      	str	r3, [r4, #4]
 8004b16:	bf04      	itt	eq
 8004b18:	1809      	addeq	r1, r1, r0
 8004b1a:	6021      	streq	r1, [r4, #0]
 8004b1c:	6054      	str	r4, [r2, #4]
 8004b1e:	e7ca      	b.n	8004ab6 <_free_r+0x22>
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
 8004b22:	bf00      	nop
 8004b24:	20000628 	.word	0x20000628

08004b28 <malloc>:
 8004b28:	4b02      	ldr	r3, [pc, #8]	@ (8004b34 <malloc+0xc>)
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	f000 b825 	b.w	8004b7c <_malloc_r>
 8004b32:	bf00      	nop
 8004b34:	20000024 	.word	0x20000024

08004b38 <sbrk_aligned>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b78 <sbrk_aligned+0x40>)
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	6831      	ldr	r1, [r6, #0]
 8004b40:	4605      	mov	r5, r0
 8004b42:	b911      	cbnz	r1, 8004b4a <sbrk_aligned+0x12>
 8004b44:	f000 fcec 	bl	8005520 <_sbrk_r>
 8004b48:	6030      	str	r0, [r6, #0]
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 fce7 	bl	8005520 <_sbrk_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d103      	bne.n	8004b5e <sbrk_aligned+0x26>
 8004b56:	f04f 34ff 	mov.w	r4, #4294967295
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
 8004b5e:	1cc4      	adds	r4, r0, #3
 8004b60:	f024 0403 	bic.w	r4, r4, #3
 8004b64:	42a0      	cmp	r0, r4
 8004b66:	d0f8      	beq.n	8004b5a <sbrk_aligned+0x22>
 8004b68:	1a21      	subs	r1, r4, r0
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 fcd8 	bl	8005520 <_sbrk_r>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d1f2      	bne.n	8004b5a <sbrk_aligned+0x22>
 8004b74:	e7ef      	b.n	8004b56 <sbrk_aligned+0x1e>
 8004b76:	bf00      	nop
 8004b78:	20000624 	.word	0x20000624

08004b7c <_malloc_r>:
 8004b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b80:	1ccd      	adds	r5, r1, #3
 8004b82:	f025 0503 	bic.w	r5, r5, #3
 8004b86:	3508      	adds	r5, #8
 8004b88:	2d0c      	cmp	r5, #12
 8004b8a:	bf38      	it	cc
 8004b8c:	250c      	movcc	r5, #12
 8004b8e:	2d00      	cmp	r5, #0
 8004b90:	4606      	mov	r6, r0
 8004b92:	db01      	blt.n	8004b98 <_malloc_r+0x1c>
 8004b94:	42a9      	cmp	r1, r5
 8004b96:	d904      	bls.n	8004ba2 <_malloc_r+0x26>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c78 <_malloc_r+0xfc>
 8004ba6:	f000 f869 	bl	8004c7c <__malloc_lock>
 8004baa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bae:	461c      	mov	r4, r3
 8004bb0:	bb44      	cbnz	r4, 8004c04 <_malloc_r+0x88>
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f7ff ffbf 	bl	8004b38 <sbrk_aligned>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	d158      	bne.n	8004c72 <_malloc_r+0xf6>
 8004bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004bc4:	4627      	mov	r7, r4
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	d143      	bne.n	8004c52 <_malloc_r+0xd6>
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d04b      	beq.n	8004c66 <_malloc_r+0xea>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	eb04 0903 	add.w	r9, r4, r3
 8004bd8:	f000 fca2 	bl	8005520 <_sbrk_r>
 8004bdc:	4581      	cmp	r9, r0
 8004bde:	d142      	bne.n	8004c66 <_malloc_r+0xea>
 8004be0:	6821      	ldr	r1, [r4, #0]
 8004be2:	1a6d      	subs	r5, r5, r1
 8004be4:	4629      	mov	r1, r5
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff ffa6 	bl	8004b38 <sbrk_aligned>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d03a      	beq.n	8004c66 <_malloc_r+0xea>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	442b      	add	r3, r5
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	bb62      	cbnz	r2, 8004c58 <_malloc_r+0xdc>
 8004bfe:	f8c8 7000 	str.w	r7, [r8]
 8004c02:	e00f      	b.n	8004c24 <_malloc_r+0xa8>
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	1b52      	subs	r2, r2, r5
 8004c08:	d420      	bmi.n	8004c4c <_malloc_r+0xd0>
 8004c0a:	2a0b      	cmp	r2, #11
 8004c0c:	d917      	bls.n	8004c3e <_malloc_r+0xc2>
 8004c0e:	1961      	adds	r1, r4, r5
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	6025      	str	r5, [r4, #0]
 8004c14:	bf18      	it	ne
 8004c16:	6059      	strne	r1, [r3, #4]
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	bf08      	it	eq
 8004c1c:	f8c8 1000 	streq.w	r1, [r8]
 8004c20:	5162      	str	r2, [r4, r5]
 8004c22:	604b      	str	r3, [r1, #4]
 8004c24:	4630      	mov	r0, r6
 8004c26:	f000 f82f 	bl	8004c88 <__malloc_unlock>
 8004c2a:	f104 000b 	add.w	r0, r4, #11
 8004c2e:	1d23      	adds	r3, r4, #4
 8004c30:	f020 0007 	bic.w	r0, r0, #7
 8004c34:	1ac2      	subs	r2, r0, r3
 8004c36:	bf1c      	itt	ne
 8004c38:	1a1b      	subne	r3, r3, r0
 8004c3a:	50a3      	strne	r3, [r4, r2]
 8004c3c:	e7af      	b.n	8004b9e <_malloc_r+0x22>
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	bf0c      	ite	eq
 8004c44:	f8c8 2000 	streq.w	r2, [r8]
 8004c48:	605a      	strne	r2, [r3, #4]
 8004c4a:	e7eb      	b.n	8004c24 <_malloc_r+0xa8>
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	6864      	ldr	r4, [r4, #4]
 8004c50:	e7ae      	b.n	8004bb0 <_malloc_r+0x34>
 8004c52:	463c      	mov	r4, r7
 8004c54:	687f      	ldr	r7, [r7, #4]
 8004c56:	e7b6      	b.n	8004bc6 <_malloc_r+0x4a>
 8004c58:	461a      	mov	r2, r3
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	d1fb      	bne.n	8004c58 <_malloc_r+0xdc>
 8004c60:	2300      	movs	r3, #0
 8004c62:	6053      	str	r3, [r2, #4]
 8004c64:	e7de      	b.n	8004c24 <_malloc_r+0xa8>
 8004c66:	230c      	movs	r3, #12
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f80c 	bl	8004c88 <__malloc_unlock>
 8004c70:	e794      	b.n	8004b9c <_malloc_r+0x20>
 8004c72:	6005      	str	r5, [r0, #0]
 8004c74:	e7d6      	b.n	8004c24 <_malloc_r+0xa8>
 8004c76:	bf00      	nop
 8004c78:	20000628 	.word	0x20000628

08004c7c <__malloc_lock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__malloc_lock+0x8>)
 8004c7e:	f7ff bee8 	b.w	8004a52 <__retarget_lock_acquire_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000620 	.word	0x20000620

08004c88 <__malloc_unlock>:
 8004c88:	4801      	ldr	r0, [pc, #4]	@ (8004c90 <__malloc_unlock+0x8>)
 8004c8a:	f7ff bee3 	b.w	8004a54 <__retarget_lock_release_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20000620 	.word	0x20000620

08004c94 <__sfputc_r>:
 8004c94:	6893      	ldr	r3, [r2, #8]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	b410      	push	{r4}
 8004c9c:	6093      	str	r3, [r2, #8]
 8004c9e:	da08      	bge.n	8004cb2 <__sfputc_r+0x1e>
 8004ca0:	6994      	ldr	r4, [r2, #24]
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	db01      	blt.n	8004caa <__sfputc_r+0x16>
 8004ca6:	290a      	cmp	r1, #10
 8004ca8:	d103      	bne.n	8004cb2 <__sfputc_r+0x1e>
 8004caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cae:	f7ff bdc2 	b.w	8004836 <__swbuf_r>
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	1c58      	adds	r0, r3, #1
 8004cb6:	6010      	str	r0, [r2, #0]
 8004cb8:	7019      	strb	r1, [r3, #0]
 8004cba:	4608      	mov	r0, r1
 8004cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <__sfputs_r>:
 8004cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	460f      	mov	r7, r1
 8004cc8:	4614      	mov	r4, r2
 8004cca:	18d5      	adds	r5, r2, r3
 8004ccc:	42ac      	cmp	r4, r5
 8004cce:	d101      	bne.n	8004cd4 <__sfputs_r+0x12>
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e007      	b.n	8004ce4 <__sfputs_r+0x22>
 8004cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7ff ffda 	bl	8004c94 <__sfputc_r>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d1f3      	bne.n	8004ccc <__sfputs_r+0xa>
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ce8 <_vfiprintf_r>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	460d      	mov	r5, r1
 8004cee:	b09d      	sub	sp, #116	@ 0x74
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	b118      	cbz	r0, 8004d00 <_vfiprintf_r+0x18>
 8004cf8:	6a03      	ldr	r3, [r0, #32]
 8004cfa:	b90b      	cbnz	r3, 8004d00 <_vfiprintf_r+0x18>
 8004cfc:	f7ff fcaa 	bl	8004654 <__sinit>
 8004d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d02:	07d9      	lsls	r1, r3, #31
 8004d04:	d405      	bmi.n	8004d12 <_vfiprintf_r+0x2a>
 8004d06:	89ab      	ldrh	r3, [r5, #12]
 8004d08:	059a      	lsls	r2, r3, #22
 8004d0a:	d402      	bmi.n	8004d12 <_vfiprintf_r+0x2a>
 8004d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d0e:	f7ff fea0 	bl	8004a52 <__retarget_lock_acquire_recursive>
 8004d12:	89ab      	ldrh	r3, [r5, #12]
 8004d14:	071b      	lsls	r3, r3, #28
 8004d16:	d501      	bpl.n	8004d1c <_vfiprintf_r+0x34>
 8004d18:	692b      	ldr	r3, [r5, #16]
 8004d1a:	b99b      	cbnz	r3, 8004d44 <_vfiprintf_r+0x5c>
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7ff fdc8 	bl	80048b4 <__swsetup_r>
 8004d24:	b170      	cbz	r0, 8004d44 <_vfiprintf_r+0x5c>
 8004d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d28:	07dc      	lsls	r4, r3, #31
 8004d2a:	d504      	bpl.n	8004d36 <_vfiprintf_r+0x4e>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	b01d      	add	sp, #116	@ 0x74
 8004d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	0598      	lsls	r0, r3, #22
 8004d3a:	d4f7      	bmi.n	8004d2c <_vfiprintf_r+0x44>
 8004d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d3e:	f7ff fe89 	bl	8004a54 <__retarget_lock_release_recursive>
 8004d42:	e7f3      	b.n	8004d2c <_vfiprintf_r+0x44>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d52:	2330      	movs	r3, #48	@ 0x30
 8004d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f04 <_vfiprintf_r+0x21c>
 8004d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d5c:	f04f 0901 	mov.w	r9, #1
 8004d60:	4623      	mov	r3, r4
 8004d62:	469a      	mov	sl, r3
 8004d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d68:	b10a      	cbz	r2, 8004d6e <_vfiprintf_r+0x86>
 8004d6a:	2a25      	cmp	r2, #37	@ 0x25
 8004d6c:	d1f9      	bne.n	8004d62 <_vfiprintf_r+0x7a>
 8004d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d72:	d00b      	beq.n	8004d8c <_vfiprintf_r+0xa4>
 8004d74:	465b      	mov	r3, fp
 8004d76:	4622      	mov	r2, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff ffa1 	bl	8004cc2 <__sfputs_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	f000 80a7 	beq.w	8004ed4 <_vfiprintf_r+0x1ec>
 8004d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d88:	445a      	add	r2, fp
 8004d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 809f 	beq.w	8004ed4 <_vfiprintf_r+0x1ec>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da0:	f10a 0a01 	add.w	sl, sl, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	9307      	str	r3, [sp, #28]
 8004da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dae:	4654      	mov	r4, sl
 8004db0:	2205      	movs	r2, #5
 8004db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db6:	4853      	ldr	r0, [pc, #332]	@ (8004f04 <_vfiprintf_r+0x21c>)
 8004db8:	f7fb fa12 	bl	80001e0 <memchr>
 8004dbc:	9a04      	ldr	r2, [sp, #16]
 8004dbe:	b9d8      	cbnz	r0, 8004df8 <_vfiprintf_r+0x110>
 8004dc0:	06d1      	lsls	r1, r2, #27
 8004dc2:	bf44      	itt	mi
 8004dc4:	2320      	movmi	r3, #32
 8004dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dca:	0713      	lsls	r3, r2, #28
 8004dcc:	bf44      	itt	mi
 8004dce:	232b      	movmi	r3, #43	@ 0x2b
 8004dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dda:	d015      	beq.n	8004e08 <_vfiprintf_r+0x120>
 8004ddc:	9a07      	ldr	r2, [sp, #28]
 8004dde:	4654      	mov	r4, sl
 8004de0:	2000      	movs	r0, #0
 8004de2:	f04f 0c0a 	mov.w	ip, #10
 8004de6:	4621      	mov	r1, r4
 8004de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dec:	3b30      	subs	r3, #48	@ 0x30
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d94b      	bls.n	8004e8a <_vfiprintf_r+0x1a2>
 8004df2:	b1b0      	cbz	r0, 8004e22 <_vfiprintf_r+0x13a>
 8004df4:	9207      	str	r2, [sp, #28]
 8004df6:	e014      	b.n	8004e22 <_vfiprintf_r+0x13a>
 8004df8:	eba0 0308 	sub.w	r3, r0, r8
 8004dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	46a2      	mov	sl, r4
 8004e06:	e7d2      	b.n	8004dae <_vfiprintf_r+0xc6>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	1d19      	adds	r1, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	9103      	str	r1, [sp, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bfbb      	ittet	lt
 8004e14:	425b      	neglt	r3, r3
 8004e16:	f042 0202 	orrlt.w	r2, r2, #2
 8004e1a:	9307      	strge	r3, [sp, #28]
 8004e1c:	9307      	strlt	r3, [sp, #28]
 8004e1e:	bfb8      	it	lt
 8004e20:	9204      	strlt	r2, [sp, #16]
 8004e22:	7823      	ldrb	r3, [r4, #0]
 8004e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e26:	d10a      	bne.n	8004e3e <_vfiprintf_r+0x156>
 8004e28:	7863      	ldrb	r3, [r4, #1]
 8004e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e2c:	d132      	bne.n	8004e94 <_vfiprintf_r+0x1ac>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	9203      	str	r2, [sp, #12]
 8004e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e3a:	3402      	adds	r4, #2
 8004e3c:	9305      	str	r3, [sp, #20]
 8004e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f14 <_vfiprintf_r+0x22c>
 8004e42:	7821      	ldrb	r1, [r4, #0]
 8004e44:	2203      	movs	r2, #3
 8004e46:	4650      	mov	r0, sl
 8004e48:	f7fb f9ca 	bl	80001e0 <memchr>
 8004e4c:	b138      	cbz	r0, 8004e5e <_vfiprintf_r+0x176>
 8004e4e:	9b04      	ldr	r3, [sp, #16]
 8004e50:	eba0 000a 	sub.w	r0, r0, sl
 8004e54:	2240      	movs	r2, #64	@ 0x40
 8004e56:	4082      	lsls	r2, r0
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	3401      	adds	r4, #1
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e62:	4829      	ldr	r0, [pc, #164]	@ (8004f08 <_vfiprintf_r+0x220>)
 8004e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e68:	2206      	movs	r2, #6
 8004e6a:	f7fb f9b9 	bl	80001e0 <memchr>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d03f      	beq.n	8004ef2 <_vfiprintf_r+0x20a>
 8004e72:	4b26      	ldr	r3, [pc, #152]	@ (8004f0c <_vfiprintf_r+0x224>)
 8004e74:	bb1b      	cbnz	r3, 8004ebe <_vfiprintf_r+0x1d6>
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	3307      	adds	r3, #7
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	3308      	adds	r3, #8
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e84:	443b      	add	r3, r7
 8004e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e88:	e76a      	b.n	8004d60 <_vfiprintf_r+0x78>
 8004e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8e:	460c      	mov	r4, r1
 8004e90:	2001      	movs	r0, #1
 8004e92:	e7a8      	b.n	8004de6 <_vfiprintf_r+0xfe>
 8004e94:	2300      	movs	r3, #0
 8004e96:	3401      	adds	r4, #1
 8004e98:	9305      	str	r3, [sp, #20]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f04f 0c0a 	mov.w	ip, #10
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea6:	3a30      	subs	r2, #48	@ 0x30
 8004ea8:	2a09      	cmp	r2, #9
 8004eaa:	d903      	bls.n	8004eb4 <_vfiprintf_r+0x1cc>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0c6      	beq.n	8004e3e <_vfiprintf_r+0x156>
 8004eb0:	9105      	str	r1, [sp, #20]
 8004eb2:	e7c4      	b.n	8004e3e <_vfiprintf_r+0x156>
 8004eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb8:	4604      	mov	r4, r0
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7f0      	b.n	8004ea0 <_vfiprintf_r+0x1b8>
 8004ebe:	ab03      	add	r3, sp, #12
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <_vfiprintf_r+0x228>)
 8004ec6:	a904      	add	r1, sp, #16
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f3af 8000 	nop.w
 8004ece:	4607      	mov	r7, r0
 8004ed0:	1c78      	adds	r0, r7, #1
 8004ed2:	d1d6      	bne.n	8004e82 <_vfiprintf_r+0x19a>
 8004ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ed6:	07d9      	lsls	r1, r3, #31
 8004ed8:	d405      	bmi.n	8004ee6 <_vfiprintf_r+0x1fe>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	059a      	lsls	r2, r3, #22
 8004ede:	d402      	bmi.n	8004ee6 <_vfiprintf_r+0x1fe>
 8004ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ee2:	f7ff fdb7 	bl	8004a54 <__retarget_lock_release_recursive>
 8004ee6:	89ab      	ldrh	r3, [r5, #12]
 8004ee8:	065b      	lsls	r3, r3, #25
 8004eea:	f53f af1f 	bmi.w	8004d2c <_vfiprintf_r+0x44>
 8004eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ef0:	e71e      	b.n	8004d30 <_vfiprintf_r+0x48>
 8004ef2:	ab03      	add	r3, sp, #12
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	462a      	mov	r2, r5
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <_vfiprintf_r+0x228>)
 8004efa:	a904      	add	r1, sp, #16
 8004efc:	4630      	mov	r0, r6
 8004efe:	f000 f879 	bl	8004ff4 <_printf_i>
 8004f02:	e7e4      	b.n	8004ece <_vfiprintf_r+0x1e6>
 8004f04:	0800575b 	.word	0x0800575b
 8004f08:	08005765 	.word	0x08005765
 8004f0c:	00000000 	.word	0x00000000
 8004f10:	08004cc3 	.word	0x08004cc3
 8004f14:	08005761 	.word	0x08005761

08004f18 <_printf_common>:
 8004f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	4698      	mov	r8, r3
 8004f20:	688a      	ldr	r2, [r1, #8]
 8004f22:	690b      	ldr	r3, [r1, #16]
 8004f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bfb8      	it	lt
 8004f2c:	4613      	movlt	r3, r2
 8004f2e:	6033      	str	r3, [r6, #0]
 8004f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f34:	4607      	mov	r7, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	b10a      	cbz	r2, 8004f3e <_printf_common+0x26>
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	6033      	str	r3, [r6, #0]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	0699      	lsls	r1, r3, #26
 8004f42:	bf42      	ittt	mi
 8004f44:	6833      	ldrmi	r3, [r6, #0]
 8004f46:	3302      	addmi	r3, #2
 8004f48:	6033      	strmi	r3, [r6, #0]
 8004f4a:	6825      	ldr	r5, [r4, #0]
 8004f4c:	f015 0506 	ands.w	r5, r5, #6
 8004f50:	d106      	bne.n	8004f60 <_printf_common+0x48>
 8004f52:	f104 0a19 	add.w	sl, r4, #25
 8004f56:	68e3      	ldr	r3, [r4, #12]
 8004f58:	6832      	ldr	r2, [r6, #0]
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	dc26      	bgt.n	8004fae <_printf_common+0x96>
 8004f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f64:	6822      	ldr	r2, [r4, #0]
 8004f66:	3b00      	subs	r3, #0
 8004f68:	bf18      	it	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	0692      	lsls	r2, r2, #26
 8004f6e:	d42b      	bmi.n	8004fc8 <_printf_common+0xb0>
 8004f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f74:	4641      	mov	r1, r8
 8004f76:	4638      	mov	r0, r7
 8004f78:	47c8      	blx	r9
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d01e      	beq.n	8004fbc <_printf_common+0xa4>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	6922      	ldr	r2, [r4, #16]
 8004f82:	f003 0306 	and.w	r3, r3, #6
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	bf02      	ittt	eq
 8004f8a:	68e5      	ldreq	r5, [r4, #12]
 8004f8c:	6833      	ldreq	r3, [r6, #0]
 8004f8e:	1aed      	subeq	r5, r5, r3
 8004f90:	68a3      	ldr	r3, [r4, #8]
 8004f92:	bf0c      	ite	eq
 8004f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f98:	2500      	movne	r5, #0
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	bfc4      	itt	gt
 8004f9e:	1a9b      	subgt	r3, r3, r2
 8004fa0:	18ed      	addgt	r5, r5, r3
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	341a      	adds	r4, #26
 8004fa6:	42b5      	cmp	r5, r6
 8004fa8:	d11a      	bne.n	8004fe0 <_printf_common+0xc8>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e008      	b.n	8004fc0 <_printf_common+0xa8>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	47c8      	blx	r9
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d103      	bne.n	8004fc4 <_printf_common+0xac>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	e7c6      	b.n	8004f56 <_printf_common+0x3e>
 8004fc8:	18e1      	adds	r1, r4, r3
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	2030      	movs	r0, #48	@ 0x30
 8004fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fd2:	4422      	add	r2, r4
 8004fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fdc:	3302      	adds	r3, #2
 8004fde:	e7c7      	b.n	8004f70 <_printf_common+0x58>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c8      	blx	r9
 8004fea:	3001      	adds	r0, #1
 8004fec:	d0e6      	beq.n	8004fbc <_printf_common+0xa4>
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7d9      	b.n	8004fa6 <_printf_common+0x8e>
	...

08004ff4 <_printf_i>:
 8004ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	7e0f      	ldrb	r7, [r1, #24]
 8004ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ffc:	2f78      	cmp	r7, #120	@ 0x78
 8004ffe:	4691      	mov	r9, r2
 8005000:	4680      	mov	r8, r0
 8005002:	460c      	mov	r4, r1
 8005004:	469a      	mov	sl, r3
 8005006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800500a:	d807      	bhi.n	800501c <_printf_i+0x28>
 800500c:	2f62      	cmp	r7, #98	@ 0x62
 800500e:	d80a      	bhi.n	8005026 <_printf_i+0x32>
 8005010:	2f00      	cmp	r7, #0
 8005012:	f000 80d2 	beq.w	80051ba <_printf_i+0x1c6>
 8005016:	2f58      	cmp	r7, #88	@ 0x58
 8005018:	f000 80b9 	beq.w	800518e <_printf_i+0x19a>
 800501c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005024:	e03a      	b.n	800509c <_printf_i+0xa8>
 8005026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800502a:	2b15      	cmp	r3, #21
 800502c:	d8f6      	bhi.n	800501c <_printf_i+0x28>
 800502e:	a101      	add	r1, pc, #4	@ (adr r1, 8005034 <_printf_i+0x40>)
 8005030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005034:	0800508d 	.word	0x0800508d
 8005038:	080050a1 	.word	0x080050a1
 800503c:	0800501d 	.word	0x0800501d
 8005040:	0800501d 	.word	0x0800501d
 8005044:	0800501d 	.word	0x0800501d
 8005048:	0800501d 	.word	0x0800501d
 800504c:	080050a1 	.word	0x080050a1
 8005050:	0800501d 	.word	0x0800501d
 8005054:	0800501d 	.word	0x0800501d
 8005058:	0800501d 	.word	0x0800501d
 800505c:	0800501d 	.word	0x0800501d
 8005060:	080051a1 	.word	0x080051a1
 8005064:	080050cb 	.word	0x080050cb
 8005068:	0800515b 	.word	0x0800515b
 800506c:	0800501d 	.word	0x0800501d
 8005070:	0800501d 	.word	0x0800501d
 8005074:	080051c3 	.word	0x080051c3
 8005078:	0800501d 	.word	0x0800501d
 800507c:	080050cb 	.word	0x080050cb
 8005080:	0800501d 	.word	0x0800501d
 8005084:	0800501d 	.word	0x0800501d
 8005088:	08005163 	.word	0x08005163
 800508c:	6833      	ldr	r3, [r6, #0]
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6032      	str	r2, [r6, #0]
 8005094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800509c:	2301      	movs	r3, #1
 800509e:	e09d      	b.n	80051dc <_printf_i+0x1e8>
 80050a0:	6833      	ldr	r3, [r6, #0]
 80050a2:	6820      	ldr	r0, [r4, #0]
 80050a4:	1d19      	adds	r1, r3, #4
 80050a6:	6031      	str	r1, [r6, #0]
 80050a8:	0606      	lsls	r6, r0, #24
 80050aa:	d501      	bpl.n	80050b0 <_printf_i+0xbc>
 80050ac:	681d      	ldr	r5, [r3, #0]
 80050ae:	e003      	b.n	80050b8 <_printf_i+0xc4>
 80050b0:	0645      	lsls	r5, r0, #25
 80050b2:	d5fb      	bpl.n	80050ac <_printf_i+0xb8>
 80050b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	da03      	bge.n	80050c4 <_printf_i+0xd0>
 80050bc:	232d      	movs	r3, #45	@ 0x2d
 80050be:	426d      	negs	r5, r5
 80050c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c4:	4859      	ldr	r0, [pc, #356]	@ (800522c <_printf_i+0x238>)
 80050c6:	230a      	movs	r3, #10
 80050c8:	e011      	b.n	80050ee <_printf_i+0xfa>
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	6833      	ldr	r3, [r6, #0]
 80050ce:	0608      	lsls	r0, r1, #24
 80050d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d4:	d402      	bmi.n	80050dc <_printf_i+0xe8>
 80050d6:	0649      	lsls	r1, r1, #25
 80050d8:	bf48      	it	mi
 80050da:	b2ad      	uxthmi	r5, r5
 80050dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80050de:	4853      	ldr	r0, [pc, #332]	@ (800522c <_printf_i+0x238>)
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	bf14      	ite	ne
 80050e4:	230a      	movne	r3, #10
 80050e6:	2308      	moveq	r3, #8
 80050e8:	2100      	movs	r1, #0
 80050ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ee:	6866      	ldr	r6, [r4, #4]
 80050f0:	60a6      	str	r6, [r4, #8]
 80050f2:	2e00      	cmp	r6, #0
 80050f4:	bfa2      	ittt	ge
 80050f6:	6821      	ldrge	r1, [r4, #0]
 80050f8:	f021 0104 	bicge.w	r1, r1, #4
 80050fc:	6021      	strge	r1, [r4, #0]
 80050fe:	b90d      	cbnz	r5, 8005104 <_printf_i+0x110>
 8005100:	2e00      	cmp	r6, #0
 8005102:	d04b      	beq.n	800519c <_printf_i+0x1a8>
 8005104:	4616      	mov	r6, r2
 8005106:	fbb5 f1f3 	udiv	r1, r5, r3
 800510a:	fb03 5711 	mls	r7, r3, r1, r5
 800510e:	5dc7      	ldrb	r7, [r0, r7]
 8005110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005114:	462f      	mov	r7, r5
 8005116:	42bb      	cmp	r3, r7
 8005118:	460d      	mov	r5, r1
 800511a:	d9f4      	bls.n	8005106 <_printf_i+0x112>
 800511c:	2b08      	cmp	r3, #8
 800511e:	d10b      	bne.n	8005138 <_printf_i+0x144>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	07df      	lsls	r7, r3, #31
 8005124:	d508      	bpl.n	8005138 <_printf_i+0x144>
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	6861      	ldr	r1, [r4, #4]
 800512a:	4299      	cmp	r1, r3
 800512c:	bfde      	ittt	le
 800512e:	2330      	movle	r3, #48	@ 0x30
 8005130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005138:	1b92      	subs	r2, r2, r6
 800513a:	6122      	str	r2, [r4, #16]
 800513c:	f8cd a000 	str.w	sl, [sp]
 8005140:	464b      	mov	r3, r9
 8005142:	aa03      	add	r2, sp, #12
 8005144:	4621      	mov	r1, r4
 8005146:	4640      	mov	r0, r8
 8005148:	f7ff fee6 	bl	8004f18 <_printf_common>
 800514c:	3001      	adds	r0, #1
 800514e:	d14a      	bne.n	80051e6 <_printf_i+0x1f2>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	b004      	add	sp, #16
 8005156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f043 0320 	orr.w	r3, r3, #32
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	4833      	ldr	r0, [pc, #204]	@ (8005230 <_printf_i+0x23c>)
 8005164:	2778      	movs	r7, #120	@ 0x78
 8005166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	6831      	ldr	r1, [r6, #0]
 800516e:	061f      	lsls	r7, r3, #24
 8005170:	f851 5b04 	ldr.w	r5, [r1], #4
 8005174:	d402      	bmi.n	800517c <_printf_i+0x188>
 8005176:	065f      	lsls	r7, r3, #25
 8005178:	bf48      	it	mi
 800517a:	b2ad      	uxthmi	r5, r5
 800517c:	6031      	str	r1, [r6, #0]
 800517e:	07d9      	lsls	r1, r3, #31
 8005180:	bf44      	itt	mi
 8005182:	f043 0320 	orrmi.w	r3, r3, #32
 8005186:	6023      	strmi	r3, [r4, #0]
 8005188:	b11d      	cbz	r5, 8005192 <_printf_i+0x19e>
 800518a:	2310      	movs	r3, #16
 800518c:	e7ac      	b.n	80050e8 <_printf_i+0xf4>
 800518e:	4827      	ldr	r0, [pc, #156]	@ (800522c <_printf_i+0x238>)
 8005190:	e7e9      	b.n	8005166 <_printf_i+0x172>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f023 0320 	bic.w	r3, r3, #32
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	e7f6      	b.n	800518a <_printf_i+0x196>
 800519c:	4616      	mov	r6, r2
 800519e:	e7bd      	b.n	800511c <_printf_i+0x128>
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	6825      	ldr	r5, [r4, #0]
 80051a4:	6961      	ldr	r1, [r4, #20]
 80051a6:	1d18      	adds	r0, r3, #4
 80051a8:	6030      	str	r0, [r6, #0]
 80051aa:	062e      	lsls	r6, r5, #24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0x1c0>
 80051b0:	6019      	str	r1, [r3, #0]
 80051b2:	e002      	b.n	80051ba <_printf_i+0x1c6>
 80051b4:	0668      	lsls	r0, r5, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0x1bc>
 80051b8:	8019      	strh	r1, [r3, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	4616      	mov	r6, r2
 80051c0:	e7bc      	b.n	800513c <_printf_i+0x148>
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	6032      	str	r2, [r6, #0]
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	2100      	movs	r1, #0
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7fb f806 	bl	80001e0 <memchr>
 80051d4:	b108      	cbz	r0, 80051da <_printf_i+0x1e6>
 80051d6:	1b80      	subs	r0, r0, r6
 80051d8:	6060      	str	r0, [r4, #4]
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	2300      	movs	r3, #0
 80051e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e4:	e7aa      	b.n	800513c <_printf_i+0x148>
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	4632      	mov	r2, r6
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	47d0      	blx	sl
 80051f0:	3001      	adds	r0, #1
 80051f2:	d0ad      	beq.n	8005150 <_printf_i+0x15c>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	079b      	lsls	r3, r3, #30
 80051f8:	d413      	bmi.n	8005222 <_printf_i+0x22e>
 80051fa:	68e0      	ldr	r0, [r4, #12]
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	4298      	cmp	r0, r3
 8005200:	bfb8      	it	lt
 8005202:	4618      	movlt	r0, r3
 8005204:	e7a6      	b.n	8005154 <_printf_i+0x160>
 8005206:	2301      	movs	r3, #1
 8005208:	4632      	mov	r2, r6
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	47d0      	blx	sl
 8005210:	3001      	adds	r0, #1
 8005212:	d09d      	beq.n	8005150 <_printf_i+0x15c>
 8005214:	3501      	adds	r5, #1
 8005216:	68e3      	ldr	r3, [r4, #12]
 8005218:	9903      	ldr	r1, [sp, #12]
 800521a:	1a5b      	subs	r3, r3, r1
 800521c:	42ab      	cmp	r3, r5
 800521e:	dcf2      	bgt.n	8005206 <_printf_i+0x212>
 8005220:	e7eb      	b.n	80051fa <_printf_i+0x206>
 8005222:	2500      	movs	r5, #0
 8005224:	f104 0619 	add.w	r6, r4, #25
 8005228:	e7f5      	b.n	8005216 <_printf_i+0x222>
 800522a:	bf00      	nop
 800522c:	0800576c 	.word	0x0800576c
 8005230:	0800577d 	.word	0x0800577d

08005234 <__sflush_r>:
 8005234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523c:	0716      	lsls	r6, r2, #28
 800523e:	4605      	mov	r5, r0
 8005240:	460c      	mov	r4, r1
 8005242:	d454      	bmi.n	80052ee <__sflush_r+0xba>
 8005244:	684b      	ldr	r3, [r1, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	dc02      	bgt.n	8005250 <__sflush_r+0x1c>
 800524a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	dd48      	ble.n	80052e2 <__sflush_r+0xae>
 8005250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005252:	2e00      	cmp	r6, #0
 8005254:	d045      	beq.n	80052e2 <__sflush_r+0xae>
 8005256:	2300      	movs	r3, #0
 8005258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800525c:	682f      	ldr	r7, [r5, #0]
 800525e:	6a21      	ldr	r1, [r4, #32]
 8005260:	602b      	str	r3, [r5, #0]
 8005262:	d030      	beq.n	80052c6 <__sflush_r+0x92>
 8005264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	0759      	lsls	r1, r3, #29
 800526a:	d505      	bpl.n	8005278 <__sflush_r+0x44>
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005272:	b10b      	cbz	r3, 8005278 <__sflush_r+0x44>
 8005274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	d106      	bne.n	8005296 <__sflush_r+0x62>
 8005288:	6829      	ldr	r1, [r5, #0]
 800528a:	291d      	cmp	r1, #29
 800528c:	d82b      	bhi.n	80052e6 <__sflush_r+0xb2>
 800528e:	4a2a      	ldr	r2, [pc, #168]	@ (8005338 <__sflush_r+0x104>)
 8005290:	410a      	asrs	r2, r1
 8005292:	07d6      	lsls	r6, r2, #31
 8005294:	d427      	bmi.n	80052e6 <__sflush_r+0xb2>
 8005296:	2200      	movs	r2, #0
 8005298:	6062      	str	r2, [r4, #4]
 800529a:	04d9      	lsls	r1, r3, #19
 800529c:	6922      	ldr	r2, [r4, #16]
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	d504      	bpl.n	80052ac <__sflush_r+0x78>
 80052a2:	1c42      	adds	r2, r0, #1
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0x76>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	b903      	cbnz	r3, 80052ac <__sflush_r+0x78>
 80052aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80052ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052ae:	602f      	str	r7, [r5, #0]
 80052b0:	b1b9      	cbz	r1, 80052e2 <__sflush_r+0xae>
 80052b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d002      	beq.n	80052c0 <__sflush_r+0x8c>
 80052ba:	4628      	mov	r0, r5
 80052bc:	f7ff fbea 	bl	8004a94 <_free_r>
 80052c0:	2300      	movs	r3, #0
 80052c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80052c4:	e00d      	b.n	80052e2 <__sflush_r+0xae>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b0      	blx	r6
 80052cc:	4602      	mov	r2, r0
 80052ce:	1c50      	adds	r0, r2, #1
 80052d0:	d1c9      	bne.n	8005266 <__sflush_r+0x32>
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0c6      	beq.n	8005266 <__sflush_r+0x32>
 80052d8:	2b1d      	cmp	r3, #29
 80052da:	d001      	beq.n	80052e0 <__sflush_r+0xac>
 80052dc:	2b16      	cmp	r3, #22
 80052de:	d11e      	bne.n	800531e <__sflush_r+0xea>
 80052e0:	602f      	str	r7, [r5, #0]
 80052e2:	2000      	movs	r0, #0
 80052e4:	e022      	b.n	800532c <__sflush_r+0xf8>
 80052e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ea:	b21b      	sxth	r3, r3
 80052ec:	e01b      	b.n	8005326 <__sflush_r+0xf2>
 80052ee:	690f      	ldr	r7, [r1, #16]
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	d0f6      	beq.n	80052e2 <__sflush_r+0xae>
 80052f4:	0793      	lsls	r3, r2, #30
 80052f6:	680e      	ldr	r6, [r1, #0]
 80052f8:	bf08      	it	eq
 80052fa:	694b      	ldreq	r3, [r1, #20]
 80052fc:	600f      	str	r7, [r1, #0]
 80052fe:	bf18      	it	ne
 8005300:	2300      	movne	r3, #0
 8005302:	eba6 0807 	sub.w	r8, r6, r7
 8005306:	608b      	str	r3, [r1, #8]
 8005308:	f1b8 0f00 	cmp.w	r8, #0
 800530c:	dde9      	ble.n	80052e2 <__sflush_r+0xae>
 800530e:	6a21      	ldr	r1, [r4, #32]
 8005310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005312:	4643      	mov	r3, r8
 8005314:	463a      	mov	r2, r7
 8005316:	4628      	mov	r0, r5
 8005318:	47b0      	blx	r6
 800531a:	2800      	cmp	r0, #0
 800531c:	dc08      	bgt.n	8005330 <__sflush_r+0xfc>
 800531e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005330:	4407      	add	r7, r0
 8005332:	eba8 0800 	sub.w	r8, r8, r0
 8005336:	e7e7      	b.n	8005308 <__sflush_r+0xd4>
 8005338:	dfbffffe 	.word	0xdfbffffe

0800533c <_fflush_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	690b      	ldr	r3, [r1, #16]
 8005340:	4605      	mov	r5, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b913      	cbnz	r3, 800534c <_fflush_r+0x10>
 8005346:	2500      	movs	r5, #0
 8005348:	4628      	mov	r0, r5
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	b118      	cbz	r0, 8005356 <_fflush_r+0x1a>
 800534e:	6a03      	ldr	r3, [r0, #32]
 8005350:	b90b      	cbnz	r3, 8005356 <_fflush_r+0x1a>
 8005352:	f7ff f97f 	bl	8004654 <__sinit>
 8005356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f3      	beq.n	8005346 <_fflush_r+0xa>
 800535e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005360:	07d0      	lsls	r0, r2, #31
 8005362:	d404      	bmi.n	800536e <_fflush_r+0x32>
 8005364:	0599      	lsls	r1, r3, #22
 8005366:	d402      	bmi.n	800536e <_fflush_r+0x32>
 8005368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536a:	f7ff fb72 	bl	8004a52 <__retarget_lock_acquire_recursive>
 800536e:	4628      	mov	r0, r5
 8005370:	4621      	mov	r1, r4
 8005372:	f7ff ff5f 	bl	8005234 <__sflush_r>
 8005376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005378:	07da      	lsls	r2, r3, #31
 800537a:	4605      	mov	r5, r0
 800537c:	d4e4      	bmi.n	8005348 <_fflush_r+0xc>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	059b      	lsls	r3, r3, #22
 8005382:	d4e1      	bmi.n	8005348 <_fflush_r+0xc>
 8005384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005386:	f7ff fb65 	bl	8004a54 <__retarget_lock_release_recursive>
 800538a:	e7dd      	b.n	8005348 <_fflush_r+0xc>

0800538c <fiprintf>:
 800538c:	b40e      	push	{r1, r2, r3}
 800538e:	b503      	push	{r0, r1, lr}
 8005390:	4601      	mov	r1, r0
 8005392:	ab03      	add	r3, sp, #12
 8005394:	4805      	ldr	r0, [pc, #20]	@ (80053ac <fiprintf+0x20>)
 8005396:	f853 2b04 	ldr.w	r2, [r3], #4
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	f7ff fca3 	bl	8004ce8 <_vfiprintf_r>
 80053a2:	b002      	add	sp, #8
 80053a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a8:	b003      	add	sp, #12
 80053aa:	4770      	bx	lr
 80053ac:	20000024 	.word	0x20000024

080053b0 <__swhatbuf_r>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	460c      	mov	r4, r1
 80053b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b8:	2900      	cmp	r1, #0
 80053ba:	b096      	sub	sp, #88	@ 0x58
 80053bc:	4615      	mov	r5, r2
 80053be:	461e      	mov	r6, r3
 80053c0:	da0d      	bge.n	80053de <__swhatbuf_r+0x2e>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053c8:	f04f 0100 	mov.w	r1, #0
 80053cc:	bf14      	ite	ne
 80053ce:	2340      	movne	r3, #64	@ 0x40
 80053d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053d4:	2000      	movs	r0, #0
 80053d6:	6031      	str	r1, [r6, #0]
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	b016      	add	sp, #88	@ 0x58
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	466a      	mov	r2, sp
 80053e0:	f000 f87c 	bl	80054dc <_fstat_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	dbec      	blt.n	80053c2 <__swhatbuf_r+0x12>
 80053e8:	9901      	ldr	r1, [sp, #4]
 80053ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053f2:	4259      	negs	r1, r3
 80053f4:	4159      	adcs	r1, r3
 80053f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053fa:	e7eb      	b.n	80053d4 <__swhatbuf_r+0x24>

080053fc <__smakebuf_r>:
 80053fc:	898b      	ldrh	r3, [r1, #12]
 80053fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005400:	079d      	lsls	r5, r3, #30
 8005402:	4606      	mov	r6, r0
 8005404:	460c      	mov	r4, r1
 8005406:	d507      	bpl.n	8005418 <__smakebuf_r+0x1c>
 8005408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2301      	movs	r3, #1
 8005412:	6163      	str	r3, [r4, #20]
 8005414:	b003      	add	sp, #12
 8005416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005418:	ab01      	add	r3, sp, #4
 800541a:	466a      	mov	r2, sp
 800541c:	f7ff ffc8 	bl	80053b0 <__swhatbuf_r>
 8005420:	9f00      	ldr	r7, [sp, #0]
 8005422:	4605      	mov	r5, r0
 8005424:	4639      	mov	r1, r7
 8005426:	4630      	mov	r0, r6
 8005428:	f7ff fba8 	bl	8004b7c <_malloc_r>
 800542c:	b948      	cbnz	r0, 8005442 <__smakebuf_r+0x46>
 800542e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005432:	059a      	lsls	r2, r3, #22
 8005434:	d4ee      	bmi.n	8005414 <__smakebuf_r+0x18>
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	f043 0302 	orr.w	r3, r3, #2
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	e7e2      	b.n	8005408 <__smakebuf_r+0xc>
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	6020      	str	r0, [r4, #0]
 8005446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	9b01      	ldr	r3, [sp, #4]
 800544e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005452:	b15b      	cbz	r3, 800546c <__smakebuf_r+0x70>
 8005454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f851 	bl	8005500 <_isatty_r>
 800545e:	b128      	cbz	r0, 800546c <__smakebuf_r+0x70>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	431d      	orrs	r5, r3
 8005470:	81a5      	strh	r5, [r4, #12]
 8005472:	e7cf      	b.n	8005414 <__smakebuf_r+0x18>

08005474 <_putc_r>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	460d      	mov	r5, r1
 8005478:	4614      	mov	r4, r2
 800547a:	4606      	mov	r6, r0
 800547c:	b118      	cbz	r0, 8005486 <_putc_r+0x12>
 800547e:	6a03      	ldr	r3, [r0, #32]
 8005480:	b90b      	cbnz	r3, 8005486 <_putc_r+0x12>
 8005482:	f7ff f8e7 	bl	8004654 <__sinit>
 8005486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005488:	07d8      	lsls	r0, r3, #31
 800548a:	d405      	bmi.n	8005498 <_putc_r+0x24>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	0599      	lsls	r1, r3, #22
 8005490:	d402      	bmi.n	8005498 <_putc_r+0x24>
 8005492:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005494:	f7ff fadd 	bl	8004a52 <__retarget_lock_acquire_recursive>
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	3b01      	subs	r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	60a3      	str	r3, [r4, #8]
 80054a0:	da05      	bge.n	80054ae <_putc_r+0x3a>
 80054a2:	69a2      	ldr	r2, [r4, #24]
 80054a4:	4293      	cmp	r3, r2
 80054a6:	db12      	blt.n	80054ce <_putc_r+0x5a>
 80054a8:	b2eb      	uxtb	r3, r5
 80054aa:	2b0a      	cmp	r3, #10
 80054ac:	d00f      	beq.n	80054ce <_putc_r+0x5a>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	701d      	strb	r5, [r3, #0]
 80054b6:	b2ed      	uxtb	r5, r5
 80054b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054ba:	07da      	lsls	r2, r3, #31
 80054bc:	d405      	bmi.n	80054ca <_putc_r+0x56>
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	059b      	lsls	r3, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_putc_r+0x56>
 80054c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c6:	f7ff fac5 	bl	8004a54 <__retarget_lock_release_recursive>
 80054ca:	4628      	mov	r0, r5
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
 80054ce:	4629      	mov	r1, r5
 80054d0:	4622      	mov	r2, r4
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff f9af 	bl	8004836 <__swbuf_r>
 80054d8:	4605      	mov	r5, r0
 80054da:	e7ed      	b.n	80054b8 <_putc_r+0x44>

080054dc <_fstat_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	@ (80054fc <_fstat_r+0x20>)
 80054e0:	2300      	movs	r3, #0
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	f7fc f989 	bl	8001800 <_fstat>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d102      	bne.n	80054f8 <_fstat_r+0x1c>
 80054f2:	682b      	ldr	r3, [r5, #0]
 80054f4:	b103      	cbz	r3, 80054f8 <_fstat_r+0x1c>
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	2000061c 	.word	0x2000061c

08005500 <_isatty_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d06      	ldr	r5, [pc, #24]	@ (800551c <_isatty_r+0x1c>)
 8005504:	2300      	movs	r3, #0
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fc f988 	bl	8001820 <_isatty>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_isatty_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_isatty_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	2000061c 	.word	0x2000061c

08005520 <_sbrk_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d06      	ldr	r5, [pc, #24]	@ (800553c <_sbrk_r+0x1c>)
 8005524:	2300      	movs	r3, #0
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f7fc f990 	bl	8001850 <_sbrk>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_sbrk_r+0x1a>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_sbrk_r+0x1a>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	2000061c 	.word	0x2000061c

08005540 <abort>:
 8005540:	b508      	push	{r3, lr}
 8005542:	2006      	movs	r0, #6
 8005544:	f000 f82c 	bl	80055a0 <raise>
 8005548:	2001      	movs	r0, #1
 800554a:	f7fc f909 	bl	8001760 <_exit>

0800554e <_raise_r>:
 800554e:	291f      	cmp	r1, #31
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4605      	mov	r5, r0
 8005554:	460c      	mov	r4, r1
 8005556:	d904      	bls.n	8005562 <_raise_r+0x14>
 8005558:	2316      	movs	r3, #22
 800555a:	6003      	str	r3, [r0, #0]
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	bd38      	pop	{r3, r4, r5, pc}
 8005562:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005564:	b112      	cbz	r2, 800556c <_raise_r+0x1e>
 8005566:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800556a:	b94b      	cbnz	r3, 8005580 <_raise_r+0x32>
 800556c:	4628      	mov	r0, r5
 800556e:	f000 f831 	bl	80055d4 <_getpid_r>
 8005572:	4622      	mov	r2, r4
 8005574:	4601      	mov	r1, r0
 8005576:	4628      	mov	r0, r5
 8005578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800557c:	f000 b818 	b.w	80055b0 <_kill_r>
 8005580:	2b01      	cmp	r3, #1
 8005582:	d00a      	beq.n	800559a <_raise_r+0x4c>
 8005584:	1c59      	adds	r1, r3, #1
 8005586:	d103      	bne.n	8005590 <_raise_r+0x42>
 8005588:	2316      	movs	r3, #22
 800558a:	6003      	str	r3, [r0, #0]
 800558c:	2001      	movs	r0, #1
 800558e:	e7e7      	b.n	8005560 <_raise_r+0x12>
 8005590:	2100      	movs	r1, #0
 8005592:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005596:	4620      	mov	r0, r4
 8005598:	4798      	blx	r3
 800559a:	2000      	movs	r0, #0
 800559c:	e7e0      	b.n	8005560 <_raise_r+0x12>
	...

080055a0 <raise>:
 80055a0:	4b02      	ldr	r3, [pc, #8]	@ (80055ac <raise+0xc>)
 80055a2:	4601      	mov	r1, r0
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f7ff bfd2 	b.w	800554e <_raise_r>
 80055aa:	bf00      	nop
 80055ac:	20000024 	.word	0x20000024

080055b0 <_kill_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d07      	ldr	r5, [pc, #28]	@ (80055d0 <_kill_r+0x20>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	f7fc f8bf 	bl	8001740 <_kill>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d102      	bne.n	80055cc <_kill_r+0x1c>
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	b103      	cbz	r3, 80055cc <_kill_r+0x1c>
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
 80055ce:	bf00      	nop
 80055d0:	2000061c 	.word	0x2000061c

080055d4 <_getpid_r>:
 80055d4:	f7fc b8ac 	b.w	8001730 <_getpid>

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
