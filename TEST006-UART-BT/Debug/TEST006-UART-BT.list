
TEST006-UART-BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08005680  08005680  00006680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800599c  0800599c  00007088  2**0
                  CONTENTS
  4 .ARM          00000008  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a4  080059a4  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a4  080059a4  000069a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080059ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000088  08005a34  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005a34  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4cf  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e75  00000000  00000000  00011587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00013400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000644  00000000  00000000  00013c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016831  00000000  00000000  0001428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca6  00000000  00000000  0002aabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087cd9  00000000  00000000  00035763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd43c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb0  00000000  00000000  000bd480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000c0130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005668 	.word	0x08005668

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005668 	.word	0x08005668

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <LED_Control>:
#include "main.h"


extern char *p[];	//	pointer array
void LED_Control()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	int ln, st;	//ln = led number, st = state
	sscanf(p[1], "%d", &ln);
 8000586:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <LED_Control+0xa4>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	463a      	mov	r2, r7
 800058c:	4926      	ldr	r1, [pc, #152]	@ (8000628 <LED_Control+0xa8>)
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fb22 	bl	8003bd8 <siscanf>
	// if(strcmp(p[2], "ON") == 0) st = 1; else st = 0;
	st = (myStrncmp(p[2], "ON", 2) == 0) ? 1 : (myStrncmp(p[2], "OFF", 3) == 0) ? 0 : -1;
 8000594:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <LED_Control+0xa4>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	2202      	movs	r2, #2
 800059a:	4924      	ldr	r1, [pc, #144]	@ (800062c <LED_Control+0xac>)
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fbfc 	bl	8000d9a <myStrncmp>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00e      	beq.n	80005c6 <LED_Control+0x46>
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <LED_Control+0xa4>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	2203      	movs	r2, #3
 80005ae:	4920      	ldr	r1, [pc, #128]	@ (8000630 <LED_Control+0xb0>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fbf2 	bl	8000d9a <myStrncmp>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d101      	bne.n	80005c0 <LED_Control+0x40>
 80005bc:	2300      	movs	r3, #0
 80005be:	e003      	b.n	80005c8 <LED_Control+0x48>
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	e000      	b.n	80005c8 <LED_Control+0x48>
 80005c6:	2301      	movs	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
	switch(ln)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d016      	beq.n	80005fe <LED_Control+0x7e>
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dc1c      	bgt.n	800060e <LED_Control+0x8e>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d002      	beq.n	80005de <LED_Control+0x5e>
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d008      	beq.n	80005ee <LED_Control+0x6e>
 80005dc:	e017      	b.n	800060e <LED_Control+0x8e>
	{
	case 1:
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, st); break;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	2120      	movs	r1, #32
 80005e6:	4813      	ldr	r0, [pc, #76]	@ (8000634 <LED_Control+0xb4>)
 80005e8:	f001 fa88 	bl	8001afc <HAL_GPIO_WritePin>
 80005ec:	e00f      	b.n	800060e <LED_Control+0x8e>
	case 2:
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, st); break;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	480f      	ldr	r0, [pc, #60]	@ (8000634 <LED_Control+0xb4>)
 80005f8:	f001 fa80 	bl	8001afc <HAL_GPIO_WritePin>
 80005fc:	e007      	b.n	800060e <LED_Control+0x8e>
	case 3:
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, st); break;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <LED_Control+0xb4>)
 8000608:	f001 fa78 	bl	8001afc <HAL_GPIO_WritePin>
 800060c:	bf00      	nop
	}
	printf("%s %d had controlled to  %d\r\n", p[0], ln, st);
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <LED_Control+0xa4>)
 8000610:	6819      	ldr	r1, [r3, #0]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <LED_Control+0xb8>)
 8000618:	f003 f9a8 	bl	800396c <iprintf>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000194 	.word	0x20000194
 8000628:	08005680 	.word	0x08005680
 800062c:	08005684 	.word	0x08005684
 8000630:	08005688 	.word	0x08005688
 8000634:	40020000 	.word	0x40020000
 8000638:	0800568c 	.word	0x0800568c

0800063c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]

}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <HAL_UART_RxCpltCallback>:
myBuffer *Buf1, *Buf2;	// null pointer
char dum1, dum2;
int idx1 = 0, idx2 = 0;
int eol = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(huart == &huart6) // address of handle
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a3d      	ldr	r2, [pc, #244]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d10f      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x30>
	{
		Buf1->v0[idx1++] = dum1;
 8000664:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <HAL_UART_RxCpltCallback+0x104>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <HAL_UART_RxCpltCallback+0x108>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1c59      	adds	r1, r3, #1
 800066e:	483b      	ldr	r0, [pc, #236]	@ (800075c <HAL_UART_RxCpltCallback+0x108>)
 8000670:	6001      	str	r1, [r0, #0]
 8000672:	493b      	ldr	r1, [pc, #236]	@ (8000760 <HAL_UART_RxCpltCallback+0x10c>)
 8000674:	7809      	ldrb	r1, [r1, #0]
 8000676:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart6, &dum1, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	4939      	ldr	r1, [pc, #228]	@ (8000760 <HAL_UART_RxCpltCallback+0x10c>)
 800067c:	4835      	ldr	r0, [pc, #212]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 800067e:	f002 f879 	bl	8002774 <HAL_UART_Receive_IT>
			Buf2->v0[idx2++] = dum2;
			Buf2->v0[idx2] = 0;	// Null
		}
		HAL_UART_Receive_IT(&huart2, &dum2, 1);
	}
}
 8000682:	e062      	b.n	800074a <HAL_UART_RxCpltCallback+0xf6>
	else if(huart == &huart2)	// KBD input by Putty
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a37      	ldr	r2, [pc, #220]	@ (8000764 <HAL_UART_RxCpltCallback+0x110>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d15e      	bne.n	800074a <HAL_UART_RxCpltCallback+0xf6>
		if(dum2 == '\r')		//[Enter] key
 800068c:	4b36      	ldr	r3, [pc, #216]	@ (8000768 <HAL_UART_RxCpltCallback+0x114>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b0d      	cmp	r3, #13
 8000692:	d13f      	bne.n	8000714 <HAL_UART_RxCpltCallback+0xc0>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);		// Echo
 8000694:	230a      	movs	r3, #10
 8000696:	2202      	movs	r2, #2
 8000698:	4934      	ldr	r1, [pc, #208]	@ (800076c <HAL_UART_RxCpltCallback+0x118>)
 800069a:	4832      	ldr	r0, [pc, #200]	@ (8000764 <HAL_UART_RxCpltCallback+0x110>)
 800069c:	f001 ff48 	bl	8002530 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6, Buf2, idx2, 100);	// redirection to Bluetooth
 80006a0:	4b33      	ldr	r3, [pc, #204]	@ (8000770 <HAL_UART_RxCpltCallback+0x11c>)
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <HAL_UART_RxCpltCallback+0x120>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	4829      	ldr	r0, [pc, #164]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 80006ae:	f001 ff3f 	bl	8002530 <HAL_UART_Transmit>
			switch(eol)
 80006b2:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <HAL_UART_RxCpltCallback+0x124>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d827      	bhi.n	800070c <HAL_UART_RxCpltCallback+0xb8>
 80006bc:	a201      	add	r2, pc, #4	@ (adr r2, 80006c4 <HAL_UART_RxCpltCallback+0x70>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006e3 	.word	0x080006e3
 80006cc:	080006f1 	.word	0x080006f1
 80006d0:	080006ff 	.word	0x080006ff
				HAL_UART_Transmit(&huart6, "\r\n", 2, 10);		// CRLF
 80006d4:	230a      	movs	r3, #10
 80006d6:	2202      	movs	r2, #2
 80006d8:	4924      	ldr	r1, [pc, #144]	@ (800076c <HAL_UART_RxCpltCallback+0x118>)
 80006da:	481e      	ldr	r0, [pc, #120]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 80006dc:	f001 ff28 	bl	8002530 <HAL_UART_Transmit>
				break;
 80006e0:	e014      	b.n	800070c <HAL_UART_RxCpltCallback+0xb8>
				HAL_UART_Transmit(&huart6, "\n", 1, 10);		// LF
 80006e2:	230a      	movs	r3, #10
 80006e4:	2201      	movs	r2, #1
 80006e6:	4925      	ldr	r1, [pc, #148]	@ (800077c <HAL_UART_RxCpltCallback+0x128>)
 80006e8:	481a      	ldr	r0, [pc, #104]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 80006ea:	f001 ff21 	bl	8002530 <HAL_UART_Transmit>
				break;
 80006ee:	e00d      	b.n	800070c <HAL_UART_RxCpltCallback+0xb8>
				HAL_UART_Transmit(&huart6, "\0", 1, 10);		// NULL
 80006f0:	230a      	movs	r3, #10
 80006f2:	2201      	movs	r2, #1
 80006f4:	4922      	ldr	r1, [pc, #136]	@ (8000780 <HAL_UART_RxCpltCallback+0x12c>)
 80006f6:	4817      	ldr	r0, [pc, #92]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 80006f8:	f001 ff1a 	bl	8002530 <HAL_UART_Transmit>
				break;
 80006fc:	e006      	b.n	800070c <HAL_UART_RxCpltCallback+0xb8>
				HAL_UART_Transmit(&huart6, "", 1, 10);		// NULL
 80006fe:	230a      	movs	r3, #10
 8000700:	2201      	movs	r2, #1
 8000702:	4920      	ldr	r1, [pc, #128]	@ (8000784 <HAL_UART_RxCpltCallback+0x130>)
 8000704:	4813      	ldr	r0, [pc, #76]	@ (8000754 <HAL_UART_RxCpltCallback+0x100>)
 8000706:	f001 ff13 	bl	8002530 <HAL_UART_Transmit>
				break;
 800070a:	bf00      	nop
			idx2 = 0; // buffer = 0
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <HAL_UART_RxCpltCallback+0x120>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e015      	b.n	8000740 <HAL_UART_RxCpltCallback+0xec>
			HAL_UART_Transmit(&huart2, &dum2, 1, 10); // Echo
 8000714:	230a      	movs	r3, #10
 8000716:	2201      	movs	r2, #1
 8000718:	4913      	ldr	r1, [pc, #76]	@ (8000768 <HAL_UART_RxCpltCallback+0x114>)
 800071a:	4812      	ldr	r0, [pc, #72]	@ (8000764 <HAL_UART_RxCpltCallback+0x110>)
 800071c:	f001 ff08 	bl	8002530 <HAL_UART_Transmit>
			Buf2->v0[idx2++] = dum2;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <HAL_UART_RxCpltCallback+0x11c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <HAL_UART_RxCpltCallback+0x120>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	1c59      	adds	r1, r3, #1
 800072a:	4812      	ldr	r0, [pc, #72]	@ (8000774 <HAL_UART_RxCpltCallback+0x120>)
 800072c:	6001      	str	r1, [r0, #0]
 800072e:	490e      	ldr	r1, [pc, #56]	@ (8000768 <HAL_UART_RxCpltCallback+0x114>)
 8000730:	7809      	ldrb	r1, [r1, #0]
 8000732:	54d1      	strb	r1, [r2, r3]
			Buf2->v0[idx2] = 0;	// Null
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <HAL_UART_RxCpltCallback+0x11c>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_UART_RxCpltCallback+0x120>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2100      	movs	r1, #0
 800073e:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart2, &dum2, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	4909      	ldr	r1, [pc, #36]	@ (8000768 <HAL_UART_RxCpltCallback+0x114>)
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <HAL_UART_RxCpltCallback+0x110>)
 8000746:	f002 f815 	bl	8002774 <HAL_UART_Receive_IT>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000134 	.word	0x20000134
 8000758:	2000017c 	.word	0x2000017c
 800075c:	20000188 	.word	0x20000188
 8000760:	20000184 	.word	0x20000184
 8000764:	200000ec 	.word	0x200000ec
 8000768:	20000185 	.word	0x20000185
 800076c:	080056ac 	.word	0x080056ac
 8000770:	20000180 	.word	0x20000180
 8000774:	2000018c 	.word	0x2000018c
 8000778:	20000190 	.word	0x20000190
 800077c:	080056b0 	.word	0x080056b0
 8000780:	080056b4 	.word	0x080056b4
 8000784:	080056b8 	.word	0x080056b8

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	myBuffer b1, b2;
	Buf1 = &b1;
 8000790:	4a4a      	ldr	r2, [pc, #296]	@ (80008bc <main+0x134>)
 8000792:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000796:	6013      	str	r3, [r2, #0]
	Buf2 = &b2;
 8000798:	4a49      	ldr	r2, [pc, #292]	@ (80008c0 <main+0x138>)
 800079a:	463b      	mov	r3, r7
 800079c:	6013      	str	r3, [r2, #0]

	char *RED = "RED\0\r";
 800079e:	4b49      	ldr	r3, [pc, #292]	@ (80008c4 <main+0x13c>)
 80007a0:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
	char *GREEN = "GREEN\0\r";
 80007a4:	4b48      	ldr	r3, [pc, #288]	@ (80008c8 <main+0x140>)
 80007a6:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
	char *BLUE = "BLUE\0\r";
 80007aa:	4b48      	ldr	r3, [pc, #288]	@ (80008cc <main+0x144>)
 80007ac:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fdce 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f8b0 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f996 	bl	8000ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007bc:	f000 f940 	bl	8000a40 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007c0:	f000 f968 	bl	8000a94 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80007c4:	f000 f912 	bl	80009ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart("UART - Bluetooth"); Cursor(1);
 80007c8:	4841      	ldr	r0, [pc, #260]	@ (80008d0 <main+0x148>)
 80007ca:	f000 fa67 	bl	8000c9c <ProgramStart>
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fa18 	bl	8000c04 <Cursor>
  printf("Select EOL \r\n 1:CRLF\r\n 2:LF\r\n 3:NULL\r\n 4:none\r\n");
 80007d4:	483f      	ldr	r0, [pc, #252]	@ (80008d4 <main+0x14c>)
 80007d6:	f003 f931 	bl	8003a3c <puts>
  setvbuf(stdin, NULL, _IONBF, 0);
 80007da:	4b3f      	ldr	r3, [pc, #252]	@ (80008d8 <main+0x150>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6858      	ldr	r0, [r3, #4]
 80007e0:	2300      	movs	r3, #0
 80007e2:	2202      	movs	r2, #2
 80007e4:	2100      	movs	r1, #0
 80007e6:	f003 f943 	bl	8003a70 <setvbuf>
  scanf("%d", &eol);
 80007ea:	493c      	ldr	r1, [pc, #240]	@ (80008dc <main+0x154>)
 80007ec:	483c      	ldr	r0, [pc, #240]	@ (80008e0 <main+0x158>)
 80007ee:	f003 f92d 	bl	8003a4c <iscanf>
  char *t1 = "   Test string   ";
 80007f2:	4b3c      	ldr	r3, [pc, #240]	@ (80008e4 <main+0x15c>)
 80007f4:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
  char *t2 = Trim(t1);	// "test string"
 80007f8:	f8d7 03c8 	ldr.w	r0, [r7, #968]	@ 0x3c8
 80007fc:	f000 fa64 	bl	8000cc8 <Trim>
 8000800:	4603      	mov	r3, r0
 8000802:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
  printf("Before : ([%s]) = [%s]\r\n", t1, t2);	free(t2);
 8000806:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 800080a:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 800080e:	4836      	ldr	r0, [pc, #216]	@ (80008e8 <main+0x160>)
 8000810:	f003 f8ac 	bl	800396c <iprintf>
 8000814:	f8d7 03c4 	ldr.w	r0, [r7, #964]	@ 0x3c4
 8000818:	f002 ff30 	bl	800367c <free>
  printf("After :([%s]) = [%s]\r\n", t1, t2);
 800081c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8000820:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8000824:	4831      	ldr	r0, [pc, #196]	@ (80008ec <main+0x164>)
 8000826:	f003 f8a1 	bl	800396c <iprintf>

  printf("your select is %d. \r\n", eol);
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <main+0x154>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	482f      	ldr	r0, [pc, #188]	@ (80008f0 <main+0x168>)
 8000832:	f003 f89b 	bl	800396c <iprintf>
  HAL_UART_Receive_IT(&huart6, &dum1, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	492e      	ldr	r1, [pc, #184]	@ (80008f4 <main+0x16c>)
 800083a:	482f      	ldr	r0, [pc, #188]	@ (80008f8 <main+0x170>)
 800083c:	f001 ff9a 	bl	8002774 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &dum2, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	492e      	ldr	r1, [pc, #184]	@ (80008fc <main+0x174>)
 8000844:	482e      	ldr	r0, [pc, #184]	@ (8000900 <main+0x178>)
 8000846:	f001 ff95 	bl	8002774 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(idx1)
 800084a:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <main+0x17c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d02f      	beq.n	80008b2 <main+0x12a>
	{
		Buf1->v0[idx1] = 0;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <main+0x134>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b2b      	ldr	r3, [pc, #172]	@ (8000904 <main+0x17c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2100      	movs	r1, #0
 800085c:	54d1      	strb	r1, [r2, r3]
		printf("%s\r\n", Buf1);
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <main+0x134>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4828      	ldr	r0, [pc, #160]	@ (8000908 <main+0x180>)
 8000866:	f003 f881 	bl	800396c <iprintf>

		int r = Parsing(Buf1, p);	// (Buf1, a1, a2, a3);  return val : 1:cmd,   2:optionl    3:option2
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <main+0x134>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4927      	ldr	r1, [pc, #156]	@ (800090c <main+0x184>)
 8000870:	4618      	mov	r0, r3
 8000872:	f000 faeb 	bl	8000e4c <Parsing>
 8000876:	f8c7 03c0 	str.w	r0, [r7, #960]	@ 0x3c0
		if(r > 0)
 800087a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 800087e:	2b00      	cmp	r3, #0
 8000880:	dd14      	ble.n	80008ac <main+0x124>
		{
			printf("Parsing ---> [%s]  [%s]  [%s] \r\n", p[0], p[1], p[2]);
 8000882:	4b22      	ldr	r3, [pc, #136]	@ (800090c <main+0x184>)
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <main+0x184>)
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <main+0x184>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4820      	ldr	r0, [pc, #128]	@ (8000910 <main+0x188>)
 8000890:	f003 f86c 	bl	800396c <iprintf>
			if(myStrncmp(p[0], "LED", 3) == 0) LED_Control();
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <main+0x184>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2203      	movs	r2, #3
 800089a:	491e      	ldr	r1, [pc, #120]	@ (8000914 <main+0x18c>)
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fa7c 	bl	8000d9a <myStrncmp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <main+0x124>
 80008a8:	f7ff fe6a 	bl	8000580 <LED_Control>
//			else if(strncmp(p[0], "MOTOR", 5) == 0) MOTOR_Control();
//			else if(strncmp(p[0], "BUZZER", 6) == 0) BUZZER_Control();
		}
		idx1 = 0;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <main+0x17c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(500);
 80008b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008b6:	f000 fdbd 	bl	8001434 <HAL_Delay>
	if(idx1)
 80008ba:	e7c6      	b.n	800084a <main+0xc2>
 80008bc:	2000017c 	.word	0x2000017c
 80008c0:	20000180 	.word	0x20000180
 80008c4:	080056bc 	.word	0x080056bc
 80008c8:	080056c4 	.word	0x080056c4
 80008cc:	080056cc 	.word	0x080056cc
 80008d0:	080056d4 	.word	0x080056d4
 80008d4:	080056e8 	.word	0x080056e8
 80008d8:	20000038 	.word	0x20000038
 80008dc:	20000190 	.word	0x20000190
 80008e0:	08005718 	.word	0x08005718
 80008e4:	0800571c 	.word	0x0800571c
 80008e8:	08005730 	.word	0x08005730
 80008ec:	0800574c 	.word	0x0800574c
 80008f0:	08005764 	.word	0x08005764
 80008f4:	20000184 	.word	0x20000184
 80008f8:	20000134 	.word	0x20000134
 80008fc:	20000185 	.word	0x20000185
 8000900:	200000ec 	.word	0x200000ec
 8000904:	20000188 	.word	0x20000188
 8000908:	0800577c 	.word	0x0800577c
 800090c:	20000194 	.word	0x20000194
 8000910:	08005784 	.word	0x08005784
 8000914:	080057a8 	.word	0x080057a8

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	@ 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	@ 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fa5a 	bl	8003de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <SystemClock_Config+0xd0>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000988:	2310      	movs	r3, #16
 800098a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800098c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000990:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000992:	2304      	movs	r3, #4
 8000994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000996:	2304      	movs	r3, #4
 8000998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f8de 	bl	8001b60 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009aa:	f000 f913 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fb40 	bl	8002050 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d6:	f000 f8fd 	bl	8000bd4 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	@ 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_USART1_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f001 fd34 	bl	8002490 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f8d1 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000a4 	.word	0x200000a4
 8000a3c:	40011000 	.word	0x40011000

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <MX_USART2_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a78:	f001 fd0a 	bl	8002490 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f8a7 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000ec 	.word	0x200000ec
 8000a90:	40004400 	.word	0x40004400

08000a94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_USART6_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000aa0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000aa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART6_UART_Init+0x4c>)
 8000acc:	f001 fce0 	bl	8002490 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f87d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000134 	.word	0x20000134
 8000ae4:	40011400 	.word	0x40011400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a30      	ldr	r2, [pc, #192]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a29      	ldr	r2, [pc, #164]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a22      	ldr	r2, [pc, #136]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L1_Pin|L2_Pin|L3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	21e0      	movs	r1, #224	@ 0xe0
 8000b72:	4816      	ldr	r0, [pc, #88]	@ (8000bcc <MX_GPIO_Init+0xe4>)
 8000b74:	f000 ffc2 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_GPIO_Init+0xe8>)
 8000b90:	f000 fe18 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8000b94:	23e0      	movs	r3, #224	@ 0xe0
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <MX_GPIO_Init+0xe4>)
 8000bac:	f000 fe0a 	bl	80017c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2028      	movs	r0, #40	@ 0x28
 8000bb6:	f000 fd3c 	bl	8001632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bba:	2028      	movs	r0, #40	@ 0x28
 8000bbc:	f000 fd55 	bl	800166a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <__io_putchar>:
#include "main.h"
#include "myLib.h"
extern UART_HandleTypeDef huart2; //소스가 여러개 있어도 모두 모여서 하나의 실행파일로 만들어진다.

int __io_putchar(int ch)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000be8:	1d39      	adds	r1, r7, #4
 8000bea:	230a      	movs	r3, #10
 8000bec:	2201      	movs	r2, #1
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <__io_putchar+0x20>)
 8000bf0:	f001 fc9e 	bl	8002530 <HAL_UART_Transmit>
   return ch;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000ec 	.word	0x200000ec

08000c04 <Cursor>:
   printf("\033[2J\033[1;1H\n");
}


void Cursor(int OnOff)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
   if(OnOff)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <Cursor+0x16>
   {
      printf("\033[?25h\n");
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <Cursor+0x24>)
 8000c14:	f002 ff12 	bl	8003a3c <puts>
   }
   else
   {
      printf("\033[?251\n");
   }
}
 8000c18:	e002      	b.n	8000c20 <Cursor+0x1c>
      printf("\033[?251\n");
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <Cursor+0x28>)
 8000c1c:	f002 ff0e 	bl	8003a3c <puts>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	080057e4 	.word	0x080057e4
 8000c2c:	080057ec 	.word	0x080057ec

08000c30 <__io_getchar>:
	return len;
}


int __io_getchar(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
   {
      int r = HAL_UART_Receive(&huart2, &ch, 1, 10);
      if(r == HAL_OK) break;
   }
   */
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000c36:	bf00      	nop
 8000c38:	1df9      	adds	r1, r7, #7
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <__io_getchar+0x44>)
 8000c40:	f001 fd01 	bl	8002646 <HAL_UART_Receive>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f6      	bne.n	8000c38 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10);   // echo
 8000c4a:	1df9      	adds	r1, r7, #7
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <__io_getchar+0x44>)
 8000c52:	f001 fc6d 	bl	8002530 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b0d      	cmp	r3, #13
 8000c5a:	d105      	bne.n	8000c68 <__io_getchar+0x38>
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4905      	ldr	r1, [pc, #20]	@ (8000c78 <__io_getchar+0x48>)
 8000c62:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <__io_getchar+0x44>)
 8000c64:	f001 fc64 	bl	8002530 <HAL_UART_Transmit>
   return ch;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000ec 	.word	0x200000ec
 8000c78:	080057f4 	.word	0x080057f4

08000c7c <Wait>:

void Wait()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000c80:	bf00      	nop
 8000c82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c86:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <Wait+0x1c>)
 8000c88:	f000 ff20 	bl	8001acc <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f7      	bne.n	8000c82 <Wait+0x6>
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020800 	.word	0x40020800

08000c9c <ProgramStart>:

void ProgramStart(char *name)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
   printf("\033[2J\033[1;1H\n"); // [y;xH : move cur to (x,y) 2J: 화면 클리어
 8000ca4:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <ProgramStart+0x24>)
 8000ca6:	f002 fec9 	bl	8003a3c <puts>
   printf("Program(%s) started... Blue button to start\r\n", name);
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <ProgramStart+0x28>)
 8000cae:	f002 fe5d 	bl	800396c <iprintf>
   Wait(); //while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000cb2:	f7ff ffe3 	bl	8000c7c <Wait>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	080057d8 	.word	0x080057d8
 8000cc4:	080057f8 	.word	0x080057f8

08000cc8 <Trim>:
 * 	4. int CheckCMD(char *s)
 *	5. int Parsing(char *s, char *p[])
--------------------------------------------------------------------------------------*/

char* Trim(char *s)	//delete white_space ("spc \t \r \n")	" ABC " ==> "ABC"
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	int h = 0, t; //head tail
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
	t = strlen(s) - 1; // (s+t)에는 /0이 존재
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff fa83 	bl	80001e0 <strlen>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
	if(t < 0) return NULL;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da04      	bge.n	8000cf0 <Trim+0x28>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e053      	b.n	8000d92 <Trim+0xca>
	while(*(s+h) == ' ' || *(s+h) == '\t' || *(s+h) == '\r' || *(s+h) == '\n') h++;	//erase left spaces
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d0f6      	beq.n	8000cea <Trim+0x22>
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b09      	cmp	r3, #9
 8000d06:	d0f0      	beq.n	8000cea <Trim+0x22>
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b0d      	cmp	r3, #13
 8000d12:	d0ea      	beq.n	8000cea <Trim+0x22>
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b0a      	cmp	r3, #10
 8000d1e:	d0e4      	beq.n	8000cea <Trim+0x22>
	while(*(s+t) == ' ' || *(s+t) == '\t' || *(s+t) == '\r' || *(s+t) == '\n') t--;	//erase right spaces
 8000d20:	e002      	b.n	8000d28 <Trim+0x60>
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d0f6      	beq.n	8000d22 <Trim+0x5a>
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	d0f0      	beq.n	8000d22 <Trim+0x5a>
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b0d      	cmp	r3, #13
 8000d4a:	d0ea      	beq.n	8000d22 <Trim+0x5a>
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	d0e4      	beq.n	8000d22 <Trim+0x5a>


	//if(h==0 && t==strlen(s) - 1) return (s);

	char *ret = (char *)malloc(t-h+1+1);
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	3302      	adds	r3, #2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 fc83 	bl	800366c <malloc>
 8000d66:	4603      	mov	r3, r0
 8000d68:	60fb      	str	r3, [r7, #12]
	memcpy(ret, s+h, t-h+1); ret[t-h+1] = 0;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	18d1      	adds	r1, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	3301      	adds	r3, #1
 8000d78:	461a      	mov	r2, r3
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f003 f8bb 	bl	8003ef6 <memcpy>
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
	return ret;
 8000d90:	68fb      	ldr	r3, [r7, #12]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <myStrncmp>:

int myStrncmp(char *s1, char *s2, int n) // 0: ==(equal), 1: != (not equal)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b087      	sub	sp, #28
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
	for(int i = 0; i<n; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e014      	b.n	8000dd6 <myStrncmp+0x3c>
	{
		if(((*(s1+i))|0x20) != ((*(s2+i))|0x20)) return 1; // 0b0010 0000
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d001      	beq.n	8000dd0 <myStrncmp+0x36>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e007      	b.n	8000de0 <myStrncmp+0x46>
	for(int i = 0; i<n; i++)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbe6      	blt.n	8000dac <myStrncmp+0x12>
	}
	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <myStrlen>:

int myStrlen(char *s)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	for(int i = 0;; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
	{
		if(*(s+i) == 0 || *(s+i) == ' ' || *(s+i) == '\t' || *(s+i) == '\r' || *(s+i) == '\n') return i;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d017      	beq.n	8000e34 <myStrlen+0x48>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b20      	cmp	r3, #32
 8000e0e:	d011      	beq.n	8000e34 <myStrlen+0x48>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	d00b      	beq.n	8000e34 <myStrlen+0x48>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d005      	beq.n	8000e34 <myStrlen+0x48>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	d101      	bne.n	8000e38 <myStrlen+0x4c>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	e003      	b.n	8000e40 <myStrlen+0x54>
	for(int i = 0;; i++)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
		if(*(s+i) == 0 || *(s+i) == ' ' || *(s+i) == '\t' || *(s+i) == '\r' || *(s+i) == '\n') return i;
 8000e3e:	e7db      	b.n	8000df8 <myStrlen+0xc>
	}
	return -1;
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <Parsing>:
}

//char p0[10], p1[10], p2[10]; // option 자리 마련, memory 공간 미리 확보 p[0] = LED, p[1] = 1, p[2] = on
int Parsing(char *s, char *p[])	//	*p[] and **p same,
								//	space-->NULL insert	*b = "LED\01\0on" command line interface
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
			}
		}

	}*/

	int ret = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
	char *b = Trim(s), *c = NULL;
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff34 	bl	8000cc8 <Trim>
 8000e60:	61b8      	str	r0, [r7, #24]
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]


	if(*b == NULL) return 0;
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <Parsing+0x26>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e052      	b.n	8000f18 <Parsing+0xcc>
	for(int i = 0; myCmd[i].key; i++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e048      	b.n	8000f0a <Parsing+0xbe>
	{
		if(myStrncmp(b, myCmd[i].key, myStrlen(myCmd[i].key)) == 0)
 8000e78:	4a29      	ldr	r2, [pc, #164]	@ (8000f20 <Parsing+0xd4>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8000e80:	4a27      	ldr	r2, [pc, #156]	@ (8000f20 <Parsing+0xd4>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffaf 	bl	8000dec <myStrlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4621      	mov	r1, r4
 8000e94:	69b8      	ldr	r0, [r7, #24]
 8000e96:	f7ff ff80 	bl	8000d9a <myStrncmp>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d131      	bne.n	8000f04 <Parsing+0xb8>
		{
			for(int j = 0; ; j++)	// option의 수만큼 카운팅 반복
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
			{
				p[j] = b;
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	601a      	str	r2, [r3, #0]
				int idx = myStrlen(b);  //LED = 3개
 8000eb0:	69b8      	ldr	r0, [r7, #24]
 8000eb2:	f7ff ff9b 	bl	8000dec <myStrlen>
 8000eb6:	60b8      	str	r0, [r7, #8]
				if(strlen(b) == idx) { ret = j; break; } //strlen(b)는 공백 포함 자릿수
 8000eb8:	69b8      	ldr	r0, [r7, #24]
 8000eba:	f7ff f991 	bl	80001e0 <strlen>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d102      	bne.n	8000ecc <Parsing+0x80>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	e01b      	b.n	8000f04 <Parsing+0xb8>
				*(b+idx) = 0;
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
				//if(c) free(c);
				c = Trim(b + idx + 1);   //*b ==> "LED   1    On" *c = "1   On"
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4413      	add	r3, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fef2 	bl	8000cc8 <Trim>
 8000ee4:	60f8      	str	r0, [r7, #12]
				//free(b);
				b = c;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
				if(myStrlen(c) == 0) { ret = j; break; }
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ff7e 	bl	8000dec <myStrlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <Parsing+0xb0>
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e003      	b.n	8000f04 <Parsing+0xb8>
			for(int j = 0; ; j++)	// option의 수만큼 카운팅 반복
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	3301      	adds	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
			{
 8000f02:	e7cf      	b.n	8000ea4 <Parsing+0x58>
	for(int i = 0; myCmd[i].key; i++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <Parsing+0xd4>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1b0      	bne.n	8000e78 <Parsing+0x2c>
//				}
//				if(n == 0) return 1; else return 0;
			}
		}
	}
	return ret;
 8000f16:	69fb      	ldr	r3, [r7, #28]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3724      	adds	r7, #36	@ 0x24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	20000000 	.word	0x20000000

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f62:	2007      	movs	r0, #7
 8000f64:	f000 fb5a 	bl	800161c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	@ 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a53      	ldr	r2, [pc, #332]	@ (80010e0 <HAL_UART_MspInit+0x16c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12d      	bne.n	8000ff2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
 8000f9a:	4b52      	ldr	r3, [pc, #328]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a51      	ldr	r2, [pc, #324]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b4f      	ldr	r3, [pc, #316]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a4a      	ldr	r2, [pc, #296]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b48      	ldr	r3, [pc, #288]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	483f      	ldr	r0, [pc, #252]	@ (80010e8 <HAL_UART_MspInit+0x174>)
 8000fec:	f000 fbea 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ff0:	e072      	b.n	80010d8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ec <HAL_UART_MspInit+0x178>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d134      	bne.n	8001066 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	4a37      	ldr	r2, [pc, #220]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100a:	6413      	str	r3, [r2, #64]	@ 0x40
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	4b31      	ldr	r3, [pc, #196]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	4a30      	ldr	r2, [pc, #192]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	@ 0x30
 8001028:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001034:	230c      	movs	r3, #12
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001044:	2307      	movs	r3, #7
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4826      	ldr	r0, [pc, #152]	@ (80010e8 <HAL_UART_MspInit+0x174>)
 8001050:	f000 fbb8 	bl	80017c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2026      	movs	r0, #38	@ 0x26
 800105a:	f000 faea 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105e:	2026      	movs	r0, #38	@ 0x26
 8001060:	f000 fb03 	bl	800166a <HAL_NVIC_EnableIRQ>
}
 8001064:	e038      	b.n	80010d8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <HAL_UART_MspInit+0x17c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d133      	bne.n	80010d8 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001078:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_UART_MspInit+0x170>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a8:	23c0      	movs	r3, #192	@ 0xc0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010b8:	2308      	movs	r3, #8
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <HAL_UART_MspInit+0x180>)
 80010c4:	f000 fb7e 	bl	80017c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2047      	movs	r0, #71	@ 0x47
 80010ce:	f000 fab0 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010d2:	2047      	movs	r0, #71	@ 0x47
 80010d4:	f000 fac9 	bl	800166a <HAL_NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3738      	adds	r7, #56	@ 0x38
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40011000 	.word	0x40011000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40004400 	.word	0x40004400
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40020800 	.word	0x40020800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f951 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <USART2_IRQHandler+0x10>)
 800115e:	f001 fb2f 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000ec 	.word	0x200000ec

0800116c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001170:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001174:	f000 fcdc 	bl	8001b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <USART6_IRQHandler+0x10>)
 8001182:	f001 fb1d 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000134 	.word	0x20000134

08001190 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00a      	b.n	80011b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a2:	f7ff fd45 	bl	8000c30 <__io_getchar>
 80011a6:	4601      	mov	r1, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf0      	blt.n	80011a2 <_read+0x12>
  }

  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e009      	b.n	80011f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fcfb 	bl	8000be0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf1      	blt.n	80011dc <_write+0x12>
  }
  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_close>:

int _close(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122a:	605a      	str	r2, [r3, #4]
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f002 fdfe 	bl	8003e9c <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	200001bc 	.word	0x200001bc
 80012d4:	20000310 	.word	0x20000310

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	@ (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	@ (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f002 fdbd 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fa2b 	bl	8000788 <main>
  bx  lr    
 8001332:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001340:	080059ac 	.word	0x080059ac
  ldr r2, =_sbss
 8001344:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001348:	20000310 	.word	0x20000310

0800134c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <HAL_Init+0x40>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <HAL_Init+0x40>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	@ (8001390 <HAL_Init+0x40>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f94f 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fdce 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f967 	bl	8001686 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f92f 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000020 	.word	0x20000020
 80013ec:	20000028 	.word	0x20000028
 80013f0:	20000024 	.word	0x20000024

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000028 	.word	0x20000028
 8001418:	200001c0 	.word	0x200001c0

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200001c0 	.word	0x200001c0

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000028 	.word	0x20000028

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	@ (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	@ (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	@ (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff8e 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff29 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff3e 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff8e 	bl	8001570 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5d 	bl	800151c <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff31 	bl	80014e0 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff feb6 	bl	800141c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d008      	beq.n	80016d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e052      	b.n	8001776 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0216 	bic.w	r2, r2, #22
 80016de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d103      	bne.n	8001700 <HAL_DMA_Abort+0x62>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001720:	e013      	b.n	800174a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fe7b 	bl	800141c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d90c      	bls.n	800174a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e015      	b.n	8001776 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e4      	bne.n	8001722 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175c:	223f      	movs	r2, #63	@ 0x3f
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d004      	beq.n	800179c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e00c      	b.n	80017b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2205      	movs	r2, #5
 80017a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e159      	b.n	8001a94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8148 	bne.w	8001a8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d005      	beq.n	8001816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	2b02      	cmp	r3, #2
 8001814:	d130      	bne.n	8001878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 0201 	and.w	r2, r3, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d017      	beq.n	80018b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a2 	beq.w	8001a8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b57      	ldr	r3, [pc, #348]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a56      	ldr	r2, [pc, #344]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b54      	ldr	r3, [pc, #336]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001966:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a49      	ldr	r2, [pc, #292]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0x202>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a48      	ldr	r2, [pc, #288]	@ (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x1fe>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a47      	ldr	r2, [pc, #284]	@ (8001abc <HAL_GPIO_Init+0x2f8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x1fa>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a46      	ldr	r2, [pc, #280]	@ (8001ac0 <HAL_GPIO_Init+0x2fc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x1f6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a45      	ldr	r2, [pc, #276]	@ (8001ac4 <HAL_GPIO_Init+0x300>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x1f2>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e008      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c6:	2300      	movs	r3, #0
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4093      	lsls	r3, r2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d8:	4935      	ldr	r1, [pc, #212]	@ (8001ab0 <HAL_GPIO_Init+0x2ec>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a88:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	f67f aea2 	bls.w	80017e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd74 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e267      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d075      	beq.n	8001c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7e:	4b88      	ldr	r3, [pc, #544]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d00c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8a:	4b85      	ldr	r3, [pc, #532]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d112      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b96:	4b82      	ldr	r3, [pc, #520]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ba2:	d10b      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d05b      	beq.n	8001c68 <HAL_RCC_OscConfig+0x108>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d157      	bne.n	8001c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e242      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x74>
 8001bc6:	4b76      	ldr	r3, [pc, #472]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a75      	ldr	r2, [pc, #468]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b70      	ldr	r3, [pc, #448]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6f      	ldr	r2, [pc, #444]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6d      	ldr	r3, [pc, #436]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6c      	ldr	r2, [pc, #432]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	4b69      	ldr	r3, [pc, #420]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a68      	ldr	r2, [pc, #416]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a65      	ldr	r2, [pc, #404]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc00 	bl	800141c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fbfc 	bl	800141c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e207      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5b      	ldr	r3, [pc, #364]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xc0>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fbec 	bl	800141c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fbe8 	bl	800141c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1f3      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b51      	ldr	r3, [pc, #324]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0xe8>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c76:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c82:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x152>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1c7      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4937      	ldr	r1, [pc, #220]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_RCC_OscConfig+0x244>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fba1 	bl	800141c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fb9d 	bl	800141c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1a8      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4925      	ldr	r1, [pc, #148]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_OscConfig+0x244>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb80 	bl	800141c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fb7c 	bl	800141c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e187      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d036      	beq.n	8001db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_RCC_OscConfig+0x248>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fb60 	bl	800141c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fb5c 	bl	800141c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e167      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_OscConfig+0x240>)
 8001d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x200>
 8001d7e:	e01b      	b.n	8001db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_RCC_OscConfig+0x248>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb49 	bl	800141c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	e00e      	b.n	8001dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fb45 	bl	800141c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d907      	bls.n	8001dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e150      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470000 	.word	0x42470000
 8001da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b88      	ldr	r3, [pc, #544]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ea      	bne.n	8001d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8097 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b81      	ldr	r3, [pc, #516]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b7d      	ldr	r3, [pc, #500]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b77      	ldr	r3, [pc, #476]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b74      	ldr	r3, [pc, #464]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a73      	ldr	r2, [pc, #460]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb05 	bl	800141c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fb01 	bl	800141c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e10c      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd4 <HAL_RCC_OscConfig+0x474>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
 8001e3c:	4b64      	ldr	r3, [pc, #400]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	4a63      	ldr	r2, [pc, #396]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e48:	e01c      	b.n	8001e84 <HAL_RCC_OscConfig+0x324>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x30c>
 8001e52:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0x324>
 8001e6c:	4b58      	ldr	r3, [pc, #352]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e70:	4a57      	ldr	r2, [pc, #348]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e78:	4b55      	ldr	r3, [pc, #340]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a54      	ldr	r2, [pc, #336]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fac6 	bl	800141c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff fac2 	bl	800141c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0cb      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ee      	beq.n	8001e94 <HAL_RCC_OscConfig+0x334>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fab0 	bl	800141c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7ff faac 	bl	800141c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0b5      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ee      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4b39      	ldr	r3, [pc, #228]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	4a38      	ldr	r2, [pc, #224]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a1 	beq.w	8002040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d05c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d141      	bne.n	8001f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <HAL_RCC_OscConfig+0x478>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa80 	bl	800141c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff fa7c 	bl	800141c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e087      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	019b      	lsls	r3, r3, #6
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	491b      	ldr	r1, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x478>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fa55 	bl	800141c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff fa51 	bl	800141c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e05c      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x416>
 8001f94:	e054      	b.n	8002040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_RCC_OscConfig+0x478>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fa3e 	bl	800141c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fa3a 	bl	800141c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e045      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x444>
 8001fc2:	e03d      	b.n	8002040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e038      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x4ec>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d028      	beq.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d121      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d11a      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0cc      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d90c      	bls.n	800208c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a4:	4b59      	ldr	r3, [pc, #356]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a58      	ldr	r2, [pc, #352]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020bc:	4b53      	ldr	r3, [pc, #332]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a52      	ldr	r2, [pc, #328]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b50      	ldr	r3, [pc, #320]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	494d      	ldr	r1, [pc, #308]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d044      	beq.n	8002170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d119      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	2b03      	cmp	r3, #3
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4b3f      	ldr	r3, [pc, #252]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e067      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b37      	ldr	r3, [pc, #220]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4934      	ldr	r1, [pc, #208]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002140:	f7ff f96c 	bl	800141c <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff f968 	bl	800141c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e04f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 020c 	and.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1eb      	bne.n	8002148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d20c      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e032      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4916      	ldr	r1, [pc, #88]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c2:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	490e      	ldr	r1, [pc, #56]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d6:	f000 f821 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	490a      	ldr	r1, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	5ccb      	ldrb	r3, [r1, r3]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f8cc 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00
 800220c:	40023800 	.word	0x40023800
 8002210:	08005834 	.word	0x08005834
 8002214:	20000020 	.word	0x20000020
 8002218:	20000024 	.word	0x20000024

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002220:	b094      	sub	sp, #80	@ 0x50
 8002222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	647b      	str	r3, [r7, #68]	@ 0x44
 8002228:	2300      	movs	r3, #0
 800222a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800222c:	2300      	movs	r3, #0
 800222e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002234:	4b79      	ldr	r3, [pc, #484]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d00d      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x40>
 8002240:	2b08      	cmp	r3, #8
 8002242:	f200 80e1 	bhi.w	8002408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x34>
 800224a:	2b04      	cmp	r3, #4
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x3a>
 800224e:	e0db      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x204>)
 8002252:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002254:	e0db      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002256:	4b73      	ldr	r3, [pc, #460]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x208>)
 8002258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800225a:	e0d8      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800225c:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002264:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002266:	4b6d      	ldr	r3, [pc, #436]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d063      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002272:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	2200      	movs	r2, #0
 800227a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800227c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	633b      	str	r3, [r7, #48]	@ 0x30
 8002286:	2300      	movs	r3, #0
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
 800228a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800228e:	4622      	mov	r2, r4
 8002290:	462b      	mov	r3, r5
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	0159      	lsls	r1, r3, #5
 800229c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a0:	0150      	lsls	r0, r2, #5
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4621      	mov	r1, r4
 80022a8:	1a51      	subs	r1, r2, r1
 80022aa:	6139      	str	r1, [r7, #16]
 80022ac:	4629      	mov	r1, r5
 80022ae:	eb63 0301 	sbc.w	r3, r3, r1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c0:	4659      	mov	r1, fp
 80022c2:	018b      	lsls	r3, r1, #6
 80022c4:	4651      	mov	r1, sl
 80022c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ca:	4651      	mov	r1, sl
 80022cc:	018a      	lsls	r2, r1, #6
 80022ce:	4651      	mov	r1, sl
 80022d0:	ebb2 0801 	subs.w	r8, r2, r1
 80022d4:	4659      	mov	r1, fp
 80022d6:	eb63 0901 	sbc.w	r9, r3, r1
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ee:	4690      	mov	r8, r2
 80022f0:	4699      	mov	r9, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	eb18 0303 	adds.w	r3, r8, r3
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	462b      	mov	r3, r5
 80022fc:	eb49 0303 	adc.w	r3, r9, r3
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800230e:	4629      	mov	r1, r5
 8002310:	024b      	lsls	r3, r1, #9
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002318:	4621      	mov	r1, r4
 800231a:	024a      	lsls	r2, r1, #9
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002322:	2200      	movs	r2, #0
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800232c:	f7fd ffb0 	bl	8000290 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4613      	mov	r3, r2
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002338:	e058      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b38      	ldr	r3, [pc, #224]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	4618      	mov	r0, r3
 8002344:	4611      	mov	r1, r2
 8002346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002354:	4642      	mov	r2, r8
 8002356:	464b      	mov	r3, r9
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	0159      	lsls	r1, r3, #5
 8002362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002366:	0150      	lsls	r0, r2, #5
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4641      	mov	r1, r8
 800236e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002372:	4649      	mov	r1, r9
 8002374:	eb63 0b01 	sbc.w	fp, r3, r1
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800238c:	ebb2 040a 	subs.w	r4, r2, sl
 8002390:	eb63 050b 	sbc.w	r5, r3, fp
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	00eb      	lsls	r3, r5, #3
 800239e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a2:	00e2      	lsls	r2, r4, #3
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	4643      	mov	r3, r8
 80023aa:	18e3      	adds	r3, r4, r3
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	464b      	mov	r3, r9
 80023b0:	eb45 0303 	adc.w	r3, r5, r3
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023c2:	4629      	mov	r1, r5
 80023c4:	028b      	lsls	r3, r1, #10
 80023c6:	4621      	mov	r1, r4
 80023c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023cc:	4621      	mov	r1, r4
 80023ce:	028a      	lsls	r2, r1, #10
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d6:	2200      	movs	r2, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	61fa      	str	r2, [r7, #28]
 80023dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e0:	f7fd ff56 	bl	8000290 <__aeabi_uldivmod>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4613      	mov	r3, r2
 80023ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCC_GetSysClockFreq+0x200>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80023fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x204>)
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002410:	4618      	mov	r0, r3
 8002412:	3750      	adds	r7, #80	@ 0x50
 8002414:	46bd      	mov	sp, r7
 8002416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000020 	.word	0x20000020

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08005844 	.word	0x08005844

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800246c:	f7ff ffdc 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0b5b      	lsrs	r3, r3, #13
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4903      	ldr	r1, [pc, #12]	@ (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08005844 	.word	0x08005844

08002490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e042      	b.n	8002528 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fd5c 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	@ 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fe55 	bl	8003184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b20      	cmp	r3, #32
 800254e:	d175      	bne.n	800263c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_Transmit+0x2c>
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e06e      	b.n	800263e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2221      	movs	r2, #33	@ 0x21
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256e:	f7fe ff55 	bl	800141c <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x6c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a4:	e02e      	b.n	8002604 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	@ 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fbb7 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e03a      	b.n	800263e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3302      	adds	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e007      	b.n	80025f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1cb      	bne.n	80025a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fb83 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e006      	b.n	800263e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b08a      	sub	sp, #40	@ 0x28
 800264a:	af02      	add	r7, sp, #8
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	f040 8081 	bne.w	800276a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Receive+0x2e>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e079      	b.n	800276c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2222      	movs	r2, #34	@ 0x22
 8002682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800268c:	f7fe fec6 	bl	800141c <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a6:	d108      	bne.n	80026ba <HAL_UART_Receive+0x74>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e003      	b.n	80026c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026c2:	e047      	b.n	8002754 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2200      	movs	r2, #0
 80026cc:	2120      	movs	r1, #32
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fb28 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e042      	b.n	800276c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10c      	bne.n	8002706 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3302      	adds	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e01f      	b.n	8002746 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270e:	d007      	beq.n	8002720 <HAL_UART_Receive+0xda>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_UART_Receive+0xe8>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e008      	b.n	8002740 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800273a:	b2da      	uxtb	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3301      	adds	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1b2      	bne.n	80026c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	d112      	bne.n	80027b4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_UART_Receive_IT+0x26>
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00b      	b.n	80027b6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fb13 	bl	8002dd6 <UART_Start_Receive_IT>
 80027b0:	4603      	mov	r3, r0
 80027b2:	e000      	b.n	80027b6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ba      	sub	sp, #232	@ 0xe8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_UART_IRQHandler+0x66>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fbf2 	bl	8003008 <UART_Receive_IT>
      return;
 8002824:	e25b      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80de 	beq.w	80029ec <HAL_UART_IRQHandler+0x22c>
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800283c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002840:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80d1 	beq.w	80029ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0xae>
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_UART_IRQHandler+0xd2>
 800287a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_UART_IRQHandler+0xf6>
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d011      	beq.n	80028e6 <HAL_UART_IRQHandler+0x126>
 80028c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f043 0208 	orr.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 81f2 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_UART_IRQHandler+0x14e>
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fb7d 	bl	8003008 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b40      	cmp	r3, #64	@ 0x40
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_UART_IRQHandler+0x17a>
 8002932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d04f      	beq.n	80029da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa85 	bl	8002e4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b40      	cmp	r3, #64	@ 0x40
 800294c:	d141      	bne.n	80029d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800296c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800297a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800297e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1d9      	bne.n	800294e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba0 <HAL_UART_IRQHandler+0x3e0>)
 80029a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fee5 	bl	800177e <HAL_DMA_Abort_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029c4:	4610      	mov	r0, r2
 80029c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	e00e      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f994 	bl	8002cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	e00a      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f990 	bl	8002cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	e006      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f98c 	bl	8002cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029e6:	e175      	b.n	8002cd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	bf00      	nop
    return;
 80029ea:	e173      	b.n	8002cd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 814f 	bne.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8148 	beq.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8141 	beq.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a32:	2b40      	cmp	r3, #64	@ 0x40
 8002a34:	f040 80b6 	bne.w	8002ba4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8145 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a56:	429a      	cmp	r2, r3
 8002a58:	f080 813e 	bcs.w	8002cd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6e:	f000 8088 	beq.w	8002b82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002aa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1d9      	bne.n	8002a72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ace:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e1      	bne.n	8002abe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e3      	bne.n	8002afa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b52:	f023 0310 	bic.w	r3, r3, #16
 8002b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b6c:	e841 2300 	strex	r3, r2, [r1]
 8002b70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e3      	bne.n	8002b40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fd8e 	bl	800169e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8b7 	bl	8002d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b9e:	e09b      	b.n	8002cd8 <HAL_UART_IRQHandler+0x518>
 8002ba0:	08002f11 	.word	0x08002f11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 808e 	beq.w	8002cdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8089 	beq.w	8002cdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bee:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e3      	bne.n	8002bca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	623b      	str	r3, [r7, #32]
   return(result);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c6c:	61fa      	str	r2, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	617b      	str	r3, [r7, #20]
   return(result);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e3      	bne.n	8002c48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f83d 	bl	8002d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c92:	e023      	b.n	8002cdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x4f4>
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f943 	bl	8002f38 <UART_Transmit_IT>
    return;
 8002cb2:	e014      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <HAL_UART_IRQHandler+0x51e>
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f983 	bl	8002fd8 <UART_EndTransmit_IT>
    return;
 8002cd2:	e004      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
    return;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
      return;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
      return;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	37e8      	adds	r7, #232	@ 0xe8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d34:	e03b      	b.n	8002dae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d037      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe fb6d 	bl	800141c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e03a      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d023      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b80      	cmp	r3, #128	@ 0x80
 8002d6a:	d020      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b40      	cmp	r3, #64	@ 0x40
 8002d70:	d01d      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d116      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f857 	bl	8002e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2208      	movs	r2, #8
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d0b4      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	4613      	mov	r3, r2
 8002de2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2222      	movs	r2, #34	@ 0x22
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0220 	orr.w	r2, r2, #32
 8002e3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b095      	sub	sp, #84	@ 0x54
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e72:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e5      	bne.n	8002e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d119      	bne.n	8002ef6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 0310 	bic.w	r3, r3, #16
 8002ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ee2:	61ba      	str	r2, [r7, #24]
 8002ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e5      	bne.n	8002ec2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f04:	bf00      	nop
 8002f06:	3754      	adds	r7, #84	@ 0x54
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff fee4 	bl	8002cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b21      	cmp	r3, #33	@ 0x21
 8002f4a:	d13e      	bne.n	8002fca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f54:	d114      	bne.n	8002f80 <UART_Transmit_IT+0x48>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d110      	bne.n	8002f80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]
 8002f7e:	e008      	b.n	8002f92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	1c59      	adds	r1, r3, #1
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6211      	str	r1, [r2, #32]
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fe73 	bl	8002ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	@ 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b22      	cmp	r3, #34	@ 0x22
 800301a:	f040 80ae 	bne.w	800317a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003026:	d117      	bne.n	8003058 <UART_Receive_IT+0x50>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d113      	bne.n	8003058 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	b29a      	uxth	r2, r3
 8003048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	1c9a      	adds	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	@ 0x28
 8003056:	e026      	b.n	80030a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	d007      	beq.n	800307c <UART_Receive_IT+0x74>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <UART_Receive_IT+0x82>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e008      	b.n	800309c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003096:	b2da      	uxtb	r2, r3
 8003098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d15d      	bne.n	8003176 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0220 	bic.w	r2, r2, #32
 80030c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d135      	bne.n	800316c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	613b      	str	r3, [r7, #16]
   return(result);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f023 0310 	bic.w	r3, r3, #16
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003126:	623a      	str	r2, [r7, #32]
 8003128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	69f9      	ldr	r1, [r7, #28]
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	61bb      	str	r3, [r7, #24]
   return(result);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d10a      	bne.n	800315e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fdd1 	bl	8002d0c <HAL_UARTEx_RxEventCallback>
 800316a:	e002      	b.n	8003172 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd fa71 	bl	8000654 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e002      	b.n	800317c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3730      	adds	r7, #48	@ 0x30
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b0c0      	sub	sp, #256	@ 0x100
 800318a:	af00      	add	r7, sp, #0
 800318c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	ea40 0301 	orr.w	r3, r0, r1
 80031ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031dc:	f021 010c 	bic.w	r1, r1, #12
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ea:	430b      	orrs	r3, r1
 80031ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	6999      	ldr	r1, [r3, #24]
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	ea40 0301 	orr.w	r3, r0, r1
 800320a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8f      	ldr	r3, [pc, #572]	@ (8003450 <UART_SetConfig+0x2cc>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <UART_SetConfig+0xa0>
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8d      	ldr	r3, [pc, #564]	@ (8003454 <UART_SetConfig+0x2d0>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d104      	bne.n	800322e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff f920 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003228:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800322c:	e003      	b.n	8003236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7ff f907 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003232:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003240:	f040 810c 	bne.w	800345c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800324e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003256:	4622      	mov	r2, r4
 8003258:	462b      	mov	r3, r5
 800325a:	1891      	adds	r1, r2, r2
 800325c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800325e:	415b      	adcs	r3, r3
 8003260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003266:	4621      	mov	r1, r4
 8003268:	eb12 0801 	adds.w	r8, r2, r1
 800326c:	4629      	mov	r1, r5
 800326e:	eb43 0901 	adc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003294:	462b      	mov	r3, r5
 8003296:	eb49 0303 	adc.w	r3, r9, r3
 800329a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032b2:	460b      	mov	r3, r1
 80032b4:	18db      	adds	r3, r3, r3
 80032b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b8:	4613      	mov	r3, r2
 80032ba:	eb42 0303 	adc.w	r3, r2, r3
 80032be:	657b      	str	r3, [r7, #84]	@ 0x54
 80032c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032c8:	f7fc ffe2 	bl	8000290 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b61      	ldr	r3, [pc, #388]	@ (8003458 <UART_SetConfig+0x2d4>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011c      	lsls	r4, r3, #4
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	1891      	adds	r1, r2, r2
 80032f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032f4:	415b      	adcs	r3, r3
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032fc:	4641      	mov	r1, r8
 80032fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003302:	4649      	mov	r1, r9
 8003304:	eb43 0b01 	adc.w	fp, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331c:	4692      	mov	sl, r2
 800331e:	469b      	mov	fp, r3
 8003320:	4643      	mov	r3, r8
 8003322:	eb1a 0303 	adds.w	r3, sl, r3
 8003326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800332a:	464b      	mov	r3, r9
 800332c:	eb4b 0303 	adc.w	r3, fp, r3
 8003330:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003340:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003348:	460b      	mov	r3, r1
 800334a:	18db      	adds	r3, r3, r3
 800334c:	643b      	str	r3, [r7, #64]	@ 0x40
 800334e:	4613      	mov	r3, r2
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	647b      	str	r3, [r7, #68]	@ 0x44
 8003356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800335a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800335e:	f7fc ff97 	bl	8000290 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4611      	mov	r1, r2
 8003368:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <UART_SetConfig+0x2d4>)
 800336a:	fba3 2301 	umull	r2, r3, r3, r1
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2264      	movs	r2, #100	@ 0x64
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800337e:	4b36      	ldr	r3, [pc, #216]	@ (8003458 <UART_SetConfig+0x2d4>)
 8003380:	fba3 2302 	umull	r2, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800338c:	441c      	add	r4, r3
 800338e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003398:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800339c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033a8:	415b      	adcs	r3, r3
 80033aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033b0:	4641      	mov	r1, r8
 80033b2:	1851      	adds	r1, r2, r1
 80033b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80033b6:	4649      	mov	r1, r9
 80033b8:	414b      	adcs	r3, r1
 80033ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033c8:	4659      	mov	r1, fp
 80033ca:	00cb      	lsls	r3, r1, #3
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d2:	4651      	mov	r1, sl
 80033d4:	00ca      	lsls	r2, r1, #3
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	4642      	mov	r2, r8
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e4:	464b      	mov	r3, r9
 80033e6:	460a      	mov	r2, r1
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003404:	460b      	mov	r3, r1
 8003406:	18db      	adds	r3, r3, r3
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340a:	4613      	mov	r3, r2
 800340c:	eb42 0303 	adc.w	r3, r2, r3
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800341a:	f7fc ff39 	bl	8000290 <__aeabi_uldivmod>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <UART_SetConfig+0x2d4>)
 8003424:	fba3 1302 	umull	r1, r3, r3, r2
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	2164      	movs	r1, #100	@ 0x64
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3332      	adds	r3, #50	@ 0x32
 8003436:	4a08      	ldr	r2, [pc, #32]	@ (8003458 <UART_SetConfig+0x2d4>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	f003 0207 	and.w	r2, r3, #7
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4422      	add	r2, r4
 800344a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800344c:	e106      	b.n	800365c <UART_SetConfig+0x4d8>
 800344e:	bf00      	nop
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003466:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800346a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800346e:	4642      	mov	r2, r8
 8003470:	464b      	mov	r3, r9
 8003472:	1891      	adds	r1, r2, r2
 8003474:	6239      	str	r1, [r7, #32]
 8003476:	415b      	adcs	r3, r3
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800347e:	4641      	mov	r1, r8
 8003480:	1854      	adds	r4, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0501 	adc.w	r5, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034a4:	464b      	mov	r3, r9
 80034a6:	eb45 0303 	adc.w	r3, r5, r3
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034ca:	4629      	mov	r1, r5
 80034cc:	008b      	lsls	r3, r1, #2
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d4:	4621      	mov	r1, r4
 80034d6:	008a      	lsls	r2, r1, #2
 80034d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034dc:	f7fc fed8 	bl	8000290 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4b60      	ldr	r3, [pc, #384]	@ (8003668 <UART_SetConfig+0x4e4>)
 80034e6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	011c      	lsls	r4, r3, #4
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003500:	4642      	mov	r2, r8
 8003502:	464b      	mov	r3, r9
 8003504:	1891      	adds	r1, r2, r2
 8003506:	61b9      	str	r1, [r7, #24]
 8003508:	415b      	adcs	r3, r3
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003510:	4641      	mov	r1, r8
 8003512:	1851      	adds	r1, r2, r1
 8003514:	6139      	str	r1, [r7, #16]
 8003516:	4649      	mov	r1, r9
 8003518:	414b      	adcs	r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	00cb      	lsls	r3, r1, #3
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003532:	4651      	mov	r1, sl
 8003534:	00ca      	lsls	r2, r1, #3
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	4603      	mov	r3, r0
 800353c:	4642      	mov	r2, r8
 800353e:	189b      	adds	r3, r3, r2
 8003540:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	67bb      	str	r3, [r7, #120]	@ 0x78
 800355a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003568:	4649      	mov	r1, r9
 800356a:	008b      	lsls	r3, r1, #2
 800356c:	4641      	mov	r1, r8
 800356e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003572:	4641      	mov	r1, r8
 8003574:	008a      	lsls	r2, r1, #2
 8003576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800357a:	f7fc fe89 	bl	8000290 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4611      	mov	r1, r2
 8003584:	4b38      	ldr	r3, [pc, #224]	@ (8003668 <UART_SetConfig+0x4e4>)
 8003586:	fba3 2301 	umull	r2, r3, r3, r1
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2264      	movs	r2, #100	@ 0x64
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	1acb      	subs	r3, r1, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	@ 0x32
 8003598:	4a33      	ldr	r2, [pc, #204]	@ (8003668 <UART_SetConfig+0x4e4>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a4:	441c      	add	r4, r3
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035aa:	2200      	movs	r2, #0
 80035ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80035b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035b4:	4642      	mov	r2, r8
 80035b6:	464b      	mov	r3, r9
 80035b8:	1891      	adds	r1, r2, r2
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	415b      	adcs	r3, r3
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c4:	4641      	mov	r1, r8
 80035c6:	1851      	adds	r1, r2, r1
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	4649      	mov	r1, r9
 80035cc:	414b      	adcs	r3, r1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035dc:	4659      	mov	r1, fp
 80035de:	00cb      	lsls	r3, r1, #3
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e6:	4651      	mov	r1, sl
 80035e8:	00ca      	lsls	r2, r1, #3
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	4642      	mov	r2, r8
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f6:	464b      	mov	r3, r9
 80035f8:	460a      	mov	r2, r1
 80035fa:	eb42 0303 	adc.w	r3, r2, r3
 80035fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	663b      	str	r3, [r7, #96]	@ 0x60
 800360a:	667a      	str	r2, [r7, #100]	@ 0x64
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003618:	4649      	mov	r1, r9
 800361a:	008b      	lsls	r3, r1, #2
 800361c:	4641      	mov	r1, r8
 800361e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003622:	4641      	mov	r1, r8
 8003624:	008a      	lsls	r2, r1, #2
 8003626:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800362a:	f7fc fe31 	bl	8000290 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <UART_SetConfig+0x4e4>)
 8003634:	fba3 1302 	umull	r1, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	2164      	movs	r1, #100	@ 0x64
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	3332      	adds	r3, #50	@ 0x32
 8003646:	4a08      	ldr	r2, [pc, #32]	@ (8003668 <UART_SetConfig+0x4e4>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4422      	add	r2, r4
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <malloc>:
 800366c:	4b02      	ldr	r3, [pc, #8]	@ (8003678 <malloc+0xc>)
 800366e:	4601      	mov	r1, r0
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	f000 b82d 	b.w	80036d0 <_malloc_r>
 8003676:	bf00      	nop
 8003678:	20000038 	.word	0x20000038

0800367c <free>:
 800367c:	4b02      	ldr	r3, [pc, #8]	@ (8003688 <free+0xc>)
 800367e:	4601      	mov	r1, r0
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	f000 bc47 	b.w	8003f14 <_free_r>
 8003686:	bf00      	nop
 8003688:	20000038 	.word	0x20000038

0800368c <sbrk_aligned>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	4e0f      	ldr	r6, [pc, #60]	@ (80036cc <sbrk_aligned+0x40>)
 8003690:	460c      	mov	r4, r1
 8003692:	6831      	ldr	r1, [r6, #0]
 8003694:	4605      	mov	r5, r0
 8003696:	b911      	cbnz	r1, 800369e <sbrk_aligned+0x12>
 8003698:	f000 fbde 	bl	8003e58 <_sbrk_r>
 800369c:	6030      	str	r0, [r6, #0]
 800369e:	4621      	mov	r1, r4
 80036a0:	4628      	mov	r0, r5
 80036a2:	f000 fbd9 	bl	8003e58 <_sbrk_r>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d103      	bne.n	80036b2 <sbrk_aligned+0x26>
 80036aa:	f04f 34ff 	mov.w	r4, #4294967295
 80036ae:	4620      	mov	r0, r4
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
 80036b2:	1cc4      	adds	r4, r0, #3
 80036b4:	f024 0403 	bic.w	r4, r4, #3
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d0f8      	beq.n	80036ae <sbrk_aligned+0x22>
 80036bc:	1a21      	subs	r1, r4, r0
 80036be:	4628      	mov	r0, r5
 80036c0:	f000 fbca 	bl	8003e58 <_sbrk_r>
 80036c4:	3001      	adds	r0, #1
 80036c6:	d1f2      	bne.n	80036ae <sbrk_aligned+0x22>
 80036c8:	e7ef      	b.n	80036aa <sbrk_aligned+0x1e>
 80036ca:	bf00      	nop
 80036cc:	200001c4 	.word	0x200001c4

080036d0 <_malloc_r>:
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	1ccd      	adds	r5, r1, #3
 80036d6:	f025 0503 	bic.w	r5, r5, #3
 80036da:	3508      	adds	r5, #8
 80036dc:	2d0c      	cmp	r5, #12
 80036de:	bf38      	it	cc
 80036e0:	250c      	movcc	r5, #12
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	4606      	mov	r6, r0
 80036e6:	db01      	blt.n	80036ec <_malloc_r+0x1c>
 80036e8:	42a9      	cmp	r1, r5
 80036ea:	d904      	bls.n	80036f6 <_malloc_r+0x26>
 80036ec:	230c      	movs	r3, #12
 80036ee:	6033      	str	r3, [r6, #0]
 80036f0:	2000      	movs	r0, #0
 80036f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037cc <_malloc_r+0xfc>
 80036fa:	f000 f869 	bl	80037d0 <__malloc_lock>
 80036fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003702:	461c      	mov	r4, r3
 8003704:	bb44      	cbnz	r4, 8003758 <_malloc_r+0x88>
 8003706:	4629      	mov	r1, r5
 8003708:	4630      	mov	r0, r6
 800370a:	f7ff ffbf 	bl	800368c <sbrk_aligned>
 800370e:	1c43      	adds	r3, r0, #1
 8003710:	4604      	mov	r4, r0
 8003712:	d158      	bne.n	80037c6 <_malloc_r+0xf6>
 8003714:	f8d8 4000 	ldr.w	r4, [r8]
 8003718:	4627      	mov	r7, r4
 800371a:	2f00      	cmp	r7, #0
 800371c:	d143      	bne.n	80037a6 <_malloc_r+0xd6>
 800371e:	2c00      	cmp	r4, #0
 8003720:	d04b      	beq.n	80037ba <_malloc_r+0xea>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	4639      	mov	r1, r7
 8003726:	4630      	mov	r0, r6
 8003728:	eb04 0903 	add.w	r9, r4, r3
 800372c:	f000 fb94 	bl	8003e58 <_sbrk_r>
 8003730:	4581      	cmp	r9, r0
 8003732:	d142      	bne.n	80037ba <_malloc_r+0xea>
 8003734:	6821      	ldr	r1, [r4, #0]
 8003736:	1a6d      	subs	r5, r5, r1
 8003738:	4629      	mov	r1, r5
 800373a:	4630      	mov	r0, r6
 800373c:	f7ff ffa6 	bl	800368c <sbrk_aligned>
 8003740:	3001      	adds	r0, #1
 8003742:	d03a      	beq.n	80037ba <_malloc_r+0xea>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	442b      	add	r3, r5
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	f8d8 3000 	ldr.w	r3, [r8]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	bb62      	cbnz	r2, 80037ac <_malloc_r+0xdc>
 8003752:	f8c8 7000 	str.w	r7, [r8]
 8003756:	e00f      	b.n	8003778 <_malloc_r+0xa8>
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	1b52      	subs	r2, r2, r5
 800375c:	d420      	bmi.n	80037a0 <_malloc_r+0xd0>
 800375e:	2a0b      	cmp	r2, #11
 8003760:	d917      	bls.n	8003792 <_malloc_r+0xc2>
 8003762:	1961      	adds	r1, r4, r5
 8003764:	42a3      	cmp	r3, r4
 8003766:	6025      	str	r5, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	6059      	strne	r1, [r3, #4]
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	bf08      	it	eq
 8003770:	f8c8 1000 	streq.w	r1, [r8]
 8003774:	5162      	str	r2, [r4, r5]
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	4630      	mov	r0, r6
 800377a:	f000 f82f 	bl	80037dc <__malloc_unlock>
 800377e:	f104 000b 	add.w	r0, r4, #11
 8003782:	1d23      	adds	r3, r4, #4
 8003784:	f020 0007 	bic.w	r0, r0, #7
 8003788:	1ac2      	subs	r2, r0, r3
 800378a:	bf1c      	itt	ne
 800378c:	1a1b      	subne	r3, r3, r0
 800378e:	50a3      	strne	r3, [r4, r2]
 8003790:	e7af      	b.n	80036f2 <_malloc_r+0x22>
 8003792:	6862      	ldr	r2, [r4, #4]
 8003794:	42a3      	cmp	r3, r4
 8003796:	bf0c      	ite	eq
 8003798:	f8c8 2000 	streq.w	r2, [r8]
 800379c:	605a      	strne	r2, [r3, #4]
 800379e:	e7eb      	b.n	8003778 <_malloc_r+0xa8>
 80037a0:	4623      	mov	r3, r4
 80037a2:	6864      	ldr	r4, [r4, #4]
 80037a4:	e7ae      	b.n	8003704 <_malloc_r+0x34>
 80037a6:	463c      	mov	r4, r7
 80037a8:	687f      	ldr	r7, [r7, #4]
 80037aa:	e7b6      	b.n	800371a <_malloc_r+0x4a>
 80037ac:	461a      	mov	r2, r3
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d1fb      	bne.n	80037ac <_malloc_r+0xdc>
 80037b4:	2300      	movs	r3, #0
 80037b6:	6053      	str	r3, [r2, #4]
 80037b8:	e7de      	b.n	8003778 <_malloc_r+0xa8>
 80037ba:	230c      	movs	r3, #12
 80037bc:	6033      	str	r3, [r6, #0]
 80037be:	4630      	mov	r0, r6
 80037c0:	f000 f80c 	bl	80037dc <__malloc_unlock>
 80037c4:	e794      	b.n	80036f0 <_malloc_r+0x20>
 80037c6:	6005      	str	r5, [r0, #0]
 80037c8:	e7d6      	b.n	8003778 <_malloc_r+0xa8>
 80037ca:	bf00      	nop
 80037cc:	200001c8 	.word	0x200001c8

080037d0 <__malloc_lock>:
 80037d0:	4801      	ldr	r0, [pc, #4]	@ (80037d8 <__malloc_lock+0x8>)
 80037d2:	f000 bb8e 	b.w	8003ef2 <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	2000030c 	.word	0x2000030c

080037dc <__malloc_unlock>:
 80037dc:	4801      	ldr	r0, [pc, #4]	@ (80037e4 <__malloc_unlock+0x8>)
 80037de:	f000 bb89 	b.w	8003ef4 <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	2000030c 	.word	0x2000030c

080037e8 <std>:
 80037e8:	2300      	movs	r3, #0
 80037ea:	b510      	push	{r4, lr}
 80037ec:	4604      	mov	r4, r0
 80037ee:	e9c0 3300 	strd	r3, r3, [r0]
 80037f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037f6:	6083      	str	r3, [r0, #8]
 80037f8:	8181      	strh	r1, [r0, #12]
 80037fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80037fc:	81c2      	strh	r2, [r0, #14]
 80037fe:	6183      	str	r3, [r0, #24]
 8003800:	4619      	mov	r1, r3
 8003802:	2208      	movs	r2, #8
 8003804:	305c      	adds	r0, #92	@ 0x5c
 8003806:	f000 faeb 	bl	8003de0 <memset>
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <std+0x58>)
 800380c:	6263      	str	r3, [r4, #36]	@ 0x24
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <std+0x5c>)
 8003810:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <std+0x60>)
 8003814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <std+0x64>)
 8003818:	6323      	str	r3, [r4, #48]	@ 0x30
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <std+0x68>)
 800381c:	6224      	str	r4, [r4, #32]
 800381e:	429c      	cmp	r4, r3
 8003820:	d006      	beq.n	8003830 <std+0x48>
 8003822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003826:	4294      	cmp	r4, r2
 8003828:	d002      	beq.n	8003830 <std+0x48>
 800382a:	33d0      	adds	r3, #208	@ 0xd0
 800382c:	429c      	cmp	r4, r3
 800382e:	d105      	bne.n	800383c <std+0x54>
 8003830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003838:	f000 bb5a 	b.w	8003ef0 <__retarget_lock_init_recursive>
 800383c:	bd10      	pop	{r4, pc}
 800383e:	bf00      	nop
 8003840:	08003c2d 	.word	0x08003c2d
 8003844:	08003c53 	.word	0x08003c53
 8003848:	08003c8b 	.word	0x08003c8b
 800384c:	08003caf 	.word	0x08003caf
 8003850:	200001cc 	.word	0x200001cc

08003854 <stdio_exit_handler>:
 8003854:	4a02      	ldr	r2, [pc, #8]	@ (8003860 <stdio_exit_handler+0xc>)
 8003856:	4903      	ldr	r1, [pc, #12]	@ (8003864 <stdio_exit_handler+0x10>)
 8003858:	4803      	ldr	r0, [pc, #12]	@ (8003868 <stdio_exit_handler+0x14>)
 800385a:	f000 b869 	b.w	8003930 <_fwalk_sglue>
 800385e:	bf00      	nop
 8003860:	2000002c 	.word	0x2000002c
 8003864:	08004fe5 	.word	0x08004fe5
 8003868:	2000003c 	.word	0x2000003c

0800386c <cleanup_stdio>:
 800386c:	6841      	ldr	r1, [r0, #4]
 800386e:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <cleanup_stdio+0x34>)
 8003870:	4299      	cmp	r1, r3
 8003872:	b510      	push	{r4, lr}
 8003874:	4604      	mov	r4, r0
 8003876:	d001      	beq.n	800387c <cleanup_stdio+0x10>
 8003878:	f001 fbb4 	bl	8004fe4 <_fflush_r>
 800387c:	68a1      	ldr	r1, [r4, #8]
 800387e:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <cleanup_stdio+0x38>)
 8003880:	4299      	cmp	r1, r3
 8003882:	d002      	beq.n	800388a <cleanup_stdio+0x1e>
 8003884:	4620      	mov	r0, r4
 8003886:	f001 fbad 	bl	8004fe4 <_fflush_r>
 800388a:	68e1      	ldr	r1, [r4, #12]
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <cleanup_stdio+0x3c>)
 800388e:	4299      	cmp	r1, r3
 8003890:	d004      	beq.n	800389c <cleanup_stdio+0x30>
 8003892:	4620      	mov	r0, r4
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f001 bba4 	b.w	8004fe4 <_fflush_r>
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	200001cc 	.word	0x200001cc
 80038a4:	20000234 	.word	0x20000234
 80038a8:	2000029c 	.word	0x2000029c

080038ac <global_stdio_init.part.0>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <global_stdio_init.part.0+0x30>)
 80038b0:	4c0b      	ldr	r4, [pc, #44]	@ (80038e0 <global_stdio_init.part.0+0x34>)
 80038b2:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <global_stdio_init.part.0+0x38>)
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	4620      	mov	r0, r4
 80038b8:	2200      	movs	r2, #0
 80038ba:	2104      	movs	r1, #4
 80038bc:	f7ff ff94 	bl	80037e8 <std>
 80038c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038c4:	2201      	movs	r2, #1
 80038c6:	2109      	movs	r1, #9
 80038c8:	f7ff ff8e 	bl	80037e8 <std>
 80038cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038d0:	2202      	movs	r2, #2
 80038d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d6:	2112      	movs	r1, #18
 80038d8:	f7ff bf86 	b.w	80037e8 <std>
 80038dc:	20000304 	.word	0x20000304
 80038e0:	200001cc 	.word	0x200001cc
 80038e4:	08003855 	.word	0x08003855

080038e8 <__sfp_lock_acquire>:
 80038e8:	4801      	ldr	r0, [pc, #4]	@ (80038f0 <__sfp_lock_acquire+0x8>)
 80038ea:	f000 bb02 	b.w	8003ef2 <__retarget_lock_acquire_recursive>
 80038ee:	bf00      	nop
 80038f0:	2000030d 	.word	0x2000030d

080038f4 <__sfp_lock_release>:
 80038f4:	4801      	ldr	r0, [pc, #4]	@ (80038fc <__sfp_lock_release+0x8>)
 80038f6:	f000 bafd 	b.w	8003ef4 <__retarget_lock_release_recursive>
 80038fa:	bf00      	nop
 80038fc:	2000030d 	.word	0x2000030d

08003900 <__sinit>:
 8003900:	b510      	push	{r4, lr}
 8003902:	4604      	mov	r4, r0
 8003904:	f7ff fff0 	bl	80038e8 <__sfp_lock_acquire>
 8003908:	6a23      	ldr	r3, [r4, #32]
 800390a:	b11b      	cbz	r3, 8003914 <__sinit+0x14>
 800390c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003910:	f7ff bff0 	b.w	80038f4 <__sfp_lock_release>
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__sinit+0x28>)
 8003916:	6223      	str	r3, [r4, #32]
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <__sinit+0x2c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f5      	bne.n	800390c <__sinit+0xc>
 8003920:	f7ff ffc4 	bl	80038ac <global_stdio_init.part.0>
 8003924:	e7f2      	b.n	800390c <__sinit+0xc>
 8003926:	bf00      	nop
 8003928:	0800386d 	.word	0x0800386d
 800392c:	20000304 	.word	0x20000304

08003930 <_fwalk_sglue>:
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	4607      	mov	r7, r0
 8003936:	4688      	mov	r8, r1
 8003938:	4614      	mov	r4, r2
 800393a:	2600      	movs	r6, #0
 800393c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003940:	f1b9 0901 	subs.w	r9, r9, #1
 8003944:	d505      	bpl.n	8003952 <_fwalk_sglue+0x22>
 8003946:	6824      	ldr	r4, [r4, #0]
 8003948:	2c00      	cmp	r4, #0
 800394a:	d1f7      	bne.n	800393c <_fwalk_sglue+0xc>
 800394c:	4630      	mov	r0, r6
 800394e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d907      	bls.n	8003968 <_fwalk_sglue+0x38>
 8003958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800395c:	3301      	adds	r3, #1
 800395e:	d003      	beq.n	8003968 <_fwalk_sglue+0x38>
 8003960:	4629      	mov	r1, r5
 8003962:	4638      	mov	r0, r7
 8003964:	47c0      	blx	r8
 8003966:	4306      	orrs	r6, r0
 8003968:	3568      	adds	r5, #104	@ 0x68
 800396a:	e7e9      	b.n	8003940 <_fwalk_sglue+0x10>

0800396c <iprintf>:
 800396c:	b40f      	push	{r0, r1, r2, r3}
 800396e:	b507      	push	{r0, r1, r2, lr}
 8003970:	4906      	ldr	r1, [pc, #24]	@ (800398c <iprintf+0x20>)
 8003972:	ab04      	add	r3, sp, #16
 8003974:	6808      	ldr	r0, [r1, #0]
 8003976:	f853 2b04 	ldr.w	r2, [r3], #4
 800397a:	6881      	ldr	r1, [r0, #8]
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	f000 fd09 	bl	8004394 <_vfiprintf_r>
 8003982:	b003      	add	sp, #12
 8003984:	f85d eb04 	ldr.w	lr, [sp], #4
 8003988:	b004      	add	sp, #16
 800398a:	4770      	bx	lr
 800398c:	20000038 	.word	0x20000038

08003990 <_puts_r>:
 8003990:	6a03      	ldr	r3, [r0, #32]
 8003992:	b570      	push	{r4, r5, r6, lr}
 8003994:	6884      	ldr	r4, [r0, #8]
 8003996:	4605      	mov	r5, r0
 8003998:	460e      	mov	r6, r1
 800399a:	b90b      	cbnz	r3, 80039a0 <_puts_r+0x10>
 800399c:	f7ff ffb0 	bl	8003900 <__sinit>
 80039a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039a2:	07db      	lsls	r3, r3, #31
 80039a4:	d405      	bmi.n	80039b2 <_puts_r+0x22>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	0598      	lsls	r0, r3, #22
 80039aa:	d402      	bmi.n	80039b2 <_puts_r+0x22>
 80039ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ae:	f000 faa0 	bl	8003ef2 <__retarget_lock_acquire_recursive>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	0719      	lsls	r1, r3, #28
 80039b6:	d502      	bpl.n	80039be <_puts_r+0x2e>
 80039b8:	6923      	ldr	r3, [r4, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d135      	bne.n	8003a2a <_puts_r+0x9a>
 80039be:	4621      	mov	r1, r4
 80039c0:	4628      	mov	r0, r5
 80039c2:	f000 f9b7 	bl	8003d34 <__swsetup_r>
 80039c6:	b380      	cbz	r0, 8003a2a <_puts_r+0x9a>
 80039c8:	f04f 35ff 	mov.w	r5, #4294967295
 80039cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039ce:	07da      	lsls	r2, r3, #31
 80039d0:	d405      	bmi.n	80039de <_puts_r+0x4e>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	059b      	lsls	r3, r3, #22
 80039d6:	d402      	bmi.n	80039de <_puts_r+0x4e>
 80039d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039da:	f000 fa8b 	bl	8003ef4 <__retarget_lock_release_recursive>
 80039de:	4628      	mov	r0, r5
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da04      	bge.n	80039f0 <_puts_r+0x60>
 80039e6:	69a2      	ldr	r2, [r4, #24]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dc17      	bgt.n	8003a1c <_puts_r+0x8c>
 80039ec:	290a      	cmp	r1, #10
 80039ee:	d015      	beq.n	8003a1c <_puts_r+0x8c>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	6022      	str	r2, [r4, #0]
 80039f6:	7019      	strb	r1, [r3, #0]
 80039f8:	68a3      	ldr	r3, [r4, #8]
 80039fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039fe:	3b01      	subs	r3, #1
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	2900      	cmp	r1, #0
 8003a04:	d1ed      	bne.n	80039e2 <_puts_r+0x52>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da11      	bge.n	8003a2e <_puts_r+0x9e>
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	210a      	movs	r1, #10
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f000 f951 	bl	8003cb6 <__swbuf_r>
 8003a14:	3001      	adds	r0, #1
 8003a16:	d0d7      	beq.n	80039c8 <_puts_r+0x38>
 8003a18:	250a      	movs	r5, #10
 8003a1a:	e7d7      	b.n	80039cc <_puts_r+0x3c>
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f000 f949 	bl	8003cb6 <__swbuf_r>
 8003a24:	3001      	adds	r0, #1
 8003a26:	d1e7      	bne.n	80039f8 <_puts_r+0x68>
 8003a28:	e7ce      	b.n	80039c8 <_puts_r+0x38>
 8003a2a:	3e01      	subs	r6, #1
 8003a2c:	e7e4      	b.n	80039f8 <_puts_r+0x68>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	6022      	str	r2, [r4, #0]
 8003a34:	220a      	movs	r2, #10
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e7ee      	b.n	8003a18 <_puts_r+0x88>
	...

08003a3c <puts>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	@ (8003a48 <puts+0xc>)
 8003a3e:	4601      	mov	r1, r0
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f7ff bfa5 	b.w	8003990 <_puts_r>
 8003a46:	bf00      	nop
 8003a48:	20000038 	.word	0x20000038

08003a4c <iscanf>:
 8003a4c:	b40f      	push	{r0, r1, r2, r3}
 8003a4e:	b507      	push	{r0, r1, r2, lr}
 8003a50:	4906      	ldr	r1, [pc, #24]	@ (8003a6c <iscanf+0x20>)
 8003a52:	ab04      	add	r3, sp, #16
 8003a54:	6808      	ldr	r0, [r1, #0]
 8003a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a5a:	6841      	ldr	r1, [r0, #4]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	f001 f8db 	bl	8004c18 <_vfiscanf_r>
 8003a62:	b003      	add	sp, #12
 8003a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a68:	b004      	add	sp, #16
 8003a6a:	4770      	bx	lr
 8003a6c:	20000038 	.word	0x20000038

08003a70 <setvbuf>:
 8003a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a74:	461d      	mov	r5, r3
 8003a76:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <setvbuf+0x164>)
 8003a78:	681f      	ldr	r7, [r3, #0]
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	460e      	mov	r6, r1
 8003a7e:	4690      	mov	r8, r2
 8003a80:	b127      	cbz	r7, 8003a8c <setvbuf+0x1c>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	b913      	cbnz	r3, 8003a8c <setvbuf+0x1c>
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7ff ff3a 	bl	8003900 <__sinit>
 8003a8c:	f1b8 0f02 	cmp.w	r8, #2
 8003a90:	d006      	beq.n	8003aa0 <setvbuf+0x30>
 8003a92:	f1b8 0f01 	cmp.w	r8, #1
 8003a96:	f200 809a 	bhi.w	8003bce <setvbuf+0x15e>
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	f2c0 8097 	blt.w	8003bce <setvbuf+0x15e>
 8003aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003aa2:	07d9      	lsls	r1, r3, #31
 8003aa4:	d405      	bmi.n	8003ab2 <setvbuf+0x42>
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	059a      	lsls	r2, r3, #22
 8003aaa:	d402      	bmi.n	8003ab2 <setvbuf+0x42>
 8003aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aae:	f000 fa20 	bl	8003ef2 <__retarget_lock_acquire_recursive>
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f001 fa95 	bl	8004fe4 <_fflush_r>
 8003aba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003abc:	b141      	cbz	r1, 8003ad0 <setvbuf+0x60>
 8003abe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ac2:	4299      	cmp	r1, r3
 8003ac4:	d002      	beq.n	8003acc <setvbuf+0x5c>
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f000 fa24 	bl	8003f14 <_free_r>
 8003acc:	2300      	movs	r3, #0
 8003ace:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61a3      	str	r3, [r4, #24]
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	d503      	bpl.n	8003ae4 <setvbuf+0x74>
 8003adc:	6921      	ldr	r1, [r4, #16]
 8003ade:	4638      	mov	r0, r7
 8003ae0:	f000 fa18 	bl	8003f14 <_free_r>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	f1b8 0f02 	cmp.w	r8, #2
 8003af2:	81a3      	strh	r3, [r4, #12]
 8003af4:	d061      	beq.n	8003bba <setvbuf+0x14a>
 8003af6:	ab01      	add	r3, sp, #4
 8003af8:	466a      	mov	r2, sp
 8003afa:	4621      	mov	r1, r4
 8003afc:	4638      	mov	r0, r7
 8003afe:	f001 fa99 	bl	8005034 <__swhatbuf_r>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	4318      	orrs	r0, r3
 8003b06:	81a0      	strh	r0, [r4, #12]
 8003b08:	bb2d      	cbnz	r5, 8003b56 <setvbuf+0xe6>
 8003b0a:	9d00      	ldr	r5, [sp, #0]
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f7ff fdad 	bl	800366c <malloc>
 8003b12:	4606      	mov	r6, r0
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d152      	bne.n	8003bbe <setvbuf+0x14e>
 8003b18:	f8dd 9000 	ldr.w	r9, [sp]
 8003b1c:	45a9      	cmp	r9, r5
 8003b1e:	d140      	bne.n	8003ba2 <setvbuf+0x132>
 8003b20:	f04f 35ff 	mov.w	r5, #4294967295
 8003b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b28:	f043 0202 	orr.w	r2, r3, #2
 8003b2c:	81a2      	strh	r2, [r4, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60a2      	str	r2, [r4, #8]
 8003b32:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003b36:	6022      	str	r2, [r4, #0]
 8003b38:	6122      	str	r2, [r4, #16]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	6162      	str	r2, [r4, #20]
 8003b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b40:	07d6      	lsls	r6, r2, #31
 8003b42:	d404      	bmi.n	8003b4e <setvbuf+0xde>
 8003b44:	0598      	lsls	r0, r3, #22
 8003b46:	d402      	bmi.n	8003b4e <setvbuf+0xde>
 8003b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b4a:	f000 f9d3 	bl	8003ef4 <__retarget_lock_release_recursive>
 8003b4e:	4628      	mov	r0, r5
 8003b50:	b003      	add	sp, #12
 8003b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	d0d8      	beq.n	8003b0c <setvbuf+0x9c>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	b913      	cbnz	r3, 8003b64 <setvbuf+0xf4>
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f7ff fece 	bl	8003900 <__sinit>
 8003b64:	f1b8 0f01 	cmp.w	r8, #1
 8003b68:	bf08      	it	eq
 8003b6a:	89a3      	ldrheq	r3, [r4, #12]
 8003b6c:	6026      	str	r6, [r4, #0]
 8003b6e:	bf04      	itt	eq
 8003b70:	f043 0301 	orreq.w	r3, r3, #1
 8003b74:	81a3      	strheq	r3, [r4, #12]
 8003b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7a:	f013 0208 	ands.w	r2, r3, #8
 8003b7e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003b82:	d01e      	beq.n	8003bc2 <setvbuf+0x152>
 8003b84:	07d9      	lsls	r1, r3, #31
 8003b86:	bf41      	itttt	mi
 8003b88:	2200      	movmi	r2, #0
 8003b8a:	426d      	negmi	r5, r5
 8003b8c:	60a2      	strmi	r2, [r4, #8]
 8003b8e:	61a5      	strmi	r5, [r4, #24]
 8003b90:	bf58      	it	pl
 8003b92:	60a5      	strpl	r5, [r4, #8]
 8003b94:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b96:	07d2      	lsls	r2, r2, #31
 8003b98:	d401      	bmi.n	8003b9e <setvbuf+0x12e>
 8003b9a:	059b      	lsls	r3, r3, #22
 8003b9c:	d513      	bpl.n	8003bc6 <setvbuf+0x156>
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	e7d5      	b.n	8003b4e <setvbuf+0xde>
 8003ba2:	4648      	mov	r0, r9
 8003ba4:	f7ff fd62 	bl	800366c <malloc>
 8003ba8:	4606      	mov	r6, r0
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d0b8      	beq.n	8003b20 <setvbuf+0xb0>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	464d      	mov	r5, r9
 8003bb8:	e7cf      	b.n	8003b5a <setvbuf+0xea>
 8003bba:	2500      	movs	r5, #0
 8003bbc:	e7b2      	b.n	8003b24 <setvbuf+0xb4>
 8003bbe:	46a9      	mov	r9, r5
 8003bc0:	e7f5      	b.n	8003bae <setvbuf+0x13e>
 8003bc2:	60a2      	str	r2, [r4, #8]
 8003bc4:	e7e6      	b.n	8003b94 <setvbuf+0x124>
 8003bc6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bc8:	f000 f994 	bl	8003ef4 <__retarget_lock_release_recursive>
 8003bcc:	e7e7      	b.n	8003b9e <setvbuf+0x12e>
 8003bce:	f04f 35ff 	mov.w	r5, #4294967295
 8003bd2:	e7bc      	b.n	8003b4e <setvbuf+0xde>
 8003bd4:	20000038 	.word	0x20000038

08003bd8 <siscanf>:
 8003bd8:	b40e      	push	{r1, r2, r3}
 8003bda:	b530      	push	{r4, r5, lr}
 8003bdc:	b09c      	sub	sp, #112	@ 0x70
 8003bde:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003be0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003be4:	f854 5b04 	ldr.w	r5, [r4], #4
 8003be8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003bec:	9002      	str	r0, [sp, #8]
 8003bee:	9006      	str	r0, [sp, #24]
 8003bf0:	f7fc faf6 	bl	80001e0 <strlen>
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <siscanf+0x4c>)
 8003bf6:	9003      	str	r0, [sp, #12]
 8003bf8:	9007      	str	r0, [sp, #28]
 8003bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bfc:	480a      	ldr	r0, [pc, #40]	@ (8003c28 <siscanf+0x50>)
 8003bfe:	9401      	str	r4, [sp, #4]
 8003c00:	2300      	movs	r3, #0
 8003c02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003c04:	9314      	str	r3, [sp, #80]	@ 0x50
 8003c06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4623      	mov	r3, r4
 8003c12:	a902      	add	r1, sp, #8
 8003c14:	6800      	ldr	r0, [r0, #0]
 8003c16:	f000 fa1f 	bl	8004058 <__ssvfiscanf_r>
 8003c1a:	b01c      	add	sp, #112	@ 0x70
 8003c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c20:	b003      	add	sp, #12
 8003c22:	4770      	bx	lr
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	20000038 	.word	0x20000038

08003c2c <__sread>:
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	460c      	mov	r4, r1
 8003c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c34:	f000 f8fe 	bl	8003e34 <_read_r>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	bfab      	itete	ge
 8003c3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c40:	181b      	addge	r3, r3, r0
 8003c42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c46:	bfac      	ite	ge
 8003c48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c4a:	81a3      	strhlt	r3, [r4, #12]
 8003c4c:	bd10      	pop	{r4, pc}

08003c4e <__seofread>:
 8003c4e:	2000      	movs	r0, #0
 8003c50:	4770      	bx	lr

08003c52 <__swrite>:
 8003c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c56:	461f      	mov	r7, r3
 8003c58:	898b      	ldrh	r3, [r1, #12]
 8003c5a:	05db      	lsls	r3, r3, #23
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	4616      	mov	r6, r2
 8003c62:	d505      	bpl.n	8003c70 <__swrite+0x1e>
 8003c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c68:	2302      	movs	r3, #2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f000 f8d0 	bl	8003e10 <_lseek_r>
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	463b      	mov	r3, r7
 8003c80:	4628      	mov	r0, r5
 8003c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c86:	f000 b8f7 	b.w	8003e78 <_write_r>

08003c8a <__sseek>:
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c92:	f000 f8bd 	bl	8003e10 <_lseek_r>
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	bf15      	itete	ne
 8003c9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ca2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ca6:	81a3      	strheq	r3, [r4, #12]
 8003ca8:	bf18      	it	ne
 8003caa:	81a3      	strhne	r3, [r4, #12]
 8003cac:	bd10      	pop	{r4, pc}

08003cae <__sclose>:
 8003cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb2:	f000 b89d 	b.w	8003df0 <_close_r>

08003cb6 <__swbuf_r>:
 8003cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb8:	460e      	mov	r6, r1
 8003cba:	4614      	mov	r4, r2
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b118      	cbz	r0, 8003cc8 <__swbuf_r+0x12>
 8003cc0:	6a03      	ldr	r3, [r0, #32]
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <__swbuf_r+0x12>
 8003cc4:	f7ff fe1c 	bl	8003900 <__sinit>
 8003cc8:	69a3      	ldr	r3, [r4, #24]
 8003cca:	60a3      	str	r3, [r4, #8]
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	071a      	lsls	r2, r3, #28
 8003cd0:	d501      	bpl.n	8003cd6 <__swbuf_r+0x20>
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	b943      	cbnz	r3, 8003ce8 <__swbuf_r+0x32>
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f000 f82b 	bl	8003d34 <__swsetup_r>
 8003cde:	b118      	cbz	r0, 8003ce8 <__swbuf_r+0x32>
 8003ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	6922      	ldr	r2, [r4, #16]
 8003cec:	1a98      	subs	r0, r3, r2
 8003cee:	6963      	ldr	r3, [r4, #20]
 8003cf0:	b2f6      	uxtb	r6, r6
 8003cf2:	4283      	cmp	r3, r0
 8003cf4:	4637      	mov	r7, r6
 8003cf6:	dc05      	bgt.n	8003d04 <__swbuf_r+0x4e>
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f001 f972 	bl	8004fe4 <_fflush_r>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1ed      	bne.n	8003ce0 <__swbuf_r+0x2a>
 8003d04:	68a3      	ldr	r3, [r4, #8]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	60a3      	str	r3, [r4, #8]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	6022      	str	r2, [r4, #0]
 8003d10:	701e      	strb	r6, [r3, #0]
 8003d12:	6962      	ldr	r2, [r4, #20]
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d004      	beq.n	8003d24 <__swbuf_r+0x6e>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	07db      	lsls	r3, r3, #31
 8003d1e:	d5e1      	bpl.n	8003ce4 <__swbuf_r+0x2e>
 8003d20:	2e0a      	cmp	r6, #10
 8003d22:	d1df      	bne.n	8003ce4 <__swbuf_r+0x2e>
 8003d24:	4621      	mov	r1, r4
 8003d26:	4628      	mov	r0, r5
 8003d28:	f001 f95c 	bl	8004fe4 <_fflush_r>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d0d9      	beq.n	8003ce4 <__swbuf_r+0x2e>
 8003d30:	e7d6      	b.n	8003ce0 <__swbuf_r+0x2a>
	...

08003d34 <__swsetup_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4b29      	ldr	r3, [pc, #164]	@ (8003ddc <__swsetup_r+0xa8>)
 8003d38:	4605      	mov	r5, r0
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	b118      	cbz	r0, 8003d48 <__swsetup_r+0x14>
 8003d40:	6a03      	ldr	r3, [r0, #32]
 8003d42:	b90b      	cbnz	r3, 8003d48 <__swsetup_r+0x14>
 8003d44:	f7ff fddc 	bl	8003900 <__sinit>
 8003d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d4c:	0719      	lsls	r1, r3, #28
 8003d4e:	d422      	bmi.n	8003d96 <__swsetup_r+0x62>
 8003d50:	06da      	lsls	r2, r3, #27
 8003d52:	d407      	bmi.n	8003d64 <__swsetup_r+0x30>
 8003d54:	2209      	movs	r2, #9
 8003d56:	602a      	str	r2, [r5, #0]
 8003d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	e033      	b.n	8003dcc <__swsetup_r+0x98>
 8003d64:	0758      	lsls	r0, r3, #29
 8003d66:	d512      	bpl.n	8003d8e <__swsetup_r+0x5a>
 8003d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d6a:	b141      	cbz	r1, 8003d7e <__swsetup_r+0x4a>
 8003d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d70:	4299      	cmp	r1, r3
 8003d72:	d002      	beq.n	8003d7a <__swsetup_r+0x46>
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 f8cd 	bl	8003f14 <_free_r>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	b94b      	cbnz	r3, 8003dae <__swsetup_r+0x7a>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da4:	d003      	beq.n	8003dae <__swsetup_r+0x7a>
 8003da6:	4621      	mov	r1, r4
 8003da8:	4628      	mov	r0, r5
 8003daa:	f001 f969 	bl	8005080 <__smakebuf_r>
 8003dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db2:	f013 0201 	ands.w	r2, r3, #1
 8003db6:	d00a      	beq.n	8003dce <__swsetup_r+0x9a>
 8003db8:	2200      	movs	r2, #0
 8003dba:	60a2      	str	r2, [r4, #8]
 8003dbc:	6962      	ldr	r2, [r4, #20]
 8003dbe:	4252      	negs	r2, r2
 8003dc0:	61a2      	str	r2, [r4, #24]
 8003dc2:	6922      	ldr	r2, [r4, #16]
 8003dc4:	b942      	cbnz	r2, 8003dd8 <__swsetup_r+0xa4>
 8003dc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dca:	d1c5      	bne.n	8003d58 <__swsetup_r+0x24>
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	0799      	lsls	r1, r3, #30
 8003dd0:	bf58      	it	pl
 8003dd2:	6962      	ldrpl	r2, [r4, #20]
 8003dd4:	60a2      	str	r2, [r4, #8]
 8003dd6:	e7f4      	b.n	8003dc2 <__swsetup_r+0x8e>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	e7f7      	b.n	8003dcc <__swsetup_r+0x98>
 8003ddc:	20000038 	.word	0x20000038

08003de0 <memset>:
 8003de0:	4402      	add	r2, r0
 8003de2:	4603      	mov	r3, r0
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d100      	bne.n	8003dea <memset+0xa>
 8003de8:	4770      	bx	lr
 8003dea:	f803 1b01 	strb.w	r1, [r3], #1
 8003dee:	e7f9      	b.n	8003de4 <memset+0x4>

08003df0 <_close_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d06      	ldr	r5, [pc, #24]	@ (8003e0c <_close_r+0x1c>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	f7fd fa01 	bl	8001202 <_close>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_close_r+0x1a>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_close_r+0x1a>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	20000308 	.word	0x20000308

08003e10 <_lseek_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d07      	ldr	r5, [pc, #28]	@ (8003e30 <_lseek_r+0x20>)
 8003e14:	4604      	mov	r4, r0
 8003e16:	4608      	mov	r0, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	602a      	str	r2, [r5, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7fd fa16 	bl	8001250 <_lseek>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_lseek_r+0x1e>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_lseek_r+0x1e>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	20000308 	.word	0x20000308

08003e34 <_read_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d07      	ldr	r5, [pc, #28]	@ (8003e54 <_read_r+0x20>)
 8003e38:	4604      	mov	r4, r0
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	602a      	str	r2, [r5, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f7fd f9a4 	bl	8001190 <_read>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_read_r+0x1e>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_read_r+0x1e>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20000308 	.word	0x20000308

08003e58 <_sbrk_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4d06      	ldr	r5, [pc, #24]	@ (8003e74 <_sbrk_r+0x1c>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	602b      	str	r3, [r5, #0]
 8003e64:	f7fd fa02 	bl	800126c <_sbrk>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d102      	bne.n	8003e72 <_sbrk_r+0x1a>
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <_sbrk_r+0x1a>
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	20000308 	.word	0x20000308

08003e78 <_write_r>:
 8003e78:	b538      	push	{r3, r4, r5, lr}
 8003e7a:	4d07      	ldr	r5, [pc, #28]	@ (8003e98 <_write_r+0x20>)
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4611      	mov	r1, r2
 8003e82:	2200      	movs	r2, #0
 8003e84:	602a      	str	r2, [r5, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f7fd f99f 	bl	80011ca <_write>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_write_r+0x1e>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_write_r+0x1e>
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	20000308 	.word	0x20000308

08003e9c <__errno>:
 8003e9c:	4b01      	ldr	r3, [pc, #4]	@ (8003ea4 <__errno+0x8>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000038 	.word	0x20000038

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8003ee0 <__libc_init_array+0x38>)
 8003eac:	4c0d      	ldr	r4, [pc, #52]	@ (8003ee4 <__libc_init_array+0x3c>)
 8003eae:	1b64      	subs	r4, r4, r5
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	42a6      	cmp	r6, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ee8 <__libc_init_array+0x40>)
 8003eba:	4c0c      	ldr	r4, [pc, #48]	@ (8003eec <__libc_init_array+0x44>)
 8003ebc:	f001 fbd4 	bl	8005668 <_init>
 8003ec0:	1b64      	subs	r4, r4, r5
 8003ec2:	10a4      	asrs	r4, r4, #2
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	42a6      	cmp	r6, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed0:	4798      	blx	r3
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eda:	4798      	blx	r3
 8003edc:	3601      	adds	r6, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	080059a4 	.word	0x080059a4
 8003ee4:	080059a4 	.word	0x080059a4
 8003ee8:	080059a4 	.word	0x080059a4
 8003eec:	080059a8 	.word	0x080059a8

08003ef0 <__retarget_lock_init_recursive>:
 8003ef0:	4770      	bx	lr

08003ef2 <__retarget_lock_acquire_recursive>:
 8003ef2:	4770      	bx	lr

08003ef4 <__retarget_lock_release_recursive>:
 8003ef4:	4770      	bx	lr

08003ef6 <memcpy>:
 8003ef6:	440a      	add	r2, r1
 8003ef8:	4291      	cmp	r1, r2
 8003efa:	f100 33ff 	add.w	r3, r0, #4294967295
 8003efe:	d100      	bne.n	8003f02 <memcpy+0xc>
 8003f00:	4770      	bx	lr
 8003f02:	b510      	push	{r4, lr}
 8003f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f0c:	4291      	cmp	r1, r2
 8003f0e:	d1f9      	bne.n	8003f04 <memcpy+0xe>
 8003f10:	bd10      	pop	{r4, pc}
	...

08003f14 <_free_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4605      	mov	r5, r0
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d041      	beq.n	8003fa0 <_free_r+0x8c>
 8003f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f20:	1f0c      	subs	r4, r1, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bfb8      	it	lt
 8003f26:	18e4      	addlt	r4, r4, r3
 8003f28:	f7ff fc52 	bl	80037d0 <__malloc_lock>
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <_free_r+0x90>)
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	b933      	cbnz	r3, 8003f40 <_free_r+0x2c>
 8003f32:	6063      	str	r3, [r4, #4]
 8003f34:	6014      	str	r4, [r2, #0]
 8003f36:	4628      	mov	r0, r5
 8003f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f3c:	f7ff bc4e 	b.w	80037dc <__malloc_unlock>
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	d908      	bls.n	8003f56 <_free_r+0x42>
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	1821      	adds	r1, r4, r0
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	bf01      	itttt	eq
 8003f4c:	6819      	ldreq	r1, [r3, #0]
 8003f4e:	685b      	ldreq	r3, [r3, #4]
 8003f50:	1809      	addeq	r1, r1, r0
 8003f52:	6021      	streq	r1, [r4, #0]
 8003f54:	e7ed      	b.n	8003f32 <_free_r+0x1e>
 8003f56:	461a      	mov	r2, r3
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b10b      	cbz	r3, 8003f60 <_free_r+0x4c>
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d9fa      	bls.n	8003f56 <_free_r+0x42>
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	1850      	adds	r0, r2, r1
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d10b      	bne.n	8003f80 <_free_r+0x6c>
 8003f68:	6820      	ldr	r0, [r4, #0]
 8003f6a:	4401      	add	r1, r0
 8003f6c:	1850      	adds	r0, r2, r1
 8003f6e:	4283      	cmp	r3, r0
 8003f70:	6011      	str	r1, [r2, #0]
 8003f72:	d1e0      	bne.n	8003f36 <_free_r+0x22>
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	6053      	str	r3, [r2, #4]
 8003f7a:	4408      	add	r0, r1
 8003f7c:	6010      	str	r0, [r2, #0]
 8003f7e:	e7da      	b.n	8003f36 <_free_r+0x22>
 8003f80:	d902      	bls.n	8003f88 <_free_r+0x74>
 8003f82:	230c      	movs	r3, #12
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	e7d6      	b.n	8003f36 <_free_r+0x22>
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	1821      	adds	r1, r4, r0
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	bf04      	itt	eq
 8003f90:	6819      	ldreq	r1, [r3, #0]
 8003f92:	685b      	ldreq	r3, [r3, #4]
 8003f94:	6063      	str	r3, [r4, #4]
 8003f96:	bf04      	itt	eq
 8003f98:	1809      	addeq	r1, r1, r0
 8003f9a:	6021      	streq	r1, [r4, #0]
 8003f9c:	6054      	str	r4, [r2, #4]
 8003f9e:	e7ca      	b.n	8003f36 <_free_r+0x22>
 8003fa0:	bd38      	pop	{r3, r4, r5, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200001c8 	.word	0x200001c8

08003fa8 <_sungetc_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	1c4b      	adds	r3, r1, #1
 8003fac:	4614      	mov	r4, r2
 8003fae:	d103      	bne.n	8003fb8 <_sungetc_r+0x10>
 8003fb0:	f04f 35ff 	mov.w	r5, #4294967295
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	8993      	ldrh	r3, [r2, #12]
 8003fba:	f023 0320 	bic.w	r3, r3, #32
 8003fbe:	8193      	strh	r3, [r2, #12]
 8003fc0:	6853      	ldr	r3, [r2, #4]
 8003fc2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fc4:	b2cd      	uxtb	r5, r1
 8003fc6:	b18a      	cbz	r2, 8003fec <_sungetc_r+0x44>
 8003fc8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	dd08      	ble.n	8003fe0 <_sungetc_r+0x38>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	6022      	str	r2, [r4, #0]
 8003fd4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	e7e9      	b.n	8003fb4 <_sungetc_r+0xc>
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	f001 f944 	bl	800526e <__submore>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0f1      	beq.n	8003fce <_sungetc_r+0x26>
 8003fea:	e7e1      	b.n	8003fb0 <_sungetc_r+0x8>
 8003fec:	6921      	ldr	r1, [r4, #16]
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	b141      	cbz	r1, 8004004 <_sungetc_r+0x5c>
 8003ff2:	4291      	cmp	r1, r2
 8003ff4:	d206      	bcs.n	8004004 <_sungetc_r+0x5c>
 8003ff6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003ffa:	42a9      	cmp	r1, r5
 8003ffc:	d102      	bne.n	8004004 <_sungetc_r+0x5c>
 8003ffe:	3a01      	subs	r2, #1
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	e7ea      	b.n	8003fda <_sungetc_r+0x32>
 8004004:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800400c:	6363      	str	r3, [r4, #52]	@ 0x34
 800400e:	2303      	movs	r3, #3
 8004010:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004012:	4623      	mov	r3, r4
 8004014:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	2301      	movs	r3, #1
 800401c:	e7de      	b.n	8003fdc <_sungetc_r+0x34>

0800401e <__ssrefill_r>:
 800401e:	b510      	push	{r4, lr}
 8004020:	460c      	mov	r4, r1
 8004022:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004024:	b169      	cbz	r1, 8004042 <__ssrefill_r+0x24>
 8004026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800402a:	4299      	cmp	r1, r3
 800402c:	d001      	beq.n	8004032 <__ssrefill_r+0x14>
 800402e:	f7ff ff71 	bl	8003f14 <_free_r>
 8004032:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004034:	6063      	str	r3, [r4, #4]
 8004036:	2000      	movs	r0, #0
 8004038:	6360      	str	r0, [r4, #52]	@ 0x34
 800403a:	b113      	cbz	r3, 8004042 <__ssrefill_r+0x24>
 800403c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	bd10      	pop	{r4, pc}
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	2300      	movs	r3, #0
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f043 0320 	orr.w	r3, r3, #32
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	f04f 30ff 	mov.w	r0, #4294967295
 8004056:	e7f3      	b.n	8004040 <__ssrefill_r+0x22>

08004058 <__ssvfiscanf_r>:
 8004058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	460c      	mov	r4, r1
 800405e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004062:	2100      	movs	r1, #0
 8004064:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004068:	49a5      	ldr	r1, [pc, #660]	@ (8004300 <__ssvfiscanf_r+0x2a8>)
 800406a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800406c:	f10d 0804 	add.w	r8, sp, #4
 8004070:	49a4      	ldr	r1, [pc, #656]	@ (8004304 <__ssvfiscanf_r+0x2ac>)
 8004072:	4fa5      	ldr	r7, [pc, #660]	@ (8004308 <__ssvfiscanf_r+0x2b0>)
 8004074:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004078:	4606      	mov	r6, r0
 800407a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	7813      	ldrb	r3, [r2, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8158 	beq.w	8004336 <__ssvfiscanf_r+0x2de>
 8004086:	5cf9      	ldrb	r1, [r7, r3]
 8004088:	f011 0108 	ands.w	r1, r1, #8
 800408c:	f102 0501 	add.w	r5, r2, #1
 8004090:	d019      	beq.n	80040c6 <__ssvfiscanf_r+0x6e>
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	dd0f      	ble.n	80040b8 <__ssvfiscanf_r+0x60>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	5cba      	ldrb	r2, [r7, r2]
 800409e:	0712      	lsls	r2, r2, #28
 80040a0:	d401      	bmi.n	80040a6 <__ssvfiscanf_r+0x4e>
 80040a2:	462a      	mov	r2, r5
 80040a4:	e7eb      	b.n	800407e <__ssvfiscanf_r+0x26>
 80040a6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80040a8:	3201      	adds	r2, #1
 80040aa:	9245      	str	r2, [sp, #276]	@ 0x114
 80040ac:	6862      	ldr	r2, [r4, #4]
 80040ae:	3301      	adds	r3, #1
 80040b0:	3a01      	subs	r2, #1
 80040b2:	6062      	str	r2, [r4, #4]
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	e7ec      	b.n	8004092 <__ssvfiscanf_r+0x3a>
 80040b8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80040ba:	4621      	mov	r1, r4
 80040bc:	4630      	mov	r0, r6
 80040be:	4798      	blx	r3
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d0e9      	beq.n	8004098 <__ssvfiscanf_r+0x40>
 80040c4:	e7ed      	b.n	80040a2 <__ssvfiscanf_r+0x4a>
 80040c6:	2b25      	cmp	r3, #37	@ 0x25
 80040c8:	d012      	beq.n	80040f0 <__ssvfiscanf_r+0x98>
 80040ca:	4699      	mov	r9, r3
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f340 8093 	ble.w	80041fa <__ssvfiscanf_r+0x1a2>
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	7813      	ldrb	r3, [r2, #0]
 80040d8:	454b      	cmp	r3, r9
 80040da:	f040 812c 	bne.w	8004336 <__ssvfiscanf_r+0x2de>
 80040de:	6863      	ldr	r3, [r4, #4]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80040e6:	3201      	adds	r2, #1
 80040e8:	3301      	adds	r3, #1
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	9345      	str	r3, [sp, #276]	@ 0x114
 80040ee:	e7d8      	b.n	80040a2 <__ssvfiscanf_r+0x4a>
 80040f0:	9141      	str	r1, [sp, #260]	@ 0x104
 80040f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80040f4:	7853      	ldrb	r3, [r2, #1]
 80040f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040f8:	bf02      	ittt	eq
 80040fa:	2310      	moveq	r3, #16
 80040fc:	1c95      	addeq	r5, r2, #2
 80040fe:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004100:	220a      	movs	r2, #10
 8004102:	46a9      	mov	r9, r5
 8004104:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004108:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800410c:	2b09      	cmp	r3, #9
 800410e:	d91e      	bls.n	800414e <__ssvfiscanf_r+0xf6>
 8004110:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800430c <__ssvfiscanf_r+0x2b4>
 8004114:	2203      	movs	r2, #3
 8004116:	4650      	mov	r0, sl
 8004118:	f7fc f86a 	bl	80001f0 <memchr>
 800411c:	b138      	cbz	r0, 800412e <__ssvfiscanf_r+0xd6>
 800411e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004120:	eba0 000a 	sub.w	r0, r0, sl
 8004124:	2301      	movs	r3, #1
 8004126:	4083      	lsls	r3, r0
 8004128:	4313      	orrs	r3, r2
 800412a:	9341      	str	r3, [sp, #260]	@ 0x104
 800412c:	464d      	mov	r5, r9
 800412e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004132:	2b78      	cmp	r3, #120	@ 0x78
 8004134:	d806      	bhi.n	8004144 <__ssvfiscanf_r+0xec>
 8004136:	2b57      	cmp	r3, #87	@ 0x57
 8004138:	d810      	bhi.n	800415c <__ssvfiscanf_r+0x104>
 800413a:	2b25      	cmp	r3, #37	@ 0x25
 800413c:	d0c5      	beq.n	80040ca <__ssvfiscanf_r+0x72>
 800413e:	d857      	bhi.n	80041f0 <__ssvfiscanf_r+0x198>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d065      	beq.n	8004210 <__ssvfiscanf_r+0x1b8>
 8004144:	2303      	movs	r3, #3
 8004146:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004148:	230a      	movs	r3, #10
 800414a:	9342      	str	r3, [sp, #264]	@ 0x108
 800414c:	e078      	b.n	8004240 <__ssvfiscanf_r+0x1e8>
 800414e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004150:	fb02 1103 	mla	r1, r2, r3, r1
 8004154:	3930      	subs	r1, #48	@ 0x30
 8004156:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004158:	464d      	mov	r5, r9
 800415a:	e7d2      	b.n	8004102 <__ssvfiscanf_r+0xaa>
 800415c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004160:	2a20      	cmp	r2, #32
 8004162:	d8ef      	bhi.n	8004144 <__ssvfiscanf_r+0xec>
 8004164:	a101      	add	r1, pc, #4	@ (adr r1, 800416c <__ssvfiscanf_r+0x114>)
 8004166:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800421f 	.word	0x0800421f
 8004170:	08004145 	.word	0x08004145
 8004174:	08004145 	.word	0x08004145
 8004178:	08004279 	.word	0x08004279
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	08004145 	.word	0x08004145
 800418c:	08004145 	.word	0x08004145
 8004190:	08004145 	.word	0x08004145
 8004194:	08004145 	.word	0x08004145
 8004198:	0800428f 	.word	0x0800428f
 800419c:	08004275 	.word	0x08004275
 80041a0:	080041f7 	.word	0x080041f7
 80041a4:	080041f7 	.word	0x080041f7
 80041a8:	080041f7 	.word	0x080041f7
 80041ac:	08004145 	.word	0x08004145
 80041b0:	08004231 	.word	0x08004231
 80041b4:	08004145 	.word	0x08004145
 80041b8:	08004145 	.word	0x08004145
 80041bc:	08004145 	.word	0x08004145
 80041c0:	08004145 	.word	0x08004145
 80041c4:	0800429f 	.word	0x0800429f
 80041c8:	08004239 	.word	0x08004239
 80041cc:	08004217 	.word	0x08004217
 80041d0:	08004145 	.word	0x08004145
 80041d4:	08004145 	.word	0x08004145
 80041d8:	0800429b 	.word	0x0800429b
 80041dc:	08004145 	.word	0x08004145
 80041e0:	08004275 	.word	0x08004275
 80041e4:	08004145 	.word	0x08004145
 80041e8:	08004145 	.word	0x08004145
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	3b45      	subs	r3, #69	@ 0x45
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d8a6      	bhi.n	8004144 <__ssvfiscanf_r+0xec>
 80041f6:	2305      	movs	r3, #5
 80041f8:	e021      	b.n	800423e <__ssvfiscanf_r+0x1e6>
 80041fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80041fc:	4621      	mov	r1, r4
 80041fe:	4630      	mov	r0, r6
 8004200:	4798      	blx	r3
 8004202:	2800      	cmp	r0, #0
 8004204:	f43f af66 	beq.w	80040d4 <__ssvfiscanf_r+0x7c>
 8004208:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800420a:	2800      	cmp	r0, #0
 800420c:	f040 808b 	bne.w	8004326 <__ssvfiscanf_r+0x2ce>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	e08b      	b.n	800432e <__ssvfiscanf_r+0x2d6>
 8004216:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004218:	f042 0220 	orr.w	r2, r2, #32
 800421c:	9241      	str	r2, [sp, #260]	@ 0x104
 800421e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004224:	9241      	str	r2, [sp, #260]	@ 0x104
 8004226:	2210      	movs	r2, #16
 8004228:	2b6e      	cmp	r3, #110	@ 0x6e
 800422a:	9242      	str	r2, [sp, #264]	@ 0x108
 800422c:	d902      	bls.n	8004234 <__ssvfiscanf_r+0x1dc>
 800422e:	e005      	b.n	800423c <__ssvfiscanf_r+0x1e4>
 8004230:	2300      	movs	r3, #0
 8004232:	9342      	str	r3, [sp, #264]	@ 0x108
 8004234:	2303      	movs	r3, #3
 8004236:	e002      	b.n	800423e <__ssvfiscanf_r+0x1e6>
 8004238:	2308      	movs	r3, #8
 800423a:	9342      	str	r3, [sp, #264]	@ 0x108
 800423c:	2304      	movs	r3, #4
 800423e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004240:	6863      	ldr	r3, [r4, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	dd39      	ble.n	80042ba <__ssvfiscanf_r+0x262>
 8004246:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004248:	0659      	lsls	r1, r3, #25
 800424a:	d404      	bmi.n	8004256 <__ssvfiscanf_r+0x1fe>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	5cba      	ldrb	r2, [r7, r2]
 8004252:	0712      	lsls	r2, r2, #28
 8004254:	d438      	bmi.n	80042c8 <__ssvfiscanf_r+0x270>
 8004256:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004258:	2b02      	cmp	r3, #2
 800425a:	dc47      	bgt.n	80042ec <__ssvfiscanf_r+0x294>
 800425c:	466b      	mov	r3, sp
 800425e:	4622      	mov	r2, r4
 8004260:	a941      	add	r1, sp, #260	@ 0x104
 8004262:	4630      	mov	r0, r6
 8004264:	f000 fcec 	bl	8004c40 <_scanf_chars>
 8004268:	2801      	cmp	r0, #1
 800426a:	d064      	beq.n	8004336 <__ssvfiscanf_r+0x2de>
 800426c:	2802      	cmp	r0, #2
 800426e:	f47f af18 	bne.w	80040a2 <__ssvfiscanf_r+0x4a>
 8004272:	e7c9      	b.n	8004208 <__ssvfiscanf_r+0x1b0>
 8004274:	220a      	movs	r2, #10
 8004276:	e7d7      	b.n	8004228 <__ssvfiscanf_r+0x1d0>
 8004278:	4629      	mov	r1, r5
 800427a:	4640      	mov	r0, r8
 800427c:	f000 ffbe 	bl	80051fc <__sccl>
 8004280:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004286:	9341      	str	r3, [sp, #260]	@ 0x104
 8004288:	4605      	mov	r5, r0
 800428a:	2301      	movs	r3, #1
 800428c:	e7d7      	b.n	800423e <__ssvfiscanf_r+0x1e6>
 800428e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004294:	9341      	str	r3, [sp, #260]	@ 0x104
 8004296:	2300      	movs	r3, #0
 8004298:	e7d1      	b.n	800423e <__ssvfiscanf_r+0x1e6>
 800429a:	2302      	movs	r3, #2
 800429c:	e7cf      	b.n	800423e <__ssvfiscanf_r+0x1e6>
 800429e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80042a0:	06c3      	lsls	r3, r0, #27
 80042a2:	f53f aefe 	bmi.w	80040a2 <__ssvfiscanf_r+0x4a>
 80042a6:	9b00      	ldr	r3, [sp, #0]
 80042a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80042aa:	1d19      	adds	r1, r3, #4
 80042ac:	9100      	str	r1, [sp, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	07c0      	lsls	r0, r0, #31
 80042b2:	bf4c      	ite	mi
 80042b4:	801a      	strhmi	r2, [r3, #0]
 80042b6:	601a      	strpl	r2, [r3, #0]
 80042b8:	e6f3      	b.n	80040a2 <__ssvfiscanf_r+0x4a>
 80042ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80042bc:	4621      	mov	r1, r4
 80042be:	4630      	mov	r0, r6
 80042c0:	4798      	blx	r3
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0bf      	beq.n	8004246 <__ssvfiscanf_r+0x1ee>
 80042c6:	e79f      	b.n	8004208 <__ssvfiscanf_r+0x1b0>
 80042c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80042ca:	3201      	adds	r2, #1
 80042cc:	9245      	str	r2, [sp, #276]	@ 0x114
 80042ce:	6862      	ldr	r2, [r4, #4]
 80042d0:	3a01      	subs	r2, #1
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	6062      	str	r2, [r4, #4]
 80042d6:	dd02      	ble.n	80042de <__ssvfiscanf_r+0x286>
 80042d8:	3301      	adds	r3, #1
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	e7b6      	b.n	800424c <__ssvfiscanf_r+0x1f4>
 80042de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80042e0:	4621      	mov	r1, r4
 80042e2:	4630      	mov	r0, r6
 80042e4:	4798      	blx	r3
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0b0      	beq.n	800424c <__ssvfiscanf_r+0x1f4>
 80042ea:	e78d      	b.n	8004208 <__ssvfiscanf_r+0x1b0>
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	dc0f      	bgt.n	8004310 <__ssvfiscanf_r+0x2b8>
 80042f0:	466b      	mov	r3, sp
 80042f2:	4622      	mov	r2, r4
 80042f4:	a941      	add	r1, sp, #260	@ 0x104
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 fcfc 	bl	8004cf4 <_scanf_i>
 80042fc:	e7b4      	b.n	8004268 <__ssvfiscanf_r+0x210>
 80042fe:	bf00      	nop
 8004300:	08003fa9 	.word	0x08003fa9
 8004304:	0800401f 	.word	0x0800401f
 8004308:	0800589b 	.word	0x0800589b
 800430c:	0800584c 	.word	0x0800584c
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <__ssvfiscanf_r+0x2e4>)
 8004312:	2b00      	cmp	r3, #0
 8004314:	f43f aec5 	beq.w	80040a2 <__ssvfiscanf_r+0x4a>
 8004318:	466b      	mov	r3, sp
 800431a:	4622      	mov	r2, r4
 800431c:	a941      	add	r1, sp, #260	@ 0x104
 800431e:	4630      	mov	r0, r6
 8004320:	f3af 8000 	nop.w
 8004324:	e7a0      	b.n	8004268 <__ssvfiscanf_r+0x210>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	065b      	lsls	r3, r3, #25
 800432a:	f53f af71 	bmi.w	8004210 <__ssvfiscanf_r+0x1b8>
 800432e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004338:	e7f9      	b.n	800432e <__ssvfiscanf_r+0x2d6>
 800433a:	bf00      	nop
 800433c:	00000000 	.word	0x00000000

08004340 <__sfputc_r>:
 8004340:	6893      	ldr	r3, [r2, #8]
 8004342:	3b01      	subs	r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	b410      	push	{r4}
 8004348:	6093      	str	r3, [r2, #8]
 800434a:	da08      	bge.n	800435e <__sfputc_r+0x1e>
 800434c:	6994      	ldr	r4, [r2, #24]
 800434e:	42a3      	cmp	r3, r4
 8004350:	db01      	blt.n	8004356 <__sfputc_r+0x16>
 8004352:	290a      	cmp	r1, #10
 8004354:	d103      	bne.n	800435e <__sfputc_r+0x1e>
 8004356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800435a:	f7ff bcac 	b.w	8003cb6 <__swbuf_r>
 800435e:	6813      	ldr	r3, [r2, #0]
 8004360:	1c58      	adds	r0, r3, #1
 8004362:	6010      	str	r0, [r2, #0]
 8004364:	7019      	strb	r1, [r3, #0]
 8004366:	4608      	mov	r0, r1
 8004368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800436c:	4770      	bx	lr

0800436e <__sfputs_r>:
 800436e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004370:	4606      	mov	r6, r0
 8004372:	460f      	mov	r7, r1
 8004374:	4614      	mov	r4, r2
 8004376:	18d5      	adds	r5, r2, r3
 8004378:	42ac      	cmp	r4, r5
 800437a:	d101      	bne.n	8004380 <__sfputs_r+0x12>
 800437c:	2000      	movs	r0, #0
 800437e:	e007      	b.n	8004390 <__sfputs_r+0x22>
 8004380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004384:	463a      	mov	r2, r7
 8004386:	4630      	mov	r0, r6
 8004388:	f7ff ffda 	bl	8004340 <__sfputc_r>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d1f3      	bne.n	8004378 <__sfputs_r+0xa>
 8004390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004394 <_vfiprintf_r>:
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004398:	460d      	mov	r5, r1
 800439a:	b09d      	sub	sp, #116	@ 0x74
 800439c:	4614      	mov	r4, r2
 800439e:	4698      	mov	r8, r3
 80043a0:	4606      	mov	r6, r0
 80043a2:	b118      	cbz	r0, 80043ac <_vfiprintf_r+0x18>
 80043a4:	6a03      	ldr	r3, [r0, #32]
 80043a6:	b90b      	cbnz	r3, 80043ac <_vfiprintf_r+0x18>
 80043a8:	f7ff faaa 	bl	8003900 <__sinit>
 80043ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ae:	07d9      	lsls	r1, r3, #31
 80043b0:	d405      	bmi.n	80043be <_vfiprintf_r+0x2a>
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	059a      	lsls	r2, r3, #22
 80043b6:	d402      	bmi.n	80043be <_vfiprintf_r+0x2a>
 80043b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ba:	f7ff fd9a 	bl	8003ef2 <__retarget_lock_acquire_recursive>
 80043be:	89ab      	ldrh	r3, [r5, #12]
 80043c0:	071b      	lsls	r3, r3, #28
 80043c2:	d501      	bpl.n	80043c8 <_vfiprintf_r+0x34>
 80043c4:	692b      	ldr	r3, [r5, #16]
 80043c6:	b99b      	cbnz	r3, 80043f0 <_vfiprintf_r+0x5c>
 80043c8:	4629      	mov	r1, r5
 80043ca:	4630      	mov	r0, r6
 80043cc:	f7ff fcb2 	bl	8003d34 <__swsetup_r>
 80043d0:	b170      	cbz	r0, 80043f0 <_vfiprintf_r+0x5c>
 80043d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043d4:	07dc      	lsls	r4, r3, #31
 80043d6:	d504      	bpl.n	80043e2 <_vfiprintf_r+0x4e>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	b01d      	add	sp, #116	@ 0x74
 80043de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e2:	89ab      	ldrh	r3, [r5, #12]
 80043e4:	0598      	lsls	r0, r3, #22
 80043e6:	d4f7      	bmi.n	80043d8 <_vfiprintf_r+0x44>
 80043e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ea:	f7ff fd83 	bl	8003ef4 <__retarget_lock_release_recursive>
 80043ee:	e7f3      	b.n	80043d8 <_vfiprintf_r+0x44>
 80043f0:	2300      	movs	r3, #0
 80043f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043f4:	2320      	movs	r3, #32
 80043f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80043fe:	2330      	movs	r3, #48	@ 0x30
 8004400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045b0 <_vfiprintf_r+0x21c>
 8004404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004408:	f04f 0901 	mov.w	r9, #1
 800440c:	4623      	mov	r3, r4
 800440e:	469a      	mov	sl, r3
 8004410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004414:	b10a      	cbz	r2, 800441a <_vfiprintf_r+0x86>
 8004416:	2a25      	cmp	r2, #37	@ 0x25
 8004418:	d1f9      	bne.n	800440e <_vfiprintf_r+0x7a>
 800441a:	ebba 0b04 	subs.w	fp, sl, r4
 800441e:	d00b      	beq.n	8004438 <_vfiprintf_r+0xa4>
 8004420:	465b      	mov	r3, fp
 8004422:	4622      	mov	r2, r4
 8004424:	4629      	mov	r1, r5
 8004426:	4630      	mov	r0, r6
 8004428:	f7ff ffa1 	bl	800436e <__sfputs_r>
 800442c:	3001      	adds	r0, #1
 800442e:	f000 80a7 	beq.w	8004580 <_vfiprintf_r+0x1ec>
 8004432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004434:	445a      	add	r2, fp
 8004436:	9209      	str	r2, [sp, #36]	@ 0x24
 8004438:	f89a 3000 	ldrb.w	r3, [sl]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 809f 	beq.w	8004580 <_vfiprintf_r+0x1ec>
 8004442:	2300      	movs	r3, #0
 8004444:	f04f 32ff 	mov.w	r2, #4294967295
 8004448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800444c:	f10a 0a01 	add.w	sl, sl, #1
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	9307      	str	r3, [sp, #28]
 8004454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004458:	931a      	str	r3, [sp, #104]	@ 0x68
 800445a:	4654      	mov	r4, sl
 800445c:	2205      	movs	r2, #5
 800445e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004462:	4853      	ldr	r0, [pc, #332]	@ (80045b0 <_vfiprintf_r+0x21c>)
 8004464:	f7fb fec4 	bl	80001f0 <memchr>
 8004468:	9a04      	ldr	r2, [sp, #16]
 800446a:	b9d8      	cbnz	r0, 80044a4 <_vfiprintf_r+0x110>
 800446c:	06d1      	lsls	r1, r2, #27
 800446e:	bf44      	itt	mi
 8004470:	2320      	movmi	r3, #32
 8004472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004476:	0713      	lsls	r3, r2, #28
 8004478:	bf44      	itt	mi
 800447a:	232b      	movmi	r3, #43	@ 0x2b
 800447c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b2a      	cmp	r3, #42	@ 0x2a
 8004486:	d015      	beq.n	80044b4 <_vfiprintf_r+0x120>
 8004488:	9a07      	ldr	r2, [sp, #28]
 800448a:	4654      	mov	r4, sl
 800448c:	2000      	movs	r0, #0
 800448e:	f04f 0c0a 	mov.w	ip, #10
 8004492:	4621      	mov	r1, r4
 8004494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004498:	3b30      	subs	r3, #48	@ 0x30
 800449a:	2b09      	cmp	r3, #9
 800449c:	d94b      	bls.n	8004536 <_vfiprintf_r+0x1a2>
 800449e:	b1b0      	cbz	r0, 80044ce <_vfiprintf_r+0x13a>
 80044a0:	9207      	str	r2, [sp, #28]
 80044a2:	e014      	b.n	80044ce <_vfiprintf_r+0x13a>
 80044a4:	eba0 0308 	sub.w	r3, r0, r8
 80044a8:	fa09 f303 	lsl.w	r3, r9, r3
 80044ac:	4313      	orrs	r3, r2
 80044ae:	9304      	str	r3, [sp, #16]
 80044b0:	46a2      	mov	sl, r4
 80044b2:	e7d2      	b.n	800445a <_vfiprintf_r+0xc6>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	1d19      	adds	r1, r3, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	9103      	str	r1, [sp, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bfbb      	ittet	lt
 80044c0:	425b      	neglt	r3, r3
 80044c2:	f042 0202 	orrlt.w	r2, r2, #2
 80044c6:	9307      	strge	r3, [sp, #28]
 80044c8:	9307      	strlt	r3, [sp, #28]
 80044ca:	bfb8      	it	lt
 80044cc:	9204      	strlt	r2, [sp, #16]
 80044ce:	7823      	ldrb	r3, [r4, #0]
 80044d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80044d2:	d10a      	bne.n	80044ea <_vfiprintf_r+0x156>
 80044d4:	7863      	ldrb	r3, [r4, #1]
 80044d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044d8:	d132      	bne.n	8004540 <_vfiprintf_r+0x1ac>
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	1d1a      	adds	r2, r3, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	9203      	str	r2, [sp, #12]
 80044e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044e6:	3402      	adds	r4, #2
 80044e8:	9305      	str	r3, [sp, #20]
 80044ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045c0 <_vfiprintf_r+0x22c>
 80044ee:	7821      	ldrb	r1, [r4, #0]
 80044f0:	2203      	movs	r2, #3
 80044f2:	4650      	mov	r0, sl
 80044f4:	f7fb fe7c 	bl	80001f0 <memchr>
 80044f8:	b138      	cbz	r0, 800450a <_vfiprintf_r+0x176>
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	eba0 000a 	sub.w	r0, r0, sl
 8004500:	2240      	movs	r2, #64	@ 0x40
 8004502:	4082      	lsls	r2, r0
 8004504:	4313      	orrs	r3, r2
 8004506:	3401      	adds	r4, #1
 8004508:	9304      	str	r3, [sp, #16]
 800450a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450e:	4829      	ldr	r0, [pc, #164]	@ (80045b4 <_vfiprintf_r+0x220>)
 8004510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004514:	2206      	movs	r2, #6
 8004516:	f7fb fe6b 	bl	80001f0 <memchr>
 800451a:	2800      	cmp	r0, #0
 800451c:	d03f      	beq.n	800459e <_vfiprintf_r+0x20a>
 800451e:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <_vfiprintf_r+0x224>)
 8004520:	bb1b      	cbnz	r3, 800456a <_vfiprintf_r+0x1d6>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	3307      	adds	r3, #7
 8004526:	f023 0307 	bic.w	r3, r3, #7
 800452a:	3308      	adds	r3, #8
 800452c:	9303      	str	r3, [sp, #12]
 800452e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004530:	443b      	add	r3, r7
 8004532:	9309      	str	r3, [sp, #36]	@ 0x24
 8004534:	e76a      	b.n	800440c <_vfiprintf_r+0x78>
 8004536:	fb0c 3202 	mla	r2, ip, r2, r3
 800453a:	460c      	mov	r4, r1
 800453c:	2001      	movs	r0, #1
 800453e:	e7a8      	b.n	8004492 <_vfiprintf_r+0xfe>
 8004540:	2300      	movs	r3, #0
 8004542:	3401      	adds	r4, #1
 8004544:	9305      	str	r3, [sp, #20]
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0c0a 	mov.w	ip, #10
 800454c:	4620      	mov	r0, r4
 800454e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004552:	3a30      	subs	r2, #48	@ 0x30
 8004554:	2a09      	cmp	r2, #9
 8004556:	d903      	bls.n	8004560 <_vfiprintf_r+0x1cc>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0c6      	beq.n	80044ea <_vfiprintf_r+0x156>
 800455c:	9105      	str	r1, [sp, #20]
 800455e:	e7c4      	b.n	80044ea <_vfiprintf_r+0x156>
 8004560:	fb0c 2101 	mla	r1, ip, r1, r2
 8004564:	4604      	mov	r4, r0
 8004566:	2301      	movs	r3, #1
 8004568:	e7f0      	b.n	800454c <_vfiprintf_r+0x1b8>
 800456a:	ab03      	add	r3, sp, #12
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	462a      	mov	r2, r5
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <_vfiprintf_r+0x228>)
 8004572:	a904      	add	r1, sp, #16
 8004574:	4630      	mov	r0, r6
 8004576:	f3af 8000 	nop.w
 800457a:	4607      	mov	r7, r0
 800457c:	1c78      	adds	r0, r7, #1
 800457e:	d1d6      	bne.n	800452e <_vfiprintf_r+0x19a>
 8004580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004582:	07d9      	lsls	r1, r3, #31
 8004584:	d405      	bmi.n	8004592 <_vfiprintf_r+0x1fe>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	059a      	lsls	r2, r3, #22
 800458a:	d402      	bmi.n	8004592 <_vfiprintf_r+0x1fe>
 800458c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800458e:	f7ff fcb1 	bl	8003ef4 <__retarget_lock_release_recursive>
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	065b      	lsls	r3, r3, #25
 8004596:	f53f af1f 	bmi.w	80043d8 <_vfiprintf_r+0x44>
 800459a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800459c:	e71e      	b.n	80043dc <_vfiprintf_r+0x48>
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <_vfiprintf_r+0x228>)
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 f879 	bl	80046a0 <_printf_i>
 80045ae:	e7e4      	b.n	800457a <_vfiprintf_r+0x1e6>
 80045b0:	08005850 	.word	0x08005850
 80045b4:	08005856 	.word	0x08005856
 80045b8:	00000000 	.word	0x00000000
 80045bc:	0800436f 	.word	0x0800436f
 80045c0:	0800584c 	.word	0x0800584c

080045c4 <_printf_common>:
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	4616      	mov	r6, r2
 80045ca:	4698      	mov	r8, r3
 80045cc:	688a      	ldr	r2, [r1, #8]
 80045ce:	690b      	ldr	r3, [r1, #16]
 80045d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045d4:	4293      	cmp	r3, r2
 80045d6:	bfb8      	it	lt
 80045d8:	4613      	movlt	r3, r2
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045e0:	4607      	mov	r7, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	b10a      	cbz	r2, 80045ea <_printf_common+0x26>
 80045e6:	3301      	adds	r3, #1
 80045e8:	6033      	str	r3, [r6, #0]
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	0699      	lsls	r1, r3, #26
 80045ee:	bf42      	ittt	mi
 80045f0:	6833      	ldrmi	r3, [r6, #0]
 80045f2:	3302      	addmi	r3, #2
 80045f4:	6033      	strmi	r3, [r6, #0]
 80045f6:	6825      	ldr	r5, [r4, #0]
 80045f8:	f015 0506 	ands.w	r5, r5, #6
 80045fc:	d106      	bne.n	800460c <_printf_common+0x48>
 80045fe:	f104 0a19 	add.w	sl, r4, #25
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	6832      	ldr	r2, [r6, #0]
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	42ab      	cmp	r3, r5
 800460a:	dc26      	bgt.n	800465a <_printf_common+0x96>
 800460c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	3b00      	subs	r3, #0
 8004614:	bf18      	it	ne
 8004616:	2301      	movne	r3, #1
 8004618:	0692      	lsls	r2, r2, #26
 800461a:	d42b      	bmi.n	8004674 <_printf_common+0xb0>
 800461c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004620:	4641      	mov	r1, r8
 8004622:	4638      	mov	r0, r7
 8004624:	47c8      	blx	r9
 8004626:	3001      	adds	r0, #1
 8004628:	d01e      	beq.n	8004668 <_printf_common+0xa4>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	6922      	ldr	r2, [r4, #16]
 800462e:	f003 0306 	and.w	r3, r3, #6
 8004632:	2b04      	cmp	r3, #4
 8004634:	bf02      	ittt	eq
 8004636:	68e5      	ldreq	r5, [r4, #12]
 8004638:	6833      	ldreq	r3, [r6, #0]
 800463a:	1aed      	subeq	r5, r5, r3
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	bf0c      	ite	eq
 8004640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004644:	2500      	movne	r5, #0
 8004646:	4293      	cmp	r3, r2
 8004648:	bfc4      	itt	gt
 800464a:	1a9b      	subgt	r3, r3, r2
 800464c:	18ed      	addgt	r5, r5, r3
 800464e:	2600      	movs	r6, #0
 8004650:	341a      	adds	r4, #26
 8004652:	42b5      	cmp	r5, r6
 8004654:	d11a      	bne.n	800468c <_printf_common+0xc8>
 8004656:	2000      	movs	r0, #0
 8004658:	e008      	b.n	800466c <_printf_common+0xa8>
 800465a:	2301      	movs	r3, #1
 800465c:	4652      	mov	r2, sl
 800465e:	4641      	mov	r1, r8
 8004660:	4638      	mov	r0, r7
 8004662:	47c8      	blx	r9
 8004664:	3001      	adds	r0, #1
 8004666:	d103      	bne.n	8004670 <_printf_common+0xac>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	3501      	adds	r5, #1
 8004672:	e7c6      	b.n	8004602 <_printf_common+0x3e>
 8004674:	18e1      	adds	r1, r4, r3
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	2030      	movs	r0, #48	@ 0x30
 800467a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800467e:	4422      	add	r2, r4
 8004680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004688:	3302      	adds	r3, #2
 800468a:	e7c7      	b.n	800461c <_printf_common+0x58>
 800468c:	2301      	movs	r3, #1
 800468e:	4622      	mov	r2, r4
 8004690:	4641      	mov	r1, r8
 8004692:	4638      	mov	r0, r7
 8004694:	47c8      	blx	r9
 8004696:	3001      	adds	r0, #1
 8004698:	d0e6      	beq.n	8004668 <_printf_common+0xa4>
 800469a:	3601      	adds	r6, #1
 800469c:	e7d9      	b.n	8004652 <_printf_common+0x8e>
	...

080046a0 <_printf_i>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	7e0f      	ldrb	r7, [r1, #24]
 80046a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046a8:	2f78      	cmp	r7, #120	@ 0x78
 80046aa:	4691      	mov	r9, r2
 80046ac:	4680      	mov	r8, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	469a      	mov	sl, r3
 80046b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046b6:	d807      	bhi.n	80046c8 <_printf_i+0x28>
 80046b8:	2f62      	cmp	r7, #98	@ 0x62
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x32>
 80046bc:	2f00      	cmp	r7, #0
 80046be:	f000 80d2 	beq.w	8004866 <_printf_i+0x1c6>
 80046c2:	2f58      	cmp	r7, #88	@ 0x58
 80046c4:	f000 80b9 	beq.w	800483a <_printf_i+0x19a>
 80046c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046d0:	e03a      	b.n	8004748 <_printf_i+0xa8>
 80046d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d8f6      	bhi.n	80046c8 <_printf_i+0x28>
 80046da:	a101      	add	r1, pc, #4	@ (adr r1, 80046e0 <_printf_i+0x40>)
 80046dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080046c9 	.word	0x080046c9
 80046ec:	080046c9 	.word	0x080046c9
 80046f0:	080046c9 	.word	0x080046c9
 80046f4:	080046c9 	.word	0x080046c9
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080046c9 	.word	0x080046c9
 8004700:	080046c9 	.word	0x080046c9
 8004704:	080046c9 	.word	0x080046c9
 8004708:	080046c9 	.word	0x080046c9
 800470c:	0800484d 	.word	0x0800484d
 8004710:	08004777 	.word	0x08004777
 8004714:	08004807 	.word	0x08004807
 8004718:	080046c9 	.word	0x080046c9
 800471c:	080046c9 	.word	0x080046c9
 8004720:	0800486f 	.word	0x0800486f
 8004724:	080046c9 	.word	0x080046c9
 8004728:	08004777 	.word	0x08004777
 800472c:	080046c9 	.word	0x080046c9
 8004730:	080046c9 	.word	0x080046c9
 8004734:	0800480f 	.word	0x0800480f
 8004738:	6833      	ldr	r3, [r6, #0]
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6032      	str	r2, [r6, #0]
 8004740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004748:	2301      	movs	r3, #1
 800474a:	e09d      	b.n	8004888 <_printf_i+0x1e8>
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	6031      	str	r1, [r6, #0]
 8004754:	0606      	lsls	r6, r0, #24
 8004756:	d501      	bpl.n	800475c <_printf_i+0xbc>
 8004758:	681d      	ldr	r5, [r3, #0]
 800475a:	e003      	b.n	8004764 <_printf_i+0xc4>
 800475c:	0645      	lsls	r5, r0, #25
 800475e:	d5fb      	bpl.n	8004758 <_printf_i+0xb8>
 8004760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004764:	2d00      	cmp	r5, #0
 8004766:	da03      	bge.n	8004770 <_printf_i+0xd0>
 8004768:	232d      	movs	r3, #45	@ 0x2d
 800476a:	426d      	negs	r5, r5
 800476c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004770:	4859      	ldr	r0, [pc, #356]	@ (80048d8 <_printf_i+0x238>)
 8004772:	230a      	movs	r3, #10
 8004774:	e011      	b.n	800479a <_printf_i+0xfa>
 8004776:	6821      	ldr	r1, [r4, #0]
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	0608      	lsls	r0, r1, #24
 800477c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004780:	d402      	bmi.n	8004788 <_printf_i+0xe8>
 8004782:	0649      	lsls	r1, r1, #25
 8004784:	bf48      	it	mi
 8004786:	b2ad      	uxthmi	r5, r5
 8004788:	2f6f      	cmp	r7, #111	@ 0x6f
 800478a:	4853      	ldr	r0, [pc, #332]	@ (80048d8 <_printf_i+0x238>)
 800478c:	6033      	str	r3, [r6, #0]
 800478e:	bf14      	ite	ne
 8004790:	230a      	movne	r3, #10
 8004792:	2308      	moveq	r3, #8
 8004794:	2100      	movs	r1, #0
 8004796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800479a:	6866      	ldr	r6, [r4, #4]
 800479c:	60a6      	str	r6, [r4, #8]
 800479e:	2e00      	cmp	r6, #0
 80047a0:	bfa2      	ittt	ge
 80047a2:	6821      	ldrge	r1, [r4, #0]
 80047a4:	f021 0104 	bicge.w	r1, r1, #4
 80047a8:	6021      	strge	r1, [r4, #0]
 80047aa:	b90d      	cbnz	r5, 80047b0 <_printf_i+0x110>
 80047ac:	2e00      	cmp	r6, #0
 80047ae:	d04b      	beq.n	8004848 <_printf_i+0x1a8>
 80047b0:	4616      	mov	r6, r2
 80047b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b6:	fb03 5711 	mls	r7, r3, r1, r5
 80047ba:	5dc7      	ldrb	r7, [r0, r7]
 80047bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047c0:	462f      	mov	r7, r5
 80047c2:	42bb      	cmp	r3, r7
 80047c4:	460d      	mov	r5, r1
 80047c6:	d9f4      	bls.n	80047b2 <_printf_i+0x112>
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d10b      	bne.n	80047e4 <_printf_i+0x144>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	07df      	lsls	r7, r3, #31
 80047d0:	d508      	bpl.n	80047e4 <_printf_i+0x144>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	6861      	ldr	r1, [r4, #4]
 80047d6:	4299      	cmp	r1, r3
 80047d8:	bfde      	ittt	le
 80047da:	2330      	movle	r3, #48	@ 0x30
 80047dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e4:	1b92      	subs	r2, r2, r6
 80047e6:	6122      	str	r2, [r4, #16]
 80047e8:	f8cd a000 	str.w	sl, [sp]
 80047ec:	464b      	mov	r3, r9
 80047ee:	aa03      	add	r2, sp, #12
 80047f0:	4621      	mov	r1, r4
 80047f2:	4640      	mov	r0, r8
 80047f4:	f7ff fee6 	bl	80045c4 <_printf_common>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d14a      	bne.n	8004892 <_printf_i+0x1f2>
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	b004      	add	sp, #16
 8004802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f043 0320 	orr.w	r3, r3, #32
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	4833      	ldr	r0, [pc, #204]	@ (80048dc <_printf_i+0x23c>)
 8004810:	2778      	movs	r7, #120	@ 0x78
 8004812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	6831      	ldr	r1, [r6, #0]
 800481a:	061f      	lsls	r7, r3, #24
 800481c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004820:	d402      	bmi.n	8004828 <_printf_i+0x188>
 8004822:	065f      	lsls	r7, r3, #25
 8004824:	bf48      	it	mi
 8004826:	b2ad      	uxthmi	r5, r5
 8004828:	6031      	str	r1, [r6, #0]
 800482a:	07d9      	lsls	r1, r3, #31
 800482c:	bf44      	itt	mi
 800482e:	f043 0320 	orrmi.w	r3, r3, #32
 8004832:	6023      	strmi	r3, [r4, #0]
 8004834:	b11d      	cbz	r5, 800483e <_printf_i+0x19e>
 8004836:	2310      	movs	r3, #16
 8004838:	e7ac      	b.n	8004794 <_printf_i+0xf4>
 800483a:	4827      	ldr	r0, [pc, #156]	@ (80048d8 <_printf_i+0x238>)
 800483c:	e7e9      	b.n	8004812 <_printf_i+0x172>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	f023 0320 	bic.w	r3, r3, #32
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	e7f6      	b.n	8004836 <_printf_i+0x196>
 8004848:	4616      	mov	r6, r2
 800484a:	e7bd      	b.n	80047c8 <_printf_i+0x128>
 800484c:	6833      	ldr	r3, [r6, #0]
 800484e:	6825      	ldr	r5, [r4, #0]
 8004850:	6961      	ldr	r1, [r4, #20]
 8004852:	1d18      	adds	r0, r3, #4
 8004854:	6030      	str	r0, [r6, #0]
 8004856:	062e      	lsls	r6, r5, #24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	d501      	bpl.n	8004860 <_printf_i+0x1c0>
 800485c:	6019      	str	r1, [r3, #0]
 800485e:	e002      	b.n	8004866 <_printf_i+0x1c6>
 8004860:	0668      	lsls	r0, r5, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0x1bc>
 8004864:	8019      	strh	r1, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	4616      	mov	r6, r2
 800486c:	e7bc      	b.n	80047e8 <_printf_i+0x148>
 800486e:	6833      	ldr	r3, [r6, #0]
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	6032      	str	r2, [r6, #0]
 8004874:	681e      	ldr	r6, [r3, #0]
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	2100      	movs	r1, #0
 800487a:	4630      	mov	r0, r6
 800487c:	f7fb fcb8 	bl	80001f0 <memchr>
 8004880:	b108      	cbz	r0, 8004886 <_printf_i+0x1e6>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	6060      	str	r0, [r4, #4]
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	2300      	movs	r3, #0
 800488c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004890:	e7aa      	b.n	80047e8 <_printf_i+0x148>
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	4632      	mov	r2, r6
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	47d0      	blx	sl
 800489c:	3001      	adds	r0, #1
 800489e:	d0ad      	beq.n	80047fc <_printf_i+0x15c>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	079b      	lsls	r3, r3, #30
 80048a4:	d413      	bmi.n	80048ce <_printf_i+0x22e>
 80048a6:	68e0      	ldr	r0, [r4, #12]
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	4298      	cmp	r0, r3
 80048ac:	bfb8      	it	lt
 80048ae:	4618      	movlt	r0, r3
 80048b0:	e7a6      	b.n	8004800 <_printf_i+0x160>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4632      	mov	r2, r6
 80048b6:	4649      	mov	r1, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	47d0      	blx	sl
 80048bc:	3001      	adds	r0, #1
 80048be:	d09d      	beq.n	80047fc <_printf_i+0x15c>
 80048c0:	3501      	adds	r5, #1
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	9903      	ldr	r1, [sp, #12]
 80048c6:	1a5b      	subs	r3, r3, r1
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dcf2      	bgt.n	80048b2 <_printf_i+0x212>
 80048cc:	e7eb      	b.n	80048a6 <_printf_i+0x206>
 80048ce:	2500      	movs	r5, #0
 80048d0:	f104 0619 	add.w	r6, r4, #25
 80048d4:	e7f5      	b.n	80048c2 <_printf_i+0x222>
 80048d6:	bf00      	nop
 80048d8:	0800585d 	.word	0x0800585d
 80048dc:	0800586e 	.word	0x0800586e

080048e0 <__svfiscanf_r>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	461d      	mov	r5, r3
 80048e6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80048e8:	07df      	lsls	r7, r3, #31
 80048ea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80048ee:	4606      	mov	r6, r0
 80048f0:	460c      	mov	r4, r1
 80048f2:	4691      	mov	r9, r2
 80048f4:	d405      	bmi.n	8004902 <__svfiscanf_r+0x22>
 80048f6:	898b      	ldrh	r3, [r1, #12]
 80048f8:	0598      	lsls	r0, r3, #22
 80048fa:	d402      	bmi.n	8004902 <__svfiscanf_r+0x22>
 80048fc:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80048fe:	f7ff faf8 	bl	8003ef2 <__retarget_lock_acquire_recursive>
 8004902:	2300      	movs	r3, #0
 8004904:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8004908:	4ba7      	ldr	r3, [pc, #668]	@ (8004ba8 <__svfiscanf_r+0x2c8>)
 800490a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800490c:	f10d 0804 	add.w	r8, sp, #4
 8004910:	4ba6      	ldr	r3, [pc, #664]	@ (8004bac <__svfiscanf_r+0x2cc>)
 8004912:	4fa7      	ldr	r7, [pc, #668]	@ (8004bb0 <__svfiscanf_r+0x2d0>)
 8004914:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004918:	93a1      	str	r3, [sp, #644]	@ 0x284
 800491a:	9500      	str	r5, [sp, #0]
 800491c:	f899 3000 	ldrb.w	r3, [r9]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 816c 	beq.w	8004bfe <__svfiscanf_r+0x31e>
 8004926:	5cf9      	ldrb	r1, [r7, r3]
 8004928:	f011 0108 	ands.w	r1, r1, #8
 800492c:	f109 0501 	add.w	r5, r9, #1
 8004930:	d019      	beq.n	8004966 <__svfiscanf_r+0x86>
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dd0f      	ble.n	8004958 <__svfiscanf_r+0x78>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	5cba      	ldrb	r2, [r7, r2]
 800493e:	0711      	lsls	r1, r2, #28
 8004940:	d401      	bmi.n	8004946 <__svfiscanf_r+0x66>
 8004942:	46a9      	mov	r9, r5
 8004944:	e7ea      	b.n	800491c <__svfiscanf_r+0x3c>
 8004946:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004948:	3201      	adds	r2, #1
 800494a:	9245      	str	r2, [sp, #276]	@ 0x114
 800494c:	6862      	ldr	r2, [r4, #4]
 800494e:	3301      	adds	r3, #1
 8004950:	3a01      	subs	r2, #1
 8004952:	6062      	str	r2, [r4, #4]
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	e7ec      	b.n	8004932 <__svfiscanf_r+0x52>
 8004958:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800495a:	4621      	mov	r1, r4
 800495c:	4630      	mov	r0, r6
 800495e:	4798      	blx	r3
 8004960:	2800      	cmp	r0, #0
 8004962:	d0e9      	beq.n	8004938 <__svfiscanf_r+0x58>
 8004964:	e7ed      	b.n	8004942 <__svfiscanf_r+0x62>
 8004966:	2b25      	cmp	r3, #37	@ 0x25
 8004968:	d012      	beq.n	8004990 <__svfiscanf_r+0xb0>
 800496a:	4699      	mov	r9, r3
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f340 8095 	ble.w	8004a9e <__svfiscanf_r+0x1be>
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	7813      	ldrb	r3, [r2, #0]
 8004978:	454b      	cmp	r3, r9
 800497a:	f040 8140 	bne.w	8004bfe <__svfiscanf_r+0x31e>
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004986:	3201      	adds	r2, #1
 8004988:	3301      	adds	r3, #1
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	9345      	str	r3, [sp, #276]	@ 0x114
 800498e:	e7d8      	b.n	8004942 <__svfiscanf_r+0x62>
 8004990:	9141      	str	r1, [sp, #260]	@ 0x104
 8004992:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004994:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004998:	2b2a      	cmp	r3, #42	@ 0x2a
 800499a:	bf02      	ittt	eq
 800499c:	2310      	moveq	r3, #16
 800499e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80049a0:	f109 0502 	addeq.w	r5, r9, #2
 80049a4:	220a      	movs	r2, #10
 80049a6:	46a9      	mov	r9, r5
 80049a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80049ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	d91f      	bls.n	80049f4 <__svfiscanf_r+0x114>
 80049b4:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8004bb4 <__svfiscanf_r+0x2d4>
 80049b8:	2203      	movs	r2, #3
 80049ba:	4650      	mov	r0, sl
 80049bc:	f7fb fc18 	bl	80001f0 <memchr>
 80049c0:	b138      	cbz	r0, 80049d2 <__svfiscanf_r+0xf2>
 80049c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80049c4:	eba0 000a 	sub.w	r0, r0, sl
 80049c8:	2301      	movs	r3, #1
 80049ca:	4083      	lsls	r3, r0
 80049cc:	4313      	orrs	r3, r2
 80049ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80049d0:	464d      	mov	r5, r9
 80049d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049d6:	2b78      	cmp	r3, #120	@ 0x78
 80049d8:	d807      	bhi.n	80049ea <__svfiscanf_r+0x10a>
 80049da:	2b57      	cmp	r3, #87	@ 0x57
 80049dc:	d811      	bhi.n	8004a02 <__svfiscanf_r+0x122>
 80049de:	2b25      	cmp	r3, #37	@ 0x25
 80049e0:	d0c3      	beq.n	800496a <__svfiscanf_r+0x8a>
 80049e2:	d857      	bhi.n	8004a94 <__svfiscanf_r+0x1b4>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80c1 	beq.w	8004b6c <__svfiscanf_r+0x28c>
 80049ea:	2303      	movs	r3, #3
 80049ec:	9347      	str	r3, [sp, #284]	@ 0x11c
 80049ee:	230a      	movs	r3, #10
 80049f0:	9342      	str	r3, [sp, #264]	@ 0x108
 80049f2:	e07e      	b.n	8004af2 <__svfiscanf_r+0x212>
 80049f4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80049f6:	fb02 1103 	mla	r1, r2, r3, r1
 80049fa:	3930      	subs	r1, #48	@ 0x30
 80049fc:	9143      	str	r1, [sp, #268]	@ 0x10c
 80049fe:	464d      	mov	r5, r9
 8004a00:	e7d1      	b.n	80049a6 <__svfiscanf_r+0xc6>
 8004a02:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004a06:	2a20      	cmp	r2, #32
 8004a08:	d8ef      	bhi.n	80049ea <__svfiscanf_r+0x10a>
 8004a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a10 <__svfiscanf_r+0x130>)
 8004a0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a10:	08004ad1 	.word	0x08004ad1
 8004a14:	080049eb 	.word	0x080049eb
 8004a18:	080049eb 	.word	0x080049eb
 8004a1c:	08004b2b 	.word	0x08004b2b
 8004a20:	080049eb 	.word	0x080049eb
 8004a24:	080049eb 	.word	0x080049eb
 8004a28:	080049eb 	.word	0x080049eb
 8004a2c:	080049eb 	.word	0x080049eb
 8004a30:	080049eb 	.word	0x080049eb
 8004a34:	080049eb 	.word	0x080049eb
 8004a38:	080049eb 	.word	0x080049eb
 8004a3c:	08004b41 	.word	0x08004b41
 8004a40:	08004b27 	.word	0x08004b27
 8004a44:	08004a9b 	.word	0x08004a9b
 8004a48:	08004a9b 	.word	0x08004a9b
 8004a4c:	08004a9b 	.word	0x08004a9b
 8004a50:	080049eb 	.word	0x080049eb
 8004a54:	08004ae3 	.word	0x08004ae3
 8004a58:	080049eb 	.word	0x080049eb
 8004a5c:	080049eb 	.word	0x080049eb
 8004a60:	080049eb 	.word	0x080049eb
 8004a64:	080049eb 	.word	0x080049eb
 8004a68:	08004b51 	.word	0x08004b51
 8004a6c:	08004aeb 	.word	0x08004aeb
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	080049eb 	.word	0x080049eb
 8004a78:	080049eb 	.word	0x080049eb
 8004a7c:	08004b4d 	.word	0x08004b4d
 8004a80:	080049eb 	.word	0x080049eb
 8004a84:	08004b27 	.word	0x08004b27
 8004a88:	080049eb 	.word	0x080049eb
 8004a8c:	080049eb 	.word	0x080049eb
 8004a90:	08004ad1 	.word	0x08004ad1
 8004a94:	3b45      	subs	r3, #69	@ 0x45
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d8a7      	bhi.n	80049ea <__svfiscanf_r+0x10a>
 8004a9a:	2305      	movs	r3, #5
 8004a9c:	e028      	b.n	8004af0 <__svfiscanf_r+0x210>
 8004a9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4798      	blx	r3
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f43f af64 	beq.w	8004974 <__svfiscanf_r+0x94>
 8004aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aae:	07da      	lsls	r2, r3, #31
 8004ab0:	f140 809d 	bpl.w	8004bee <__svfiscanf_r+0x30e>
 8004ab4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d061      	beq.n	8004b7e <__svfiscanf_r+0x29e>
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	0659      	lsls	r1, r3, #25
 8004abe:	d45e      	bmi.n	8004b7e <__svfiscanf_r+0x29e>
 8004ac0:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004aca:	f042 0220 	orr.w	r2, r2, #32
 8004ace:	9241      	str	r2, [sp, #260]	@ 0x104
 8004ad0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad6:	9241      	str	r2, [sp, #260]	@ 0x104
 8004ad8:	2210      	movs	r2, #16
 8004ada:	2b6e      	cmp	r3, #110	@ 0x6e
 8004adc:	9242      	str	r2, [sp, #264]	@ 0x108
 8004ade:	d902      	bls.n	8004ae6 <__svfiscanf_r+0x206>
 8004ae0:	e005      	b.n	8004aee <__svfiscanf_r+0x20e>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9342      	str	r3, [sp, #264]	@ 0x108
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e002      	b.n	8004af0 <__svfiscanf_r+0x210>
 8004aea:	2308      	movs	r3, #8
 8004aec:	9342      	str	r3, [sp, #264]	@ 0x108
 8004aee:	2304      	movs	r3, #4
 8004af0:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dd45      	ble.n	8004b84 <__svfiscanf_r+0x2a4>
 8004af8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004afa:	0659      	lsls	r1, r3, #25
 8004afc:	d404      	bmi.n	8004b08 <__svfiscanf_r+0x228>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	781a      	ldrb	r2, [r3, #0]
 8004b02:	5cba      	ldrb	r2, [r7, r2]
 8004b04:	0712      	lsls	r2, r2, #28
 8004b06:	d444      	bmi.n	8004b92 <__svfiscanf_r+0x2b2>
 8004b08:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	dc5b      	bgt.n	8004bc6 <__svfiscanf_r+0x2e6>
 8004b0e:	466b      	mov	r3, sp
 8004b10:	4622      	mov	r2, r4
 8004b12:	a941      	add	r1, sp, #260	@ 0x104
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 f893 	bl	8004c40 <_scanf_chars>
 8004b1a:	2801      	cmp	r0, #1
 8004b1c:	d06f      	beq.n	8004bfe <__svfiscanf_r+0x31e>
 8004b1e:	2802      	cmp	r0, #2
 8004b20:	f47f af0f 	bne.w	8004942 <__svfiscanf_r+0x62>
 8004b24:	e7c2      	b.n	8004aac <__svfiscanf_r+0x1cc>
 8004b26:	220a      	movs	r2, #10
 8004b28:	e7d7      	b.n	8004ada <__svfiscanf_r+0x1fa>
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	f000 fb65 	bl	80051fc <__sccl>
 8004b32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b38:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e7d7      	b.n	8004af0 <__svfiscanf_r+0x210>
 8004b40:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b46:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e7d1      	b.n	8004af0 <__svfiscanf_r+0x210>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e7cf      	b.n	8004af0 <__svfiscanf_r+0x210>
 8004b50:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004b52:	06c3      	lsls	r3, r0, #27
 8004b54:	f53f aef5 	bmi.w	8004942 <__svfiscanf_r+0x62>
 8004b58:	9b00      	ldr	r3, [sp, #0]
 8004b5a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	9100      	str	r1, [sp, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	07c0      	lsls	r0, r0, #31
 8004b64:	bf4c      	ite	mi
 8004b66:	801a      	strhmi	r2, [r3, #0]
 8004b68:	601a      	strpl	r2, [r3, #0]
 8004b6a:	e6ea      	b.n	8004942 <__svfiscanf_r+0x62>
 8004b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b6e:	07de      	lsls	r6, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <__svfiscanf_r+0x29e>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	059d      	lsls	r5, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <__svfiscanf_r+0x29e>
 8004b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b7a:	f7ff f9bb 	bl	8003ef4 <__retarget_lock_release_recursive>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	e79d      	b.n	8004ac0 <__svfiscanf_r+0x1e0>
 8004b84:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b86:	4621      	mov	r1, r4
 8004b88:	4630      	mov	r0, r6
 8004b8a:	4798      	blx	r3
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d0b3      	beq.n	8004af8 <__svfiscanf_r+0x218>
 8004b90:	e78c      	b.n	8004aac <__svfiscanf_r+0x1cc>
 8004b92:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b94:	3201      	adds	r2, #1
 8004b96:	9245      	str	r2, [sp, #276]	@ 0x114
 8004b98:	6862      	ldr	r2, [r4, #4]
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	6062      	str	r2, [r4, #4]
 8004ba0:	dd0a      	ble.n	8004bb8 <__svfiscanf_r+0x2d8>
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	e7aa      	b.n	8004afe <__svfiscanf_r+0x21e>
 8004ba8:	080052e3 	.word	0x080052e3
 8004bac:	08005115 	.word	0x08005115
 8004bb0:	0800589b 	.word	0x0800589b
 8004bb4:	0800584c 	.word	0x0800584c
 8004bb8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4798      	blx	r3
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d09c      	beq.n	8004afe <__svfiscanf_r+0x21e>
 8004bc4:	e772      	b.n	8004aac <__svfiscanf_r+0x1cc>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	dc06      	bgt.n	8004bd8 <__svfiscanf_r+0x2f8>
 8004bca:	466b      	mov	r3, sp
 8004bcc:	4622      	mov	r2, r4
 8004bce:	a941      	add	r1, sp, #260	@ 0x104
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f88f 	bl	8004cf4 <_scanf_i>
 8004bd6:	e7a0      	b.n	8004b1a <__svfiscanf_r+0x23a>
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <__svfiscanf_r+0x334>)
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f43f aeb1 	beq.w	8004942 <__svfiscanf_r+0x62>
 8004be0:	466b      	mov	r3, sp
 8004be2:	4622      	mov	r2, r4
 8004be4:	a941      	add	r1, sp, #260	@ 0x104
 8004be6:	4630      	mov	r0, r6
 8004be8:	f3af 8000 	nop.w
 8004bec:	e795      	b.n	8004b1a <__svfiscanf_r+0x23a>
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	0598      	lsls	r0, r3, #22
 8004bf2:	f53f af5f 	bmi.w	8004ab4 <__svfiscanf_r+0x1d4>
 8004bf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bf8:	f7ff f97c 	bl	8003ef4 <__retarget_lock_release_recursive>
 8004bfc:	e75a      	b.n	8004ab4 <__svfiscanf_r+0x1d4>
 8004bfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c00:	07da      	lsls	r2, r3, #31
 8004c02:	d405      	bmi.n	8004c10 <__svfiscanf_r+0x330>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	059b      	lsls	r3, r3, #22
 8004c08:	d402      	bmi.n	8004c10 <__svfiscanf_r+0x330>
 8004c0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c0c:	f7ff f972 	bl	8003ef4 <__retarget_lock_release_recursive>
 8004c10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004c12:	e755      	b.n	8004ac0 <__svfiscanf_r+0x1e0>
 8004c14:	00000000 	.word	0x00000000

08004c18 <_vfiscanf_r>:
 8004c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	4616      	mov	r6, r2
 8004c20:	461f      	mov	r7, r3
 8004c22:	4604      	mov	r4, r0
 8004c24:	b118      	cbz	r0, 8004c2e <_vfiscanf_r+0x16>
 8004c26:	6a03      	ldr	r3, [r0, #32]
 8004c28:	b90b      	cbnz	r3, 8004c2e <_vfiscanf_r+0x16>
 8004c2a:	f7fe fe69 	bl	8003900 <__sinit>
 8004c2e:	463b      	mov	r3, r7
 8004c30:	4632      	mov	r2, r6
 8004c32:	4629      	mov	r1, r5
 8004c34:	4620      	mov	r0, r4
 8004c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	f7ff be51 	b.w	80048e0 <__svfiscanf_r>
	...

08004c40 <_scanf_chars>:
 8004c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c44:	4615      	mov	r5, r2
 8004c46:	688a      	ldr	r2, [r1, #8]
 8004c48:	4680      	mov	r8, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	b932      	cbnz	r2, 8004c5c <_scanf_chars+0x1c>
 8004c4e:	698a      	ldr	r2, [r1, #24]
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	bf14      	ite	ne
 8004c54:	f04f 32ff 	movne.w	r2, #4294967295
 8004c58:	2201      	moveq	r2, #1
 8004c5a:	608a      	str	r2, [r1, #8]
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004cf0 <_scanf_chars+0xb0>
 8004c62:	06d1      	lsls	r1, r2, #27
 8004c64:	bf5f      	itttt	pl
 8004c66:	681a      	ldrpl	r2, [r3, #0]
 8004c68:	1d11      	addpl	r1, r2, #4
 8004c6a:	6019      	strpl	r1, [r3, #0]
 8004c6c:	6816      	ldrpl	r6, [r2, #0]
 8004c6e:	2700      	movs	r7, #0
 8004c70:	69a0      	ldr	r0, [r4, #24]
 8004c72:	b188      	cbz	r0, 8004c98 <_scanf_chars+0x58>
 8004c74:	2801      	cmp	r0, #1
 8004c76:	d107      	bne.n	8004c88 <_scanf_chars+0x48>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	6963      	ldr	r3, [r4, #20]
 8004c7e:	5c9b      	ldrb	r3, [r3, r2]
 8004c80:	b953      	cbnz	r3, 8004c98 <_scanf_chars+0x58>
 8004c82:	2f00      	cmp	r7, #0
 8004c84:	d031      	beq.n	8004cea <_scanf_chars+0xaa>
 8004c86:	e022      	b.n	8004cce <_scanf_chars+0x8e>
 8004c88:	2802      	cmp	r0, #2
 8004c8a:	d120      	bne.n	8004cce <_scanf_chars+0x8e>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	d41a      	bmi.n	8004cce <_scanf_chars+0x8e>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	06da      	lsls	r2, r3, #27
 8004c9c:	bf5e      	ittt	pl
 8004c9e:	682b      	ldrpl	r3, [r5, #0]
 8004ca0:	781b      	ldrbpl	r3, [r3, #0]
 8004ca2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004ca6:	682a      	ldr	r2, [r5, #0]
 8004ca8:	686b      	ldr	r3, [r5, #4]
 8004caa:	3201      	adds	r2, #1
 8004cac:	602a      	str	r2, [r5, #0]
 8004cae:	68a2      	ldr	r2, [r4, #8]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	3a01      	subs	r2, #1
 8004cb4:	606b      	str	r3, [r5, #4]
 8004cb6:	3701      	adds	r7, #1
 8004cb8:	60a2      	str	r2, [r4, #8]
 8004cba:	b142      	cbz	r2, 8004cce <_scanf_chars+0x8e>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dcd7      	bgt.n	8004c70 <_scanf_chars+0x30>
 8004cc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	4798      	blx	r3
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d0d0      	beq.n	8004c70 <_scanf_chars+0x30>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f013 0310 	ands.w	r3, r3, #16
 8004cd4:	d105      	bne.n	8004ce2 <_scanf_chars+0xa2>
 8004cd6:	68e2      	ldr	r2, [r4, #12]
 8004cd8:	3201      	adds	r2, #1
 8004cda:	60e2      	str	r2, [r4, #12]
 8004cdc:	69a2      	ldr	r2, [r4, #24]
 8004cde:	b102      	cbz	r2, 8004ce2 <_scanf_chars+0xa2>
 8004ce0:	7033      	strb	r3, [r6, #0]
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	443b      	add	r3, r7
 8004ce6:	6123      	str	r3, [r4, #16]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	bf00      	nop
 8004cf0:	0800589b 	.word	0x0800589b

08004cf4 <_scanf_i>:
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	4b74      	ldr	r3, [pc, #464]	@ (8004ecc <_scanf_i+0x1d8>)
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	4682      	mov	sl, r0
 8004d00:	4616      	mov	r6, r2
 8004d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d06:	b087      	sub	sp, #28
 8004d08:	ab03      	add	r3, sp, #12
 8004d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d0e:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <_scanf_i+0x1dc>)
 8004d10:	69a1      	ldr	r1, [r4, #24]
 8004d12:	4a70      	ldr	r2, [pc, #448]	@ (8004ed4 <_scanf_i+0x1e0>)
 8004d14:	2903      	cmp	r1, #3
 8004d16:	bf08      	it	eq
 8004d18:	461a      	moveq	r2, r3
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	9201      	str	r2, [sp, #4]
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004d24:	bf88      	it	hi
 8004d26:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004d2a:	4627      	mov	r7, r4
 8004d2c:	bf82      	ittt	hi
 8004d2e:	eb03 0905 	addhi.w	r9, r3, r5
 8004d32:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004d36:	60a3      	strhi	r3, [r4, #8]
 8004d38:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004d3c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004d40:	bf98      	it	ls
 8004d42:	f04f 0900 	movls.w	r9, #0
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	463d      	mov	r5, r7
 8004d4a:	f04f 0b00 	mov.w	fp, #0
 8004d4e:	6831      	ldr	r1, [r6, #0]
 8004d50:	ab03      	add	r3, sp, #12
 8004d52:	7809      	ldrb	r1, [r1, #0]
 8004d54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f7fb fa49 	bl	80001f0 <memchr>
 8004d5e:	b328      	cbz	r0, 8004dac <_scanf_i+0xb8>
 8004d60:	f1bb 0f01 	cmp.w	fp, #1
 8004d64:	d159      	bne.n	8004e1a <_scanf_i+0x126>
 8004d66:	6862      	ldr	r2, [r4, #4]
 8004d68:	b92a      	cbnz	r2, 8004d76 <_scanf_i+0x82>
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	2108      	movs	r1, #8
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d72:	6061      	str	r1, [r4, #4]
 8004d74:	6022      	str	r2, [r4, #0]
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	68a2      	ldr	r2, [r4, #8]
 8004d80:	1e51      	subs	r1, r2, #1
 8004d82:	60a1      	str	r1, [r4, #8]
 8004d84:	b192      	cbz	r2, 8004dac <_scanf_i+0xb8>
 8004d86:	6832      	ldr	r2, [r6, #0]
 8004d88:	1c51      	adds	r1, r2, #1
 8004d8a:	6031      	str	r1, [r6, #0]
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	f805 2b01 	strb.w	r2, [r5], #1
 8004d92:	6872      	ldr	r2, [r6, #4]
 8004d94:	3a01      	subs	r2, #1
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	6072      	str	r2, [r6, #4]
 8004d9a:	dc07      	bgt.n	8004dac <_scanf_i+0xb8>
 8004d9c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004da0:	4631      	mov	r1, r6
 8004da2:	4650      	mov	r0, sl
 8004da4:	4790      	blx	r2
 8004da6:	2800      	cmp	r0, #0
 8004da8:	f040 8085 	bne.w	8004eb6 <_scanf_i+0x1c2>
 8004dac:	f10b 0b01 	add.w	fp, fp, #1
 8004db0:	f1bb 0f03 	cmp.w	fp, #3
 8004db4:	d1cb      	bne.n	8004d4e <_scanf_i+0x5a>
 8004db6:	6863      	ldr	r3, [r4, #4]
 8004db8:	b90b      	cbnz	r3, 8004dbe <_scanf_i+0xca>
 8004dba:	230a      	movs	r3, #10
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	4945      	ldr	r1, [pc, #276]	@ (8004ed8 <_scanf_i+0x1e4>)
 8004dc2:	6960      	ldr	r0, [r4, #20]
 8004dc4:	1ac9      	subs	r1, r1, r3
 8004dc6:	f000 fa19 	bl	80051fc <__sccl>
 8004dca:	f04f 0b00 	mov.w	fp, #0
 8004dce:	68a3      	ldr	r3, [r4, #8]
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d03d      	beq.n	8004e52 <_scanf_i+0x15e>
 8004dd6:	6831      	ldr	r1, [r6, #0]
 8004dd8:	6960      	ldr	r0, [r4, #20]
 8004dda:	f891 c000 	ldrb.w	ip, [r1]
 8004dde:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d035      	beq.n	8004e52 <_scanf_i+0x15e>
 8004de6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004dea:	d124      	bne.n	8004e36 <_scanf_i+0x142>
 8004dec:	0510      	lsls	r0, r2, #20
 8004dee:	d522      	bpl.n	8004e36 <_scanf_i+0x142>
 8004df0:	f10b 0b01 	add.w	fp, fp, #1
 8004df4:	f1b9 0f00 	cmp.w	r9, #0
 8004df8:	d003      	beq.n	8004e02 <_scanf_i+0x10e>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e00:	60a3      	str	r3, [r4, #8]
 8004e02:	6873      	ldr	r3, [r6, #4]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	6073      	str	r3, [r6, #4]
 8004e0a:	dd1b      	ble.n	8004e44 <_scanf_i+0x150>
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	68a3      	ldr	r3, [r4, #8]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	60a3      	str	r3, [r4, #8]
 8004e18:	e7d9      	b.n	8004dce <_scanf_i+0xda>
 8004e1a:	f1bb 0f02 	cmp.w	fp, #2
 8004e1e:	d1ae      	bne.n	8004d7e <_scanf_i+0x8a>
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004e26:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004e2a:	d1bf      	bne.n	8004dac <_scanf_i+0xb8>
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	6061      	str	r1, [r4, #4]
 8004e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e34:	e7a2      	b.n	8004d7c <_scanf_i+0x88>
 8004e36:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	780b      	ldrb	r3, [r1, #0]
 8004e3e:	f805 3b01 	strb.w	r3, [r5], #1
 8004e42:	e7de      	b.n	8004e02 <_scanf_i+0x10e>
 8004e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	4798      	blx	r3
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d0df      	beq.n	8004e12 <_scanf_i+0x11e>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	05d9      	lsls	r1, r3, #23
 8004e56:	d50d      	bpl.n	8004e74 <_scanf_i+0x180>
 8004e58:	42bd      	cmp	r5, r7
 8004e5a:	d909      	bls.n	8004e70 <_scanf_i+0x17c>
 8004e5c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e64:	4632      	mov	r2, r6
 8004e66:	4650      	mov	r0, sl
 8004e68:	4798      	blx	r3
 8004e6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004e6e:	464d      	mov	r5, r9
 8004e70:	42bd      	cmp	r5, r7
 8004e72:	d028      	beq.n	8004ec6 <_scanf_i+0x1d2>
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	f012 0210 	ands.w	r2, r2, #16
 8004e7a:	d113      	bne.n	8004ea4 <_scanf_i+0x1b0>
 8004e7c:	702a      	strb	r2, [r5, #0]
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	9e01      	ldr	r6, [sp, #4]
 8004e82:	4639      	mov	r1, r7
 8004e84:	4650      	mov	r0, sl
 8004e86:	47b0      	blx	r6
 8004e88:	f8d8 3000 	ldr.w	r3, [r8]
 8004e8c:	6821      	ldr	r1, [r4, #0]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	f8c8 2000 	str.w	r2, [r8]
 8004e94:	f011 0f20 	tst.w	r1, #32
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	d00f      	beq.n	8004ebc <_scanf_i+0x1c8>
 8004e9c:	6018      	str	r0, [r3, #0]
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60e3      	str	r3, [r4, #12]
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	1bed      	subs	r5, r5, r7
 8004ea8:	445d      	add	r5, fp
 8004eaa:	442b      	add	r3, r5
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	b007      	add	sp, #28
 8004eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb6:	f04f 0b00 	mov.w	fp, #0
 8004eba:	e7ca      	b.n	8004e52 <_scanf_i+0x15e>
 8004ebc:	07ca      	lsls	r2, r1, #31
 8004ebe:	bf4c      	ite	mi
 8004ec0:	8018      	strhmi	r0, [r3, #0]
 8004ec2:	6018      	strpl	r0, [r3, #0]
 8004ec4:	e7eb      	b.n	8004e9e <_scanf_i+0x1aa>
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	e7f2      	b.n	8004eb0 <_scanf_i+0x1bc>
 8004eca:	bf00      	nop
 8004ecc:	08005828 	.word	0x08005828
 8004ed0:	08005575 	.word	0x08005575
 8004ed4:	08005655 	.word	0x08005655
 8004ed8:	0800588f 	.word	0x0800588f

08004edc <__sflush_r>:
 8004edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	0716      	lsls	r6, r2, #28
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	460c      	mov	r4, r1
 8004eea:	d454      	bmi.n	8004f96 <__sflush_r+0xba>
 8004eec:	684b      	ldr	r3, [r1, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	dc02      	bgt.n	8004ef8 <__sflush_r+0x1c>
 8004ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dd48      	ble.n	8004f8a <__sflush_r+0xae>
 8004ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d045      	beq.n	8004f8a <__sflush_r+0xae>
 8004efe:	2300      	movs	r3, #0
 8004f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f04:	682f      	ldr	r7, [r5, #0]
 8004f06:	6a21      	ldr	r1, [r4, #32]
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	d030      	beq.n	8004f6e <__sflush_r+0x92>
 8004f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	0759      	lsls	r1, r3, #29
 8004f12:	d505      	bpl.n	8004f20 <__sflush_r+0x44>
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f1a:	b10b      	cbz	r3, 8004f20 <__sflush_r+0x44>
 8004f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	2300      	movs	r3, #0
 8004f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f24:	6a21      	ldr	r1, [r4, #32]
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b0      	blx	r6
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	d106      	bne.n	8004f3e <__sflush_r+0x62>
 8004f30:	6829      	ldr	r1, [r5, #0]
 8004f32:	291d      	cmp	r1, #29
 8004f34:	d82b      	bhi.n	8004f8e <__sflush_r+0xb2>
 8004f36:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <__sflush_r+0x104>)
 8004f38:	410a      	asrs	r2, r1
 8004f3a:	07d6      	lsls	r6, r2, #31
 8004f3c:	d427      	bmi.n	8004f8e <__sflush_r+0xb2>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	6062      	str	r2, [r4, #4]
 8004f42:	04d9      	lsls	r1, r3, #19
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	6022      	str	r2, [r4, #0]
 8004f48:	d504      	bpl.n	8004f54 <__sflush_r+0x78>
 8004f4a:	1c42      	adds	r2, r0, #1
 8004f4c:	d101      	bne.n	8004f52 <__sflush_r+0x76>
 8004f4e:	682b      	ldr	r3, [r5, #0]
 8004f50:	b903      	cbnz	r3, 8004f54 <__sflush_r+0x78>
 8004f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f56:	602f      	str	r7, [r5, #0]
 8004f58:	b1b9      	cbz	r1, 8004f8a <__sflush_r+0xae>
 8004f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d002      	beq.n	8004f68 <__sflush_r+0x8c>
 8004f62:	4628      	mov	r0, r5
 8004f64:	f7fe ffd6 	bl	8003f14 <_free_r>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f6c:	e00d      	b.n	8004f8a <__sflush_r+0xae>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b0      	blx	r6
 8004f74:	4602      	mov	r2, r0
 8004f76:	1c50      	adds	r0, r2, #1
 8004f78:	d1c9      	bne.n	8004f0e <__sflush_r+0x32>
 8004f7a:	682b      	ldr	r3, [r5, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0c6      	beq.n	8004f0e <__sflush_r+0x32>
 8004f80:	2b1d      	cmp	r3, #29
 8004f82:	d001      	beq.n	8004f88 <__sflush_r+0xac>
 8004f84:	2b16      	cmp	r3, #22
 8004f86:	d11e      	bne.n	8004fc6 <__sflush_r+0xea>
 8004f88:	602f      	str	r7, [r5, #0]
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e022      	b.n	8004fd4 <__sflush_r+0xf8>
 8004f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f92:	b21b      	sxth	r3, r3
 8004f94:	e01b      	b.n	8004fce <__sflush_r+0xf2>
 8004f96:	690f      	ldr	r7, [r1, #16]
 8004f98:	2f00      	cmp	r7, #0
 8004f9a:	d0f6      	beq.n	8004f8a <__sflush_r+0xae>
 8004f9c:	0793      	lsls	r3, r2, #30
 8004f9e:	680e      	ldr	r6, [r1, #0]
 8004fa0:	bf08      	it	eq
 8004fa2:	694b      	ldreq	r3, [r1, #20]
 8004fa4:	600f      	str	r7, [r1, #0]
 8004fa6:	bf18      	it	ne
 8004fa8:	2300      	movne	r3, #0
 8004faa:	eba6 0807 	sub.w	r8, r6, r7
 8004fae:	608b      	str	r3, [r1, #8]
 8004fb0:	f1b8 0f00 	cmp.w	r8, #0
 8004fb4:	dde9      	ble.n	8004f8a <__sflush_r+0xae>
 8004fb6:	6a21      	ldr	r1, [r4, #32]
 8004fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004fba:	4643      	mov	r3, r8
 8004fbc:	463a      	mov	r2, r7
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b0      	blx	r6
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	dc08      	bgt.n	8004fd8 <__sflush_r+0xfc>
 8004fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd8:	4407      	add	r7, r0
 8004fda:	eba8 0800 	sub.w	r8, r8, r0
 8004fde:	e7e7      	b.n	8004fb0 <__sflush_r+0xd4>
 8004fe0:	dfbffffe 	.word	0xdfbffffe

08004fe4 <_fflush_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	690b      	ldr	r3, [r1, #16]
 8004fe8:	4605      	mov	r5, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	b913      	cbnz	r3, 8004ff4 <_fflush_r+0x10>
 8004fee:	2500      	movs	r5, #0
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	b118      	cbz	r0, 8004ffe <_fflush_r+0x1a>
 8004ff6:	6a03      	ldr	r3, [r0, #32]
 8004ff8:	b90b      	cbnz	r3, 8004ffe <_fflush_r+0x1a>
 8004ffa:	f7fe fc81 	bl	8003900 <__sinit>
 8004ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f3      	beq.n	8004fee <_fflush_r+0xa>
 8005006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005008:	07d0      	lsls	r0, r2, #31
 800500a:	d404      	bmi.n	8005016 <_fflush_r+0x32>
 800500c:	0599      	lsls	r1, r3, #22
 800500e:	d402      	bmi.n	8005016 <_fflush_r+0x32>
 8005010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005012:	f7fe ff6e 	bl	8003ef2 <__retarget_lock_acquire_recursive>
 8005016:	4628      	mov	r0, r5
 8005018:	4621      	mov	r1, r4
 800501a:	f7ff ff5f 	bl	8004edc <__sflush_r>
 800501e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005020:	07da      	lsls	r2, r3, #31
 8005022:	4605      	mov	r5, r0
 8005024:	d4e4      	bmi.n	8004ff0 <_fflush_r+0xc>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	059b      	lsls	r3, r3, #22
 800502a:	d4e1      	bmi.n	8004ff0 <_fflush_r+0xc>
 800502c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800502e:	f7fe ff61 	bl	8003ef4 <__retarget_lock_release_recursive>
 8005032:	e7dd      	b.n	8004ff0 <_fflush_r+0xc>

08005034 <__swhatbuf_r>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	460c      	mov	r4, r1
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	2900      	cmp	r1, #0
 800503e:	b096      	sub	sp, #88	@ 0x58
 8005040:	4615      	mov	r5, r2
 8005042:	461e      	mov	r6, r3
 8005044:	da0d      	bge.n	8005062 <__swhatbuf_r+0x2e>
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	bf14      	ite	ne
 8005052:	2340      	movne	r3, #64	@ 0x40
 8005054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005058:	2000      	movs	r0, #0
 800505a:	6031      	str	r1, [r6, #0]
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	b016      	add	sp, #88	@ 0x58
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	466a      	mov	r2, sp
 8005064:	f000 f9bc 	bl	80053e0 <_fstat_r>
 8005068:	2800      	cmp	r0, #0
 800506a:	dbec      	blt.n	8005046 <__swhatbuf_r+0x12>
 800506c:	9901      	ldr	r1, [sp, #4]
 800506e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005076:	4259      	negs	r1, r3
 8005078:	4159      	adcs	r1, r3
 800507a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800507e:	e7eb      	b.n	8005058 <__swhatbuf_r+0x24>

08005080 <__smakebuf_r>:
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005084:	079d      	lsls	r5, r3, #30
 8005086:	4606      	mov	r6, r0
 8005088:	460c      	mov	r4, r1
 800508a:	d507      	bpl.n	800509c <__smakebuf_r+0x1c>
 800508c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	2301      	movs	r3, #1
 8005096:	6163      	str	r3, [r4, #20]
 8005098:	b003      	add	sp, #12
 800509a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509c:	ab01      	add	r3, sp, #4
 800509e:	466a      	mov	r2, sp
 80050a0:	f7ff ffc8 	bl	8005034 <__swhatbuf_r>
 80050a4:	9f00      	ldr	r7, [sp, #0]
 80050a6:	4605      	mov	r5, r0
 80050a8:	4639      	mov	r1, r7
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7fe fb10 	bl	80036d0 <_malloc_r>
 80050b0:	b948      	cbnz	r0, 80050c6 <__smakebuf_r+0x46>
 80050b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b6:	059a      	lsls	r2, r3, #22
 80050b8:	d4ee      	bmi.n	8005098 <__smakebuf_r+0x18>
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	e7e2      	b.n	800508c <__smakebuf_r+0xc>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	6020      	str	r0, [r4, #0]
 80050ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050d6:	b15b      	cbz	r3, 80050f0 <__smakebuf_r+0x70>
 80050d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050dc:	4630      	mov	r0, r6
 80050de:	f000 f991 	bl	8005404 <_isatty_r>
 80050e2:	b128      	cbz	r0, 80050f0 <__smakebuf_r+0x70>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	431d      	orrs	r5, r3
 80050f4:	81a5      	strh	r5, [r4, #12]
 80050f6:	e7cf      	b.n	8005098 <__smakebuf_r+0x18>

080050f8 <lflush>:
 80050f8:	898b      	ldrh	r3, [r1, #12]
 80050fa:	f003 0309 	and.w	r3, r3, #9
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d103      	bne.n	800510a <lflush+0x12>
 8005102:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <lflush+0x18>)
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f7ff bf6d 	b.w	8004fe4 <_fflush_r>
 800510a:	2000      	movs	r0, #0
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000038 	.word	0x20000038

08005114 <__srefill_r>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	460c      	mov	r4, r1
 8005118:	4605      	mov	r5, r0
 800511a:	b118      	cbz	r0, 8005124 <__srefill_r+0x10>
 800511c:	6a03      	ldr	r3, [r0, #32]
 800511e:	b90b      	cbnz	r3, 8005124 <__srefill_r+0x10>
 8005120:	f7fe fbee 	bl	8003900 <__sinit>
 8005124:	2300      	movs	r3, #0
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512c:	069e      	lsls	r6, r3, #26
 800512e:	d408      	bmi.n	8005142 <__srefill_r+0x2e>
 8005130:	0758      	lsls	r0, r3, #29
 8005132:	d445      	bmi.n	80051c0 <__srefill_r+0xac>
 8005134:	06d9      	lsls	r1, r3, #27
 8005136:	d407      	bmi.n	8005148 <__srefill_r+0x34>
 8005138:	2209      	movs	r2, #9
 800513a:	602a      	str	r2, [r5, #0]
 800513c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	071a      	lsls	r2, r3, #28
 800514a:	d50b      	bpl.n	8005164 <__srefill_r+0x50>
 800514c:	4621      	mov	r1, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f7ff ff48 	bl	8004fe4 <_fflush_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	d1f4      	bne.n	8005142 <__srefill_r+0x2e>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	60a0      	str	r0, [r4, #8]
 800515c:	f023 0308 	bic.w	r3, r3, #8
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	61a0      	str	r0, [r4, #24]
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	b91b      	cbnz	r3, 8005178 <__srefill_r+0x64>
 8005170:	4621      	mov	r1, r4
 8005172:	4628      	mov	r0, r5
 8005174:	f7ff ff84 	bl	8005080 <__smakebuf_r>
 8005178:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800517c:	07b3      	lsls	r3, r6, #30
 800517e:	d00f      	beq.n	80051a0 <__srefill_r+0x8c>
 8005180:	2301      	movs	r3, #1
 8005182:	4a1b      	ldr	r2, [pc, #108]	@ (80051f0 <__srefill_r+0xdc>)
 8005184:	491b      	ldr	r1, [pc, #108]	@ (80051f4 <__srefill_r+0xe0>)
 8005186:	481c      	ldr	r0, [pc, #112]	@ (80051f8 <__srefill_r+0xe4>)
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	f7fe fbd1 	bl	8003930 <_fwalk_sglue>
 800518e:	81a6      	strh	r6, [r4, #12]
 8005190:	f006 0609 	and.w	r6, r6, #9
 8005194:	2e09      	cmp	r6, #9
 8005196:	d103      	bne.n	80051a0 <__srefill_r+0x8c>
 8005198:	4621      	mov	r1, r4
 800519a:	4628      	mov	r0, r5
 800519c:	f7ff fe9e 	bl	8004edc <__sflush_r>
 80051a0:	6922      	ldr	r2, [r4, #16]
 80051a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80051a4:	6963      	ldr	r3, [r4, #20]
 80051a6:	6a21      	ldr	r1, [r4, #32]
 80051a8:	6022      	str	r2, [r4, #0]
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b0      	blx	r6
 80051ae:	2800      	cmp	r0, #0
 80051b0:	6060      	str	r0, [r4, #4]
 80051b2:	dc17      	bgt.n	80051e4 <__srefill_r+0xd0>
 80051b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b8:	d116      	bne.n	80051e8 <__srefill_r+0xd4>
 80051ba:	f043 0320 	orr.w	r3, r3, #32
 80051be:	e7bf      	b.n	8005140 <__srefill_r+0x2c>
 80051c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051c2:	2900      	cmp	r1, #0
 80051c4:	d0d2      	beq.n	800516c <__srefill_r+0x58>
 80051c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d002      	beq.n	80051d4 <__srefill_r+0xc0>
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7fe fea0 	bl	8003f14 <_free_r>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0c5      	beq.n	800516c <__srefill_r+0x58>
 80051e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	2000      	movs	r0, #0
 80051e6:	e7ae      	b.n	8005146 <__srefill_r+0x32>
 80051e8:	2200      	movs	r2, #0
 80051ea:	6062      	str	r2, [r4, #4]
 80051ec:	e7a6      	b.n	800513c <__srefill_r+0x28>
 80051ee:	bf00      	nop
 80051f0:	2000002c 	.word	0x2000002c
 80051f4:	080050f9 	.word	0x080050f9
 80051f8:	2000003c 	.word	0x2000003c

080051fc <__sccl>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	780b      	ldrb	r3, [r1, #0]
 8005200:	4604      	mov	r4, r0
 8005202:	2b5e      	cmp	r3, #94	@ 0x5e
 8005204:	bf0b      	itete	eq
 8005206:	784b      	ldrbeq	r3, [r1, #1]
 8005208:	1c4a      	addne	r2, r1, #1
 800520a:	1c8a      	addeq	r2, r1, #2
 800520c:	2100      	movne	r1, #0
 800520e:	bf08      	it	eq
 8005210:	2101      	moveq	r1, #1
 8005212:	3801      	subs	r0, #1
 8005214:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005218:	f800 1f01 	strb.w	r1, [r0, #1]!
 800521c:	42a8      	cmp	r0, r5
 800521e:	d1fb      	bne.n	8005218 <__sccl+0x1c>
 8005220:	b90b      	cbnz	r3, 8005226 <__sccl+0x2a>
 8005222:	1e50      	subs	r0, r2, #1
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	f081 0101 	eor.w	r1, r1, #1
 800522a:	54e1      	strb	r1, [r4, r3]
 800522c:	4610      	mov	r0, r2
 800522e:	4602      	mov	r2, r0
 8005230:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005234:	2d2d      	cmp	r5, #45	@ 0x2d
 8005236:	d005      	beq.n	8005244 <__sccl+0x48>
 8005238:	2d5d      	cmp	r5, #93	@ 0x5d
 800523a:	d016      	beq.n	800526a <__sccl+0x6e>
 800523c:	2d00      	cmp	r5, #0
 800523e:	d0f1      	beq.n	8005224 <__sccl+0x28>
 8005240:	462b      	mov	r3, r5
 8005242:	e7f2      	b.n	800522a <__sccl+0x2e>
 8005244:	7846      	ldrb	r6, [r0, #1]
 8005246:	2e5d      	cmp	r6, #93	@ 0x5d
 8005248:	d0fa      	beq.n	8005240 <__sccl+0x44>
 800524a:	42b3      	cmp	r3, r6
 800524c:	dcf8      	bgt.n	8005240 <__sccl+0x44>
 800524e:	3002      	adds	r0, #2
 8005250:	461a      	mov	r2, r3
 8005252:	3201      	adds	r2, #1
 8005254:	4296      	cmp	r6, r2
 8005256:	54a1      	strb	r1, [r4, r2]
 8005258:	dcfb      	bgt.n	8005252 <__sccl+0x56>
 800525a:	1af2      	subs	r2, r6, r3
 800525c:	3a01      	subs	r2, #1
 800525e:	1c5d      	adds	r5, r3, #1
 8005260:	42b3      	cmp	r3, r6
 8005262:	bfa8      	it	ge
 8005264:	2200      	movge	r2, #0
 8005266:	18ab      	adds	r3, r5, r2
 8005268:	e7e1      	b.n	800522e <__sccl+0x32>
 800526a:	4610      	mov	r0, r2
 800526c:	e7da      	b.n	8005224 <__sccl+0x28>

0800526e <__submore>:
 800526e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005272:	460c      	mov	r4, r1
 8005274:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800527a:	4299      	cmp	r1, r3
 800527c:	d11d      	bne.n	80052ba <__submore+0x4c>
 800527e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005282:	f7fe fa25 	bl	80036d0 <_malloc_r>
 8005286:	b918      	cbnz	r0, 8005290 <__submore+0x22>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005294:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005296:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800529a:	6360      	str	r0, [r4, #52]	@ 0x34
 800529c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80052a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80052a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80052a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80052ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80052b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80052b4:	6020      	str	r0, [r4, #0]
 80052b6:	2000      	movs	r0, #0
 80052b8:	e7e8      	b.n	800528c <__submore+0x1e>
 80052ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80052bc:	0077      	lsls	r7, r6, #1
 80052be:	463a      	mov	r2, r7
 80052c0:	f000 f8b0 	bl	8005424 <_realloc_r>
 80052c4:	4605      	mov	r5, r0
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d0de      	beq.n	8005288 <__submore+0x1a>
 80052ca:	eb00 0806 	add.w	r8, r0, r6
 80052ce:	4601      	mov	r1, r0
 80052d0:	4632      	mov	r2, r6
 80052d2:	4640      	mov	r0, r8
 80052d4:	f7fe fe0f 	bl	8003ef6 <memcpy>
 80052d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80052dc:	f8c4 8000 	str.w	r8, [r4]
 80052e0:	e7e9      	b.n	80052b6 <__submore+0x48>

080052e2 <_ungetc_r>:
 80052e2:	b570      	push	{r4, r5, r6, lr}
 80052e4:	460d      	mov	r5, r1
 80052e6:	1c69      	adds	r1, r5, #1
 80052e8:	4606      	mov	r6, r0
 80052ea:	4614      	mov	r4, r2
 80052ec:	d01e      	beq.n	800532c <_ungetc_r+0x4a>
 80052ee:	b118      	cbz	r0, 80052f8 <_ungetc_r+0x16>
 80052f0:	6a03      	ldr	r3, [r0, #32]
 80052f2:	b90b      	cbnz	r3, 80052f8 <_ungetc_r+0x16>
 80052f4:	f7fe fb04 	bl	8003900 <__sinit>
 80052f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052fa:	07da      	lsls	r2, r3, #31
 80052fc:	d405      	bmi.n	800530a <_ungetc_r+0x28>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	d402      	bmi.n	800530a <_ungetc_r+0x28>
 8005304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005306:	f7fe fdf4 	bl	8003ef2 <__retarget_lock_acquire_recursive>
 800530a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530e:	f023 0220 	bic.w	r2, r3, #32
 8005312:	0758      	lsls	r0, r3, #29
 8005314:	81a2      	strh	r2, [r4, #12]
 8005316:	d422      	bmi.n	800535e <_ungetc_r+0x7c>
 8005318:	06d9      	lsls	r1, r3, #27
 800531a:	d40a      	bmi.n	8005332 <_ungetc_r+0x50>
 800531c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800531e:	07d2      	lsls	r2, r2, #31
 8005320:	d404      	bmi.n	800532c <_ungetc_r+0x4a>
 8005322:	0599      	lsls	r1, r3, #22
 8005324:	d402      	bmi.n	800532c <_ungetc_r+0x4a>
 8005326:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005328:	f7fe fde4 	bl	8003ef4 <__retarget_lock_release_recursive>
 800532c:	f04f 35ff 	mov.w	r5, #4294967295
 8005330:	e046      	b.n	80053c0 <_ungetc_r+0xde>
 8005332:	071b      	lsls	r3, r3, #28
 8005334:	d50f      	bpl.n	8005356 <_ungetc_r+0x74>
 8005336:	4621      	mov	r1, r4
 8005338:	4630      	mov	r0, r6
 800533a:	f7ff fe53 	bl	8004fe4 <_fflush_r>
 800533e:	b120      	cbz	r0, 800534a <_ungetc_r+0x68>
 8005340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005342:	07d8      	lsls	r0, r3, #31
 8005344:	d4f2      	bmi.n	800532c <_ungetc_r+0x4a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	e7eb      	b.n	8005322 <_ungetc_r+0x40>
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	60a0      	str	r0, [r4, #8]
 800534e:	f023 0308 	bic.w	r3, r3, #8
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	61a0      	str	r0, [r4, #24]
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005360:	6862      	ldr	r2, [r4, #4]
 8005362:	b2ed      	uxtb	r5, r5
 8005364:	b1d3      	cbz	r3, 800539c <_ungetc_r+0xba>
 8005366:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005368:	4293      	cmp	r3, r2
 800536a:	dc05      	bgt.n	8005378 <_ungetc_r+0x96>
 800536c:	4621      	mov	r1, r4
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff ff7d 	bl	800526e <__submore>
 8005374:	2800      	cmp	r0, #0
 8005376:	d1e3      	bne.n	8005340 <_ungetc_r+0x5e>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	1e5a      	subs	r2, r3, #1
 800537c:	6022      	str	r2, [r4, #0]
 800537e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	3301      	adds	r3, #1
 8005386:	6063      	str	r3, [r4, #4]
 8005388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800538a:	07da      	lsls	r2, r3, #31
 800538c:	d418      	bmi.n	80053c0 <_ungetc_r+0xde>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	059b      	lsls	r3, r3, #22
 8005392:	d415      	bmi.n	80053c0 <_ungetc_r+0xde>
 8005394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005396:	f7fe fdad 	bl	8003ef4 <__retarget_lock_release_recursive>
 800539a:	e011      	b.n	80053c0 <_ungetc_r+0xde>
 800539c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800539e:	6920      	ldr	r0, [r4, #16]
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f001 0101 	and.w	r1, r1, #1
 80053a6:	b168      	cbz	r0, 80053c4 <_ungetc_r+0xe2>
 80053a8:	4298      	cmp	r0, r3
 80053aa:	d20b      	bcs.n	80053c4 <_ungetc_r+0xe2>
 80053ac:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80053b0:	42a8      	cmp	r0, r5
 80053b2:	d107      	bne.n	80053c4 <_ungetc_r+0xe2>
 80053b4:	3b01      	subs	r3, #1
 80053b6:	3201      	adds	r2, #1
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	6062      	str	r2, [r4, #4]
 80053bc:	2900      	cmp	r1, #0
 80053be:	d0e6      	beq.n	800538e <_ungetc_r+0xac>
 80053c0:	4628      	mov	r0, r5
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80053c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80053ce:	2303      	movs	r3, #3
 80053d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80053d2:	4623      	mov	r3, r4
 80053d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	2301      	movs	r3, #1
 80053dc:	6063      	str	r3, [r4, #4]
 80053de:	e7ed      	b.n	80053bc <_ungetc_r+0xda>

080053e0 <_fstat_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	@ (8005400 <_fstat_r+0x20>)
 80053e4:	2300      	movs	r3, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	f7fb ff14 	bl	800121a <_fstat>
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	d102      	bne.n	80053fc <_fstat_r+0x1c>
 80053f6:	682b      	ldr	r3, [r5, #0]
 80053f8:	b103      	cbz	r3, 80053fc <_fstat_r+0x1c>
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	bd38      	pop	{r3, r4, r5, pc}
 80053fe:	bf00      	nop
 8005400:	20000308 	.word	0x20000308

08005404 <_isatty_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d06      	ldr	r5, [pc, #24]	@ (8005420 <_isatty_r+0x1c>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	f7fb ff13 	bl	800123a <_isatty>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_isatty_r+0x1a>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_isatty_r+0x1a>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	20000308 	.word	0x20000308

08005424 <_realloc_r>:
 8005424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005428:	4680      	mov	r8, r0
 800542a:	4615      	mov	r5, r2
 800542c:	460c      	mov	r4, r1
 800542e:	b921      	cbnz	r1, 800543a <_realloc_r+0x16>
 8005430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005434:	4611      	mov	r1, r2
 8005436:	f7fe b94b 	b.w	80036d0 <_malloc_r>
 800543a:	b92a      	cbnz	r2, 8005448 <_realloc_r+0x24>
 800543c:	f7fe fd6a 	bl	8003f14 <_free_r>
 8005440:	2400      	movs	r4, #0
 8005442:	4620      	mov	r0, r4
 8005444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005448:	f000 f906 	bl	8005658 <_malloc_usable_size_r>
 800544c:	4285      	cmp	r5, r0
 800544e:	4606      	mov	r6, r0
 8005450:	d802      	bhi.n	8005458 <_realloc_r+0x34>
 8005452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005456:	d8f4      	bhi.n	8005442 <_realloc_r+0x1e>
 8005458:	4629      	mov	r1, r5
 800545a:	4640      	mov	r0, r8
 800545c:	f7fe f938 	bl	80036d0 <_malloc_r>
 8005460:	4607      	mov	r7, r0
 8005462:	2800      	cmp	r0, #0
 8005464:	d0ec      	beq.n	8005440 <_realloc_r+0x1c>
 8005466:	42b5      	cmp	r5, r6
 8005468:	462a      	mov	r2, r5
 800546a:	4621      	mov	r1, r4
 800546c:	bf28      	it	cs
 800546e:	4632      	movcs	r2, r6
 8005470:	f7fe fd41 	bl	8003ef6 <memcpy>
 8005474:	4621      	mov	r1, r4
 8005476:	4640      	mov	r0, r8
 8005478:	f7fe fd4c 	bl	8003f14 <_free_r>
 800547c:	463c      	mov	r4, r7
 800547e:	e7e0      	b.n	8005442 <_realloc_r+0x1e>

08005480 <_strtol_l.constprop.0>:
 8005480:	2b24      	cmp	r3, #36	@ 0x24
 8005482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005486:	4686      	mov	lr, r0
 8005488:	4690      	mov	r8, r2
 800548a:	d801      	bhi.n	8005490 <_strtol_l.constprop.0+0x10>
 800548c:	2b01      	cmp	r3, #1
 800548e:	d106      	bne.n	800549e <_strtol_l.constprop.0+0x1e>
 8005490:	f7fe fd04 	bl	8003e9c <__errno>
 8005494:	2316      	movs	r3, #22
 8005496:	6003      	str	r3, [r0, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549e:	4834      	ldr	r0, [pc, #208]	@ (8005570 <_strtol_l.constprop.0+0xf0>)
 80054a0:	460d      	mov	r5, r1
 80054a2:	462a      	mov	r2, r5
 80054a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054a8:	5d06      	ldrb	r6, [r0, r4]
 80054aa:	f016 0608 	ands.w	r6, r6, #8
 80054ae:	d1f8      	bne.n	80054a2 <_strtol_l.constprop.0+0x22>
 80054b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80054b2:	d12d      	bne.n	8005510 <_strtol_l.constprop.0+0x90>
 80054b4:	782c      	ldrb	r4, [r5, #0]
 80054b6:	2601      	movs	r6, #1
 80054b8:	1c95      	adds	r5, r2, #2
 80054ba:	f033 0210 	bics.w	r2, r3, #16
 80054be:	d109      	bne.n	80054d4 <_strtol_l.constprop.0+0x54>
 80054c0:	2c30      	cmp	r4, #48	@ 0x30
 80054c2:	d12a      	bne.n	800551a <_strtol_l.constprop.0+0x9a>
 80054c4:	782a      	ldrb	r2, [r5, #0]
 80054c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80054ca:	2a58      	cmp	r2, #88	@ 0x58
 80054cc:	d125      	bne.n	800551a <_strtol_l.constprop.0+0x9a>
 80054ce:	786c      	ldrb	r4, [r5, #1]
 80054d0:	2310      	movs	r3, #16
 80054d2:	3502      	adds	r5, #2
 80054d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80054d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80054dc:	2200      	movs	r2, #0
 80054de:	fbbc f9f3 	udiv	r9, ip, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80054e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80054ec:	2f09      	cmp	r7, #9
 80054ee:	d81b      	bhi.n	8005528 <_strtol_l.constprop.0+0xa8>
 80054f0:	463c      	mov	r4, r7
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	dd27      	ble.n	8005546 <_strtol_l.constprop.0+0xc6>
 80054f6:	1c57      	adds	r7, r2, #1
 80054f8:	d007      	beq.n	800550a <_strtol_l.constprop.0+0x8a>
 80054fa:	4581      	cmp	r9, r0
 80054fc:	d320      	bcc.n	8005540 <_strtol_l.constprop.0+0xc0>
 80054fe:	d101      	bne.n	8005504 <_strtol_l.constprop.0+0x84>
 8005500:	45a2      	cmp	sl, r4
 8005502:	db1d      	blt.n	8005540 <_strtol_l.constprop.0+0xc0>
 8005504:	fb00 4003 	mla	r0, r0, r3, r4
 8005508:	2201      	movs	r2, #1
 800550a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800550e:	e7eb      	b.n	80054e8 <_strtol_l.constprop.0+0x68>
 8005510:	2c2b      	cmp	r4, #43	@ 0x2b
 8005512:	bf04      	itt	eq
 8005514:	782c      	ldrbeq	r4, [r5, #0]
 8005516:	1c95      	addeq	r5, r2, #2
 8005518:	e7cf      	b.n	80054ba <_strtol_l.constprop.0+0x3a>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1da      	bne.n	80054d4 <_strtol_l.constprop.0+0x54>
 800551e:	2c30      	cmp	r4, #48	@ 0x30
 8005520:	bf0c      	ite	eq
 8005522:	2308      	moveq	r3, #8
 8005524:	230a      	movne	r3, #10
 8005526:	e7d5      	b.n	80054d4 <_strtol_l.constprop.0+0x54>
 8005528:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800552c:	2f19      	cmp	r7, #25
 800552e:	d801      	bhi.n	8005534 <_strtol_l.constprop.0+0xb4>
 8005530:	3c37      	subs	r4, #55	@ 0x37
 8005532:	e7de      	b.n	80054f2 <_strtol_l.constprop.0+0x72>
 8005534:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005538:	2f19      	cmp	r7, #25
 800553a:	d804      	bhi.n	8005546 <_strtol_l.constprop.0+0xc6>
 800553c:	3c57      	subs	r4, #87	@ 0x57
 800553e:	e7d8      	b.n	80054f2 <_strtol_l.constprop.0+0x72>
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	e7e1      	b.n	800550a <_strtol_l.constprop.0+0x8a>
 8005546:	1c53      	adds	r3, r2, #1
 8005548:	d108      	bne.n	800555c <_strtol_l.constprop.0+0xdc>
 800554a:	2322      	movs	r3, #34	@ 0x22
 800554c:	f8ce 3000 	str.w	r3, [lr]
 8005550:	4660      	mov	r0, ip
 8005552:	f1b8 0f00 	cmp.w	r8, #0
 8005556:	d0a0      	beq.n	800549a <_strtol_l.constprop.0+0x1a>
 8005558:	1e69      	subs	r1, r5, #1
 800555a:	e006      	b.n	800556a <_strtol_l.constprop.0+0xea>
 800555c:	b106      	cbz	r6, 8005560 <_strtol_l.constprop.0+0xe0>
 800555e:	4240      	negs	r0, r0
 8005560:	f1b8 0f00 	cmp.w	r8, #0
 8005564:	d099      	beq.n	800549a <_strtol_l.constprop.0+0x1a>
 8005566:	2a00      	cmp	r2, #0
 8005568:	d1f6      	bne.n	8005558 <_strtol_l.constprop.0+0xd8>
 800556a:	f8c8 1000 	str.w	r1, [r8]
 800556e:	e794      	b.n	800549a <_strtol_l.constprop.0+0x1a>
 8005570:	0800589b 	.word	0x0800589b

08005574 <_strtol_r>:
 8005574:	f7ff bf84 	b.w	8005480 <_strtol_l.constprop.0>

08005578 <_strtoul_l.constprop.0>:
 8005578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800557c:	4e34      	ldr	r6, [pc, #208]	@ (8005650 <_strtoul_l.constprop.0+0xd8>)
 800557e:	4686      	mov	lr, r0
 8005580:	460d      	mov	r5, r1
 8005582:	4628      	mov	r0, r5
 8005584:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005588:	5d37      	ldrb	r7, [r6, r4]
 800558a:	f017 0708 	ands.w	r7, r7, #8
 800558e:	d1f8      	bne.n	8005582 <_strtoul_l.constprop.0+0xa>
 8005590:	2c2d      	cmp	r4, #45	@ 0x2d
 8005592:	d12f      	bne.n	80055f4 <_strtoul_l.constprop.0+0x7c>
 8005594:	782c      	ldrb	r4, [r5, #0]
 8005596:	2701      	movs	r7, #1
 8005598:	1c85      	adds	r5, r0, #2
 800559a:	f033 0010 	bics.w	r0, r3, #16
 800559e:	d109      	bne.n	80055b4 <_strtoul_l.constprop.0+0x3c>
 80055a0:	2c30      	cmp	r4, #48	@ 0x30
 80055a2:	d12c      	bne.n	80055fe <_strtoul_l.constprop.0+0x86>
 80055a4:	7828      	ldrb	r0, [r5, #0]
 80055a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80055aa:	2858      	cmp	r0, #88	@ 0x58
 80055ac:	d127      	bne.n	80055fe <_strtoul_l.constprop.0+0x86>
 80055ae:	786c      	ldrb	r4, [r5, #1]
 80055b0:	2310      	movs	r3, #16
 80055b2:	3502      	adds	r5, #2
 80055b4:	f04f 38ff 	mov.w	r8, #4294967295
 80055b8:	2600      	movs	r6, #0
 80055ba:	fbb8 f8f3 	udiv	r8, r8, r3
 80055be:	fb03 f908 	mul.w	r9, r3, r8
 80055c2:	ea6f 0909 	mvn.w	r9, r9
 80055c6:	4630      	mov	r0, r6
 80055c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80055cc:	f1bc 0f09 	cmp.w	ip, #9
 80055d0:	d81c      	bhi.n	800560c <_strtoul_l.constprop.0+0x94>
 80055d2:	4664      	mov	r4, ip
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	dd2a      	ble.n	800562e <_strtoul_l.constprop.0+0xb6>
 80055d8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80055dc:	d007      	beq.n	80055ee <_strtoul_l.constprop.0+0x76>
 80055de:	4580      	cmp	r8, r0
 80055e0:	d322      	bcc.n	8005628 <_strtoul_l.constprop.0+0xb0>
 80055e2:	d101      	bne.n	80055e8 <_strtoul_l.constprop.0+0x70>
 80055e4:	45a1      	cmp	r9, r4
 80055e6:	db1f      	blt.n	8005628 <_strtoul_l.constprop.0+0xb0>
 80055e8:	fb00 4003 	mla	r0, r0, r3, r4
 80055ec:	2601      	movs	r6, #1
 80055ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055f2:	e7e9      	b.n	80055c8 <_strtoul_l.constprop.0+0x50>
 80055f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80055f6:	bf04      	itt	eq
 80055f8:	782c      	ldrbeq	r4, [r5, #0]
 80055fa:	1c85      	addeq	r5, r0, #2
 80055fc:	e7cd      	b.n	800559a <_strtoul_l.constprop.0+0x22>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1d8      	bne.n	80055b4 <_strtoul_l.constprop.0+0x3c>
 8005602:	2c30      	cmp	r4, #48	@ 0x30
 8005604:	bf0c      	ite	eq
 8005606:	2308      	moveq	r3, #8
 8005608:	230a      	movne	r3, #10
 800560a:	e7d3      	b.n	80055b4 <_strtoul_l.constprop.0+0x3c>
 800560c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005610:	f1bc 0f19 	cmp.w	ip, #25
 8005614:	d801      	bhi.n	800561a <_strtoul_l.constprop.0+0xa2>
 8005616:	3c37      	subs	r4, #55	@ 0x37
 8005618:	e7dc      	b.n	80055d4 <_strtoul_l.constprop.0+0x5c>
 800561a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800561e:	f1bc 0f19 	cmp.w	ip, #25
 8005622:	d804      	bhi.n	800562e <_strtoul_l.constprop.0+0xb6>
 8005624:	3c57      	subs	r4, #87	@ 0x57
 8005626:	e7d5      	b.n	80055d4 <_strtoul_l.constprop.0+0x5c>
 8005628:	f04f 36ff 	mov.w	r6, #4294967295
 800562c:	e7df      	b.n	80055ee <_strtoul_l.constprop.0+0x76>
 800562e:	1c73      	adds	r3, r6, #1
 8005630:	d106      	bne.n	8005640 <_strtoul_l.constprop.0+0xc8>
 8005632:	2322      	movs	r3, #34	@ 0x22
 8005634:	f8ce 3000 	str.w	r3, [lr]
 8005638:	4630      	mov	r0, r6
 800563a:	b932      	cbnz	r2, 800564a <_strtoul_l.constprop.0+0xd2>
 800563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005640:	b107      	cbz	r7, 8005644 <_strtoul_l.constprop.0+0xcc>
 8005642:	4240      	negs	r0, r0
 8005644:	2a00      	cmp	r2, #0
 8005646:	d0f9      	beq.n	800563c <_strtoul_l.constprop.0+0xc4>
 8005648:	b106      	cbz	r6, 800564c <_strtoul_l.constprop.0+0xd4>
 800564a:	1e69      	subs	r1, r5, #1
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	e7f5      	b.n	800563c <_strtoul_l.constprop.0+0xc4>
 8005650:	0800589b 	.word	0x0800589b

08005654 <_strtoul_r>:
 8005654:	f7ff bf90 	b.w	8005578 <_strtoul_l.constprop.0>

08005658 <_malloc_usable_size_r>:
 8005658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800565c:	1f18      	subs	r0, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfbc      	itt	lt
 8005662:	580b      	ldrlt	r3, [r1, r0]
 8005664:	18c0      	addlt	r0, r0, r3
 8005666:	4770      	bx	lr

08005668 <_init>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr

08005674 <_fini>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr
