
TEST005_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08005158  08005158  00006158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005334  08005334  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800533c  0800533c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005340  08005340  00006340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005344  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  080053ac  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080053ac  00007508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faf5  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c9  00000000  00000000  00016b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00019158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b85  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018889  00000000  00000000  0001aba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011882  00000000  00000000  0003342e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf99  00000000  00000000  00044cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000459c  00000000  00000000  000e0c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e5228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005140 	.word	0x08005140

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005140 	.word	0x08005140

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_ADC_ConvCpltCallback>:
   int    v2[20];
   long    v3[10];
} buf;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <HAL_GPIO_EXTI_Callback>:

int mode = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
   if(++mode > 5) mode = 1;
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	4a07      	ldr	r2, [pc, #28]	@ (80005b4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_GPIO_EXTI_Callback+0x30>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b05      	cmp	r3, #5
 800059e:	dd02      	ble.n	80005a6 <HAL_GPIO_EXTI_Callback+0x22>
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <HAL_GPIO_EXTI_Callback+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
   cls();   //Terminal screen clear
 80005a6:	f000 fb6b 	bl	8000c80 <cls>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003b0 	.word	0x200003b0

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	@ 0x30
 80005bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fe13 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f94d 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fabf 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ca:	f000 fa9d 	bl	8000b08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ce:	f000 fa71 	bl	8000ab4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d2:	f000 f9af 	bl	8000934 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005d6:	f000 fa1f 	bl	8000a18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart("ADC - DMA");
 80005da:	488f      	ldr	r0, [pc, #572]	@ (8000818 <main+0x260>)
 80005dc:	f000 fb94 	bl	8000d08 <ProgramStart>
  HAL_TIM_Base_Start(&htim3);
 80005e0:	488e      	ldr	r0, [pc, #568]	@ (800081c <main+0x264>)
 80005e2:	f002 fec7 	bl	8003374 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, &buf, 3);
 80005e6:	2203      	movs	r2, #3
 80005e8:	498d      	ldr	r1, [pc, #564]	@ (8000820 <main+0x268>)
 80005ea:	488e      	ldr	r0, [pc, #568]	@ (8000824 <main+0x26c>)
 80005ec:	f000 ffc2 	bl	8001574 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int lm = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     switch(mode)
 80005f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000828 <main+0x270>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	f200 8109 	bhi.w	8000812 <main+0x25a>
 8000600:	a201      	add	r2, pc, #4	@ (adr r2, 8000608 <main+0x50>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	0800061d 	.word	0x0800061d
 800060c:	0800065f 	.word	0x0800065f
 8000610:	080006cb 	.word	0x080006cb
 8000614:	08000739 	.word	0x08000739
 8000618:	080007a5 	.word	0x080007a5
     {
     case 1:
        if(lm != mode) {cls(); lm = mode;}
 800061c:	4b82      	ldr	r3, [pc, #520]	@ (8000828 <main+0x270>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000622:	429a      	cmp	r2, r3
 8000624:	d004      	beq.n	8000630 <main+0x78>
 8000626:	f000 fb2b 	bl	8000c80 <cls>
 800062a:	4b7f      	ldr	r3, [pc, #508]	@ (8000828 <main+0x270>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
        int z = HAL_GPIO_ReadPin(Z_Axis_GPIO_Port,Z_Axis_Pin);
 8000630:	2101      	movs	r1, #1
 8000632:	487e      	ldr	r0, [pc, #504]	@ (800082c <main+0x274>)
 8000634:	f002 f96c 	bl	8002910 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	603b      	str	r3, [r7, #0]
        printf("\033[3;0H   ?��?���? 좌표: P(%d,%d,%d):%d    \n", buf.v1[0], buf.v1[1], z, buf.v1[2]);
 800063c:	4b78      	ldr	r3, [pc, #480]	@ (8000820 <main+0x268>)
 800063e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000642:	4619      	mov	r1, r3
 8000644:	4b76      	ldr	r3, [pc, #472]	@ (8000820 <main+0x268>)
 8000646:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800064a:	461a      	mov	r2, r3
 800064c:	4b74      	ldr	r3, [pc, #464]	@ (8000820 <main+0x268>)
 800064e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	4876      	ldr	r0, [pc, #472]	@ (8000830 <main+0x278>)
 8000658:	f003 fea6 	bl	80043a8 <iprintf>
        break;
 800065c:	e0da      	b.n	8000814 <main+0x25c>
     case 2:
        if(lm != mode) {cls(); lm = mode;}
 800065e:	4b72      	ldr	r3, [pc, #456]	@ (8000828 <main+0x270>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000664:	429a      	cmp	r2, r3
 8000666:	d004      	beq.n	8000672 <main+0xba>
 8000668:	f000 fb0a 	bl	8000c80 <cls>
 800066c:	4b6e      	ldr	r3, [pc, #440]	@ (8000828 <main+0x270>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
        printf("\033[7;0H            < 메모리 덤프 모드 >\r\n");
 8000672:	4870      	ldr	r0, [pc, #448]	@ (8000834 <main+0x27c>)
 8000674:	f003 ff00 	bl	8004478 <puts>
        printf("\033[9;0H");
 8000678:	486f      	ldr	r0, [pc, #444]	@ (8000838 <main+0x280>)
 800067a:	f003 fe95 	bl	80043a8 <iprintf>
        for (int j = 0; j < 15; j++)
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
 8000682:	e01e      	b.n	80006c2 <main+0x10a>
        {
           for (int i = 0; i < 16; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
 8000688:	e012      	b.n	80006b0 <main+0xf8>
           {
              printf("%02x ",(unsigned)buf.buf[16*j+i]);
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	011a      	lsls	r2, r3, #4
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	4413      	add	r3, r2
 8000692:	4a63      	ldr	r2, [pc, #396]	@ (8000820 <main+0x268>)
 8000694:	5cd3      	ldrb	r3, [r2, r3]
 8000696:	4619      	mov	r1, r3
 8000698:	4868      	ldr	r0, [pc, #416]	@ (800083c <main+0x284>)
 800069a:	f003 fe85 	bl	80043a8 <iprintf>
              if(i == 7) printf("  ");
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d102      	bne.n	80006aa <main+0xf2>
 80006a4:	4866      	ldr	r0, [pc, #408]	@ (8000840 <main+0x288>)
 80006a6:	f003 fe7f 	bl	80043a8 <iprintf>
           for (int i = 0; i < 16; i++)
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3301      	adds	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	dde9      	ble.n	800068a <main+0xd2>
           }
           printf("\r\n");
 80006b6:	4863      	ldr	r0, [pc, #396]	@ (8000844 <main+0x28c>)
 80006b8:	f003 fede 	bl	8004478 <puts>
        for (int j = 0; j < 15; j++)
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	3301      	adds	r3, #1
 80006c0:	623b      	str	r3, [r7, #32]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	2b0e      	cmp	r3, #14
 80006c6:	dddd      	ble.n	8000684 <main+0xcc>
        }
        break;
 80006c8:	e0a4      	b.n	8000814 <main+0x25c>
     case 3:
        if(lm != mode) {cls(); lm = mode;}
 80006ca:	4b57      	ldr	r3, [pc, #348]	@ (8000828 <main+0x270>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d004      	beq.n	80006de <main+0x126>
 80006d4:	f000 fad4 	bl	8000c80 <cls>
 80006d8:	4b53      	ldr	r3, [pc, #332]	@ (8000828 <main+0x270>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
        printf("\033[7;0H            < 메모리 쇼트 모드 >\r\n");
 80006de:	485a      	ldr	r0, [pc, #360]	@ (8000848 <main+0x290>)
 80006e0:	f003 feca 	bl	8004478 <puts>
        printf("\033[9;0H");
 80006e4:	4854      	ldr	r0, [pc, #336]	@ (8000838 <main+0x280>)
 80006e6:	f003 fe5f 	bl	80043a8 <iprintf>
        for (int j = 0; j < 15; j++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e01f      	b.n	8000730 <main+0x178>
        {
           for (int i = 0; i < 16; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	e013      	b.n	800071e <main+0x166>
           {
              printf("%04x ",(unsigned)buf.v1[16*j+i]);
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	011a      	lsls	r2, r3, #4
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a48      	ldr	r2, [pc, #288]	@ (8000820 <main+0x268>)
 8000700:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000704:	4619      	mov	r1, r3
 8000706:	4851      	ldr	r0, [pc, #324]	@ (800084c <main+0x294>)
 8000708:	f003 fe4e 	bl	80043a8 <iprintf>
              if(i == 7) printf("  ");
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d102      	bne.n	8000718 <main+0x160>
 8000712:	484b      	ldr	r0, [pc, #300]	@ (8000840 <main+0x288>)
 8000714:	f003 fe48 	bl	80043a8 <iprintf>
           for (int i = 0; i < 16; i++)
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	dde8      	ble.n	80006f6 <main+0x13e>
           }
           printf("\r\n");
 8000724:	4847      	ldr	r0, [pc, #284]	@ (8000844 <main+0x28c>)
 8000726:	f003 fea7 	bl	8004478 <puts>
        for (int j = 0; j < 15; j++)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	3301      	adds	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	2b0e      	cmp	r3, #14
 8000734:	dddc      	ble.n	80006f0 <main+0x138>
        }
        break;
 8000736:	e06d      	b.n	8000814 <main+0x25c>
     case 4:
        if(lm != mode) {cls(); lm = mode;}
 8000738:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <main+0x270>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073e:	429a      	cmp	r2, r3
 8000740:	d004      	beq.n	800074c <main+0x194>
 8000742:	f000 fa9d 	bl	8000c80 <cls>
 8000746:	4b38      	ldr	r3, [pc, #224]	@ (8000828 <main+0x270>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
        printf("\033[7;0H            < 메모리 인트 모드 >\r\n");
 800074c:	4840      	ldr	r0, [pc, #256]	@ (8000850 <main+0x298>)
 800074e:	f003 fe93 	bl	8004478 <puts>
        printf("\033[9;0H");
 8000752:	4839      	ldr	r0, [pc, #228]	@ (8000838 <main+0x280>)
 8000754:	f003 fe28 	bl	80043a8 <iprintf>
        for (int j = 0; j < 20; j++)
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	e01f      	b.n	800079e <main+0x1e6>
        {
           for (int i = 0; i < 4; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e013      	b.n	800078c <main+0x1d4>
           {
              printf("%08x ",(unsigned)buf.v2[4*j+i]);
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	009a      	lsls	r2, r3, #2
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	4a2c      	ldr	r2, [pc, #176]	@ (8000820 <main+0x268>)
 800076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000772:	4619      	mov	r1, r3
 8000774:	4837      	ldr	r0, [pc, #220]	@ (8000854 <main+0x29c>)
 8000776:	f003 fe17 	bl	80043a8 <iprintf>
              if(i == 7) printf("  ");
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b07      	cmp	r3, #7
 800077e:	d102      	bne.n	8000786 <main+0x1ce>
 8000780:	482f      	ldr	r0, [pc, #188]	@ (8000840 <main+0x288>)
 8000782:	f003 fe11 	bl	80043a8 <iprintf>
           for (int i = 0; i < 4; i++)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b03      	cmp	r3, #3
 8000790:	dde8      	ble.n	8000764 <main+0x1ac>
           }
           printf("\r\n");
 8000792:	482c      	ldr	r0, [pc, #176]	@ (8000844 <main+0x28c>)
 8000794:	f003 fe70 	bl	8004478 <puts>
        for (int j = 0; j < 20; j++)
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	3301      	adds	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	2b13      	cmp	r3, #19
 80007a2:	dddc      	ble.n	800075e <main+0x1a6>
        }
     case 5:
        if(lm != mode) {cls(); lm = mode;}
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <main+0x270>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d004      	beq.n	80007b8 <main+0x200>
 80007ae:	f000 fa67 	bl	8000c80 <cls>
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <main+0x270>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
        printf("\033[7;0H            < 메모리 롱 모드 >\r\n");
 80007b8:	4827      	ldr	r0, [pc, #156]	@ (8000858 <main+0x2a0>)
 80007ba:	f003 fe5d 	bl	8004478 <puts>
        printf("\033[9;0H");
 80007be:	481e      	ldr	r0, [pc, #120]	@ (8000838 <main+0x280>)
 80007c0:	f003 fdf2 	bl	80043a8 <iprintf>
        for (int j = 0; j < 20; j++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	e01f      	b.n	800080a <main+0x252>
        {
           for (int i = 0; i < 4; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	e013      	b.n	80007f8 <main+0x240>
           {
              printf("%08X ",(unsigned)buf.v3[4*j+i]);
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	009a      	lsls	r2, r3, #2
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <main+0x268>)
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	4619      	mov	r1, r3
 80007e0:	481e      	ldr	r0, [pc, #120]	@ (800085c <main+0x2a4>)
 80007e2:	f003 fde1 	bl	80043a8 <iprintf>
              if(i == 7) printf("  ");
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	d102      	bne.n	80007f2 <main+0x23a>
 80007ec:	4814      	ldr	r0, [pc, #80]	@ (8000840 <main+0x288>)
 80007ee:	f003 fddb 	bl	80043a8 <iprintf>
           for (int i = 0; i < 4; i++)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3301      	adds	r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	dde8      	ble.n	80007d0 <main+0x218>
           }
           printf("\r\n");
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <main+0x28c>)
 8000800:	f003 fe3a 	bl	8004478 <puts>
        for (int j = 0; j < 20; j++)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3301      	adds	r3, #1
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	2b13      	cmp	r3, #19
 800080e:	dddc      	ble.n	80007ca <main+0x212>
        }
     break;
 8000810:	e000      	b.n	8000814 <main+0x25c>
     default:
     break;
 8000812:	bf00      	nop
     switch(mode)
 8000814:	e6ee      	b.n	80005f4 <main+0x3c>
 8000816:	bf00      	nop
 8000818:	08005158 	.word	0x08005158
 800081c:	2000012c 	.word	0x2000012c
 8000820:	200001bc 	.word	0x200001bc
 8000824:	20000084 	.word	0x20000084
 8000828:	200003b0 	.word	0x200003b0
 800082c:	40020400 	.word	0x40020400
 8000830:	08005164 	.word	0x08005164
 8000834:	0800519c 	.word	0x0800519c
 8000838:	080051cc 	.word	0x080051cc
 800083c:	080051d4 	.word	0x080051d4
 8000840:	080051dc 	.word	0x080051dc
 8000844:	080051e0 	.word	0x080051e0
 8000848:	080051e4 	.word	0x080051e4
 800084c:	08005214 	.word	0x08005214
 8000850:	0800521c 	.word	0x0800521c
 8000854:	0800524c 	.word	0x0800524c
 8000858:	08005254 	.word	0x08005254
 800085c:	08005280 	.word	0x08005280

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	@ 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fee2 	bl	8004638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a27      	ldr	r2, [pc, #156]	@ (800092c <SystemClock_Config+0xcc>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <SystemClock_Config+0xcc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <SystemClock_Config+0xd0>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <SystemClock_Config+0xd0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c4:	2310      	movs	r3, #16
 80008c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d0:	2310      	movs	r3, #16
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008da:	2304      	movs	r3, #4
 80008dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008de:	2304      	movs	r3, #4
 80008e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 f85c 	bl	80029a4 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008f2:	f000 f9ad 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2102      	movs	r1, #2
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fabe 	bl	8002e94 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800091e:	f000 f997 	bl	8000c50 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000948:	4a32      	ldr	r2, [pc, #200]	@ (8000a14 <MX_ADC1_Init+0xe0>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 800094e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000952:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000954:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800095a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 800095c:	2201      	movs	r2, #1
 800095e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000960:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000962:	2200      	movs	r2, #0
 8000964:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000966:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000970:	2201      	movs	r2, #1
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 800097e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 800098c:	2203      	movs	r2, #3
 800098e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099e:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 80009a0:	f000 fc94 	bl	80012cc <HAL_ADC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 80009aa:	f000 f951 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009ae:	230a      	movs	r3, #10
 80009b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4814      	ldr	r0, [pc, #80]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 80009c0:	f000 fee6 	bl	8001790 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80009ca:	f000 f941 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009ce:	230b      	movs	r3, #11
 80009d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 80009dc:	f000 fed8 	bl	8001790 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80009e6:	f000 f933 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009ee:	2303      	movs	r3, #3
 80009f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_ADC1_Init+0xdc>)
 80009f8:	f000 feca 	bl	8001790 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a02:	f000 f925 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000084 	.word	0x20000084
 8000a14:	40012000 	.word	0x40012000

08000a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a36:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab0 <MX_TIM3_Init+0x98>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a3c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000a40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a5c:	4813      	ldr	r0, [pc, #76]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a5e:	f002 fc39 	bl	80032d4 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a68:	f000 f8f2 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a7a:	f002 fcd5 	bl	8003428 <HAL_TIM_ConfigClockSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a84:	f000 f8e4 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_TIM3_Init+0x94>)
 8000a96:	f002 feb5 	bl	8003804 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f8d6 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000012c 	.word	0x2000012c
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_USART2_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aec:	f002 fef8 	bl	80038e0 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f8ab 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000174 	.word	0x20000174
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_DMA_Init+0x3c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <MX_DMA_Init+0x3c>)
 8000b18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_DMA_Init+0x3c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2038      	movs	r0, #56	@ 0x38
 8000b30:	f001 f9c3 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b34:	2038      	movs	r0, #56	@ 0x38
 8000b36:	f001 f9dc 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b37      	ldr	r3, [pc, #220]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a36      	ldr	r2, [pc, #216]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b34      	ldr	r3, [pc, #208]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a2f      	ldr	r2, [pc, #188]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a28      	ldr	r2, [pc, #160]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_GPIO_Init+0xf8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	481c      	ldr	r0, [pc, #112]	@ (8000c44 <MX_GPIO_Init+0xfc>)
 8000bd4:	f001 feb4 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4816      	ldr	r0, [pc, #88]	@ (8000c48 <MX_GPIO_Init+0x100>)
 8000bf0:	f001 fd0a 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <MX_GPIO_Init+0xfc>)
 8000c0c:	f001 fcfc 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_Axis_Pin */
  GPIO_InitStruct.Pin = Z_Axis_Pin;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_Axis_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480a      	ldr	r0, [pc, #40]	@ (8000c4c <MX_GPIO_Init+0x104>)
 8000c24:	f001 fcf0 	bl	8002608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2028      	movs	r0, #40	@ 0x28
 8000c2e:	f001 f944 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c32:	2028      	movs	r0, #40	@ 0x28
 8000c34:	f001 f95d 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020400 	.word	0x40020400

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <__io_putchar>:
#include "main.h"

extern UART_HandleTypeDef huart2; //소스가 여러개 있어도 모두 모여서 하나의 실행파일로 만들어진다.

int __io_putchar(int ch)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000c64:	1d39      	adds	r1, r7, #4
 8000c66:	230a      	movs	r3, #10
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <__io_putchar+0x20>)
 8000c6c:	f002 fe88 	bl	8003980 <HAL_UART_Transmit>
   return ch;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000174 	.word	0x20000174

08000c80 <cls>:

void cls()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
   printf("\033[2J\n");    //[y;xH : move cur to (x,y) 2J: 화면 클리어
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <cls+0x14>)
 8000c86:	f003 fbf7 	bl	8004478 <puts>

   printf("\033[2J\033[1;1H\n");
 8000c8a:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <cls+0x18>)
 8000c8c:	f003 fbf4 	bl	8004478 <puts>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08005288 	.word	0x08005288
 8000c98:	08005290 	.word	0x08005290

08000c9c <__io_getchar>:
   }
}


int __io_getchar(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
   {
      int r = HAL_UART_Receive(&huart2, &ch, 1, 10);
      if(r == HAL_OK) break;
   }
   */
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000ca2:	bf00      	nop
 8000ca4:	1df9      	adds	r1, r7, #7
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	2201      	movs	r2, #1
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <__io_getchar+0x44>)
 8000cac:	f002 fef3 	bl	8003a96 <HAL_UART_Receive>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f6      	bne.n	8000ca4 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10);   // echo
 8000cb6:	1df9      	adds	r1, r7, #7
 8000cb8:	230a      	movs	r3, #10
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <__io_getchar+0x44>)
 8000cbe:	f002 fe5f 	bl	8003980 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b0d      	cmp	r3, #13
 8000cc6:	d105      	bne.n	8000cd4 <__io_getchar+0x38>
 8000cc8:	230a      	movs	r3, #10
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4905      	ldr	r1, [pc, #20]	@ (8000ce4 <__io_getchar+0x48>)
 8000cce:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <__io_getchar+0x44>)
 8000cd0:	f002 fe56 	bl	8003980 <HAL_UART_Transmit>
   return ch;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000174 	.word	0x20000174
 8000ce4:	080052ac 	.word	0x080052ac

08000ce8 <Wait>:

void Wait()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000cec:	bf00      	nop
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <Wait+0x1c>)
 8000cf4:	f001 fe0c 	bl	8002910 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f7      	bne.n	8000cee <Wait+0x6>
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40020800 	.word	0x40020800

08000d08 <ProgramStart>:

void ProgramStart(char *name)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
   printf("\033[2J\033[1;1H\n"); // [y;xH : move cur to (x,y) 2J: 화면 클리어
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <ProgramStart+0x24>)
 8000d12:	f003 fbb1 	bl	8004478 <puts>
   printf("Program(%s) started... Blue button to start\r\n", name);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <ProgramStart+0x28>)
 8000d1a:	f003 fb45 	bl	80043a8 <iprintf>
   Wait(); //while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000d1e:	f7ff ffe3 	bl	8000ce8 <Wait>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	08005290 	.word	0x08005290
 8000d30:	080052b0 	.word	0x080052b0

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d72:	2007      	movs	r0, #7
 8000d74:	f001 f896 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a40      	ldr	r2, [pc, #256]	@ (8000ea4 <HAL_ADC_MspInit+0x120>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d179      	bne.n	8000e9a <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a3e      	ldr	r2, [pc, #248]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a37      	ldr	r2, [pc, #220]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a30      	ldr	r2, [pc, #192]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <HAL_ADC_MspInit+0x124>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = X_Axis_Pin|Y_Axis_Pin;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4827      	ldr	r0, [pc, #156]	@ (8000eac <HAL_ADC_MspInit+0x128>)
 8000e0e:	f001 fbfb 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CDS_Pin;
 8000e12:	2310      	movs	r3, #16
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CDS_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4822      	ldr	r0, [pc, #136]	@ (8000eb0 <HAL_ADC_MspInit+0x12c>)
 8000e26:	f001 fbef 	bl	8002608 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <HAL_ADC_MspInit+0x134>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e6e:	4811      	ldr	r0, [pc, #68]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e70:	f001 f85a 	bl	8001f28 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000e7a:	f7ff fee9 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e82:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e84:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <HAL_ADC_MspInit+0x130>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2012      	movs	r0, #18
 8000e90:	f001 f813 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e94:	2012      	movs	r0, #18
 8000e96:	f001 f82c 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40012000 	.word	0x40012000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	200000cc 	.word	0x200000cc
 8000eb8:	40026410 	.word	0x40026410

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10d      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_TIM_Base_MspInit+0x40>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <HAL_TIM_Base_MspInit+0x40>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <HAL_TIM_Base_MspInit+0x40>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f76:	f001 fb47 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 f951 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <ADC_IRQHandler+0x10>)
 8000ff6:	f000 f9ac 	bl	8001352 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000084 	.word	0x20000084

08001004 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001008:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800100c:	f001 fcb2 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <DMA2_Stream0_IRQHandler+0x10>)
 800101a:	f001 f88b 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000cc 	.word	0x200000cc

08001028 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00a      	b.n	8001050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103a:	f7ff fe2f 	bl	8000c9c <__io_getchar>
 800103e:	4601      	mov	r1, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf0      	blt.n	800103a <_read+0x12>
  }

  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e009      	b.n	8001088 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fded 	bl	8000c5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf1      	blt.n	8001074 <_write+0x12>
  }
  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
  return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_isatty>:

int _isatty(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f003 face 	bl	80046d4 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20020000 	.word	0x20020000
 8001164:	00000400 	.word	0x00000400
 8001168:	200003b4 	.word	0x200003b4
 800116c:	20000508 	.word	0x20000508

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f003 fa8d 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff f9f7 	bl	80005b8 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011d8:	08005344 	.word	0x08005344
  ldr r2, =_sbss
 80011dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011e0:	20000508 	.word	0x20000508

080011e4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <DMA1_Stream0_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fe47 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fd8a 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fe5f 	bl	8001f0e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 fe27 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200003b8 	.word	0x200003b8

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200003b8 	.word	0x200003b8

080012cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e033      	b.n	800134a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd4a 	bl	8000d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001312:	f023 0302 	bic.w	r3, r3, #2
 8001316:	f043 0202 	orr.w	r2, r3, #2
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fb68 	bl	80019f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f023 0303 	bic.w	r3, r3, #3
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
 800133a:	e001      	b.n	8001340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d049      	beq.n	800141c <HAL_ADC_IRQHandler+0xca>
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d046      	beq.n	800141c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d12b      	bne.n	800140c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d127      	bne.n	800140c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d119      	bne.n	800140c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0220 	bic.w	r2, r2, #32
 80013e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f8af 	bl	8000570 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0212 	mvn.w	r2, #18
 800141a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d057      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x190>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d054      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d139      	bne.n	80014d2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001464:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001476:	2b00      	cmp	r3, #0
 8001478:	d12b      	bne.n	80014d2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d124      	bne.n	80014d2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d11d      	bne.n	80014d2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800149a:	2b00      	cmp	r3, #0
 800149c:	d119      	bne.n	80014d2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fc0c 	bl	8001cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 020c 	mvn.w	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d017      	beq.n	8001528 <HAL_ADC_IRQHandler+0x1d6>
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d014      	beq.n	8001528 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10d      	bne.n	8001528 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f925 	bl	8001768 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f06f 0201 	mvn.w	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0320 	and.w	r3, r3, #32
 800152e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001536:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <HAL_ADC_IRQHandler+0x218>
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d012      	beq.n	800156a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	f043 0202 	orr.w	r2, r3, #2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0220 	mvn.w	r2, #32
 8001558:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f90e 	bl	800177c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f06f 0220 	mvn.w	r2, #32
 8001568:	601a      	str	r2, [r3, #0]
  }
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_ADC_Start_DMA+0x1e>
 800158e:	2302      	movs	r3, #2
 8001590:	e0ce      	b.n	8001730 <HAL_ADC_Start_DMA+0x1bc>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d018      	beq.n	80015da <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001738 <HAL_ADC_Start_DMA+0x1c4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a5f      	ldr	r2, [pc, #380]	@ (800173c <HAL_ADC_Start_DMA+0x1c8>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9a      	lsrs	r2, r3, #18
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015cc:	e002      	b.n	80015d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f9      	bne.n	80015ce <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e8:	d107      	bne.n	80015fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	f040 8086 	bne.w	8001716 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001634:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001648:	d106      	bne.n	8001658 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f023 0206 	bic.w	r2, r3, #6
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
 8001656:	e002      	b.n	800165e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001666:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <HAL_ADC_Start_DMA+0x1cc>)
 8001668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166e:	4a35      	ldr	r2, [pc, #212]	@ (8001744 <HAL_ADC_Start_DMA+0x1d0>)
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001676:	4a34      	ldr	r2, [pc, #208]	@ (8001748 <HAL_ADC_Start_DMA+0x1d4>)
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167e:	4a33      	ldr	r2, [pc, #204]	@ (800174c <HAL_ADC_Start_DMA+0x1d8>)
 8001680:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800168a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800169a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	334c      	adds	r3, #76	@ 0x4c
 80016b6:	4619      	mov	r1, r3
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f000 fce2 	bl	8002084 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d129      	bne.n	800172e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	e020      	b.n	800172e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_ADC_Start_DMA+0x1dc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d11b      	bne.n	800172e <HAL_ADC_Start_DMA+0x1ba>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d114      	bne.n	800172e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e00b      	b.n	800172e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f043 0210 	orr.w	r2, r3, #16
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	431bde83 	.word	0x431bde83
 8001740:	40012300 	.word	0x40012300
 8001744:	08001bed 	.word	0x08001bed
 8001748:	08001ca7 	.word	0x08001ca7
 800174c:	08001cc3 	.word	0x08001cc3
 8001750:	40012000 	.word	0x40012000

08001754 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e113      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x244>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d925      	bls.n	8001808 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68d9      	ldr	r1, [r3, #12]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	3b1e      	subs	r3, #30
 80017d2:	2207      	movs	r2, #7
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43da      	mvns	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	400a      	ands	r2, r1
 80017e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68d9      	ldr	r1, [r3, #12]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4403      	add	r3, r0
 80017fa:	3b1e      	subs	r3, #30
 80017fc:	409a      	lsls	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	e022      	b.n	800184e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6919      	ldr	r1, [r3, #16]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	2207      	movs	r2, #7
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	400a      	ands	r2, r1
 800182a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	4603      	mov	r3, r0
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4403      	add	r3, r0
 8001844:	409a      	lsls	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d824      	bhi.n	80018a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	3b05      	subs	r3, #5
 8001868:	221f      	movs	r2, #31
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	400a      	ands	r2, r1
 8001876:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b05      	subs	r3, #5
 8001892:	fa00 f203 	lsl.w	r2, r0, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	@ 0x34
 800189e:	e04c      	b.n	800193a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d824      	bhi.n	80018f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	3b23      	subs	r3, #35	@ 0x23
 80018ba:	221f      	movs	r2, #31
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b23      	subs	r3, #35	@ 0x23
 80018e4:	fa00 f203 	lsl.w	r2, r0, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80018f0:	e023      	b.n	800193a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b41      	subs	r3, #65	@ 0x41
 8001904:	221f      	movs	r2, #31
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b41      	subs	r3, #65	@ 0x41
 800192e:	fa00 f203 	lsl.w	r2, r0, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_ADC_ConfigChannel+0x250>)
 800193c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a28      	ldr	r2, [pc, #160]	@ (80019e4 <HAL_ADC_ConfigChannel+0x254>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d10f      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1d8>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b12      	cmp	r3, #18
 800194e:	d10b      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <HAL_ADC_ConfigChannel+0x254>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12b      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x23a>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <HAL_ADC_ConfigChannel+0x258>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d003      	beq.n	8001984 <HAL_ADC_ConfigChannel+0x1f4>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b11      	cmp	r3, #17
 8001982:	d122      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a11      	ldr	r2, [pc, #68]	@ (80019e8 <HAL_ADC_ConfigChannel+0x258>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d111      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_ADC_ConfigChannel+0x25c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <HAL_ADC_ConfigChannel+0x260>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9a      	lsrs	r2, r3, #18
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	40012000 	.word	0x40012000
 80019e8:	10000012 	.word	0x10000012
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fc:	4b79      	ldr	r3, [pc, #484]	@ (8001be4 <ADC_Init+0x1f0>)
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	021a      	lsls	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	4a58      	ldr	r2, [pc, #352]	@ (8001be8 <ADC_Init+0x1f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e00f      	b.n	8001af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0202 	bic.w	r2, r2, #2
 8001b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	035a      	lsls	r2, r3, #13
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e007      	b.n	8001b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	051a      	lsls	r2, r3, #20
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001baa:	025a      	lsls	r2, r3, #9
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6899      	ldr	r1, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	029a      	lsls	r2, r3, #10
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40012300 	.word	0x40012300
 8001be8:	0f000001 	.word	0x0f000001

08001bec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d13c      	bne.n	8001c80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d12b      	bne.n	8001c78 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d127      	bne.n	8001c78 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d119      	bne.n	8001c78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0220 	bic.w	r2, r2, #32
 8001c52:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7fe fc79 	bl	8000570 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c7e:	e00e      	b.n	8001c9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff fd75 	bl	800177c <HAL_ADC_ErrorCallback>
}
 8001c92:	e004      	b.n	8001c9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fd4d 	bl	8001754 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	@ 0x40
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fd4a 	bl	800177c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	@ (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff f9be 	bl	80012b4 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e099      	b.n	8002078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	e00f      	b.n	8001f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff f9a5 	bl	80012b4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d908      	bls.n	8001f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e078      	b.n	8002078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e8      	bne.n	8001f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <HAL_DMA_Init+0x158>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	2b04      	cmp	r3, #4
 8002018:	d117      	bne.n	800204a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa6f 	bl	8002510 <DMA_CheckFifoParam>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002046:	2301      	movs	r3, #1
 8002048:	e016      	b.n	8002078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa26 	bl	80024a4 <DMA_CalcBaseAndBitshift>
 8002058:	4603      	mov	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	223f      	movs	r2, #63	@ 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	f010803f 	.word	0xf010803f

08002084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Start_IT+0x26>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e040      	b.n	800212c <HAL_DMA_Start_IT+0xa8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12f      	bne.n	800211e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9b8 	bl	8002448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	223f      	movs	r2, #63	@ 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0216 	orr.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e005      	b.n	800212a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800212a:	7dfb      	ldrb	r3, [r7, #23]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002140:	4b8e      	ldr	r3, [pc, #568]	@ (800237c <HAL_DMA_IRQHandler+0x248>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a8e      	ldr	r2, [pc, #568]	@ (8002380 <HAL_DMA_IRQHandler+0x24c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	2208      	movs	r2, #8
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2208      	movs	r2, #8
 800218e:	409a      	lsls	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	2204      	movs	r2, #4
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	2210      	movs	r2, #16
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d043      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03c      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	2210      	movs	r2, #16
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d024      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e01f      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e016      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a8:	2220      	movs	r2, #32
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 808f 	beq.w	80023d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8087 	beq.w	80023d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	2220      	movs	r2, #32
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d136      	bne.n	800234c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0216 	bic.w	r2, r2, #22
 80022ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_DMA_IRQHandler+0x1da>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002322:	223f      	movs	r2, #63	@ 0x3f
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233e:	2b00      	cmp	r3, #0
 8002340:	d07e      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
        }
        return;
 800234a:	e079      	b.n	8002440 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01d      	beq.n	8002396 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236c:	2b00      	cmp	r3, #0
 800236e:	d031      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e02c      	b.n	80023d4 <HAL_DMA_IRQHandler+0x2a0>
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000
 8002380:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d023      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
 8002394:	e01e      	b.n	80023d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10f      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d032      	beq.n	8002442 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d022      	beq.n	800242e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2205      	movs	r2, #5
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	d307      	bcc.n	800241c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f2      	bne.n	8002400 <HAL_DMA_IRQHandler+0x2cc>
 800241a:	e000      	b.n	800241e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800241c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3
 800243e:	e000      	b.n	8002442 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002440:	bf00      	nop
    }
  }
}
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b40      	cmp	r3, #64	@ 0x40
 8002474:	d108      	bne.n	8002488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002486:	e007      	b.n	8002498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3b10      	subs	r3, #16
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <DMA_CalcBaseAndBitshift+0x64>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024be:	4a13      	ldr	r2, [pc, #76]	@ (800250c <DMA_CalcBaseAndBitshift+0x68>)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d909      	bls.n	80024e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024e4:	e007      	b.n	80024f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	aaaaaaab 	.word	0xaaaaaaab
 800250c:	080052f8 	.word	0x080052f8

08002510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d856      	bhi.n	80025de <DMA_CheckFifoParam+0xce>
 8002530:	a201      	add	r2, pc, #4	@ (adr r2, 8002538 <DMA_CheckFifoParam+0x28>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800255b 	.word	0x0800255b
 8002540:	08002549 	.word	0x08002549
 8002544:	080025df 	.word	0x080025df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d046      	beq.n	80025e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e043      	b.n	80025e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002562:	d140      	bne.n	80025e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e03d      	b.n	80025e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002572:	d121      	bne.n	80025b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d837      	bhi.n	80025ea <DMA_CheckFifoParam+0xda>
 800257a:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <DMA_CheckFifoParam+0x70>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002597 	.word	0x08002597
 8002588:	08002591 	.word	0x08002591
 800258c:	080025a9 	.word	0x080025a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e030      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d025      	beq.n	80025ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e022      	b.n	80025ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025b0:	d11f      	bne.n	80025f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b6:	e01c      	b.n	80025f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d903      	bls.n	80025c6 <DMA_CheckFifoParam+0xb6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c4:	e018      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ca:	e015      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e00b      	b.n	80025f6 <DMA_CheckFifoParam+0xe6>
      break;
 80025de:	bf00      	nop
 80025e0:	e00a      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e008      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e006      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e004      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
    }
  } 
  
  return status; 
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e159      	b.n	80028d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8148 	bne.w	80028d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	2b02      	cmp	r3, #2
 8002658:	d130      	bne.n	80026bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b57      	ldr	r3, [pc, #348]	@ (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800279c:	6453      	str	r3, [r2, #68]	@ 0x44
 800279e:	4b54      	ldr	r3, [pc, #336]	@ (80028f0 <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a52      	ldr	r2, [pc, #328]	@ (80028f4 <HAL_GPIO_Init+0x2ec>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a49      	ldr	r2, [pc, #292]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x202>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a48      	ldr	r2, [pc, #288]	@ (80028fc <HAL_GPIO_Init+0x2f4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x1fe>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a47      	ldr	r2, [pc, #284]	@ (8002900 <HAL_GPIO_Init+0x2f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x1fa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a46      	ldr	r2, [pc, #280]	@ (8002904 <HAL_GPIO_Init+0x2fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x1f6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <HAL_GPIO_Init+0x300>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x1f2>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x204>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	@ (80028f4 <HAL_GPIO_Init+0x2ec>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b38      	ldr	r3, [pc, #224]	@ (800290c <HAL_GPIO_Init+0x304>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a2f      	ldr	r2, [pc, #188]	@ (800290c <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <HAL_GPIO_Init+0x304>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a24      	ldr	r2, [pc, #144]	@ (800290c <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <HAL_GPIO_Init+0x304>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a2:	4a1a      	ldr	r2, [pc, #104]	@ (800290c <HAL_GPIO_Init+0x304>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a8:	4b18      	ldr	r3, [pc, #96]	@ (800290c <HAL_GPIO_Init+0x304>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028cc:	4a0f      	ldr	r2, [pc, #60]	@ (800290c <HAL_GPIO_Init+0x304>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f aea2 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	@ 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e001      	b.n	8002932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fdf6 	bl	8000584 <HAL_GPIO_EXTI_Callback>
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e267      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d075      	beq.n	8002aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c2:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b82      	ldr	r3, [pc, #520]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4b7e      	ldr	r3, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05b      	beq.n	8002aac <HAL_RCC_OscConfig+0x108>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d157      	bne.n	8002aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e242      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x74>
 8002a0a:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b70      	ldr	r3, [pc, #448]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6f      	ldr	r2, [pc, #444]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6c      	ldr	r2, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	4b69      	ldr	r3, [pc, #420]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a68      	ldr	r2, [pc, #416]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fc2a 	bl	80012b4 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fc26 	bl	80012b4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e207      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc16 	bl	80012b4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fc12 	bl	80012b4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1f3      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b51      	ldr	r3, [pc, #324]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe8>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aba:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b44      	ldr	r3, [pc, #272]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c7      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b34      	ldr	r3, [pc, #208]	@ (8002be8 <HAL_RCC_OscConfig+0x244>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fbcb 	bl	80012b4 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe fbc7 	bl	80012b4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1a8      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x244>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fbaa 	bl	80012b4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fba6 	bl	80012b4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e187      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x248>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fb8a 	bl	80012b4 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fb86 	bl	80012b4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e167      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x200>
 8002bc2:	e01b      	b.n	8002bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x248>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe fb73 	bl	80012b4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e00e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fb6f 	bl	80012b4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d907      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e150      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470000 	.word	0x42470000
 8002bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ea      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8097 	beq.w	8002d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b81      	ldr	r3, [pc, #516]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a7c      	ldr	r2, [pc, #496]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b77      	ldr	r3, [pc, #476]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b74      	ldr	r3, [pc, #464]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a73      	ldr	r2, [pc, #460]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fe fb2f 	bl	80012b4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7fe fb2b 	bl	80012b4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e10c      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2ea>
 8002c80:	4b64      	ldr	r3, [pc, #400]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a63      	ldr	r2, [pc, #396]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x324>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x30c>
 8002c96:	4b5f      	ldr	r3, [pc, #380]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x324>
 8002cb0:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b55      	ldr	r3, [pc, #340]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a54      	ldr	r2, [pc, #336]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe faf0 	bl	80012b4 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe faec 	bl	80012b4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0cb      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x334>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fada 	bl	80012b4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fad6 	bl	80012b4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0b5      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ee      	bne.n	8002d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	4a38      	ldr	r2, [pc, #224]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a1 	beq.w	8002e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d42:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d05c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d141      	bne.n	8002dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe faaa 	bl	80012b4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe faa6 	bl	80012b4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e087      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	491b      	ldr	r1, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fa7f 	bl	80012b4 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fa7b 	bl	80012b4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e05c      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x416>
 8002dd8:	e054      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fa68 	bl	80012b4 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fa64 	bl	80012b4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e045      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x444>
 8002e06:	e03d      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e038      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_RCC_OscConfig+0x4ec>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d028      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d121      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d11a      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d111      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0cc      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b68      	ldr	r3, [pc, #416]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b65      	ldr	r3, [pc, #404]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b63      	ldr	r3, [pc, #396]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee8:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a58      	ldr	r2, [pc, #352]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a52      	ldr	r2, [pc, #328]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b50      	ldr	r3, [pc, #320]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	494d      	ldr	r1, [pc, #308]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e067      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4934      	ldr	r1, [pc, #208]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fe f996 	bl	80012b4 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe f992 	bl	80012b4 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d20c      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e032      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4916      	ldr	r1, [pc, #88]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	490e      	ldr	r1, [pc, #56]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301a:	f000 f821 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490a      	ldr	r1, [pc, #40]	@ (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f8f6 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00
 8003050:	40023800 	.word	0x40023800
 8003054:	080052e0 	.word	0x080052e0
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b094      	sub	sp, #80	@ 0x50
 8003066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	647b      	str	r3, [r7, #68]	@ 0x44
 800306c:	2300      	movs	r3, #0
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003070:	2300      	movs	r3, #0
 8003072:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003078:	4b79      	ldr	r3, [pc, #484]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d00d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003084:	2b08      	cmp	r3, #8
 8003086:	f200 80e1 	bhi.w	800324c <HAL_RCC_GetSysClockFreq+0x1ec>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3a>
 8003092:	e0db      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b73      	ldr	r3, [pc, #460]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x204>)
 8003096:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003098:	e0db      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309a:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x208>)
 800309c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309e:	e0d8      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d063      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	2200      	movs	r2, #0
 80030be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030d2:	4622      	mov	r2, r4
 80030d4:	462b      	mov	r3, r5
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	0159      	lsls	r1, r3, #5
 80030e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e4:	0150      	lsls	r0, r2, #5
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4621      	mov	r1, r4
 80030ec:	1a51      	subs	r1, r2, r1
 80030ee:	6139      	str	r1, [r7, #16]
 80030f0:	4629      	mov	r1, r5
 80030f2:	eb63 0301 	sbc.w	r3, r3, r1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003104:	4659      	mov	r1, fp
 8003106:	018b      	lsls	r3, r1, #6
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310e:	4651      	mov	r1, sl
 8003110:	018a      	lsls	r2, r1, #6
 8003112:	4651      	mov	r1, sl
 8003114:	ebb2 0801 	subs.w	r8, r2, r1
 8003118:	4659      	mov	r1, fp
 800311a:	eb63 0901 	sbc.w	r9, r3, r1
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003132:	4690      	mov	r8, r2
 8003134:	4699      	mov	r9, r3
 8003136:	4623      	mov	r3, r4
 8003138:	eb18 0303 	adds.w	r3, r8, r3
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	462b      	mov	r3, r5
 8003140:	eb49 0303 	adc.w	r3, r9, r3
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003152:	4629      	mov	r1, r5
 8003154:	024b      	lsls	r3, r1, #9
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315c:	4621      	mov	r1, r4
 800315e:	024a      	lsls	r2, r1, #9
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003170:	f7fd f886 	bl	8000280 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317c:	e058      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b38      	ldr	r3, [pc, #224]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	4618      	mov	r0, r3
 8003188:	4611      	mov	r1, r2
 800318a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0159      	lsls	r1, r3, #5
 80031a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031aa:	0150      	lsls	r0, r2, #5
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4641      	mov	r1, r8
 80031b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031b6:	4649      	mov	r1, r9
 80031b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d0:	ebb2 040a 	subs.w	r4, r2, sl
 80031d4:	eb63 050b 	sbc.w	r5, r3, fp
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	00eb      	lsls	r3, r5, #3
 80031e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e6:	00e2      	lsls	r2, r4, #3
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	18e3      	adds	r3, r4, r3
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003206:	4629      	mov	r1, r5
 8003208:	028b      	lsls	r3, r1, #10
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003210:	4621      	mov	r1, r4
 8003212:	028a      	lsls	r2, r1, #10
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	61fa      	str	r2, [r7, #28]
 8003220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003224:	f7fd f82c 	bl	8000280 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003254:	4618      	mov	r0, r3
 8003256:	3750      	adds	r7, #80	@ 0x50
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200

0800326c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003270:	4b03      	ldr	r3, [pc, #12]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000000 	.word	0x20000000

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003288:	f7ff fff0 	bl	800326c <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	080052f0 	.word	0x080052f0

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff ffdc 	bl	800326c <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	080052f0 	.word	0x080052f0

080032d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e041      	b.n	800336a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fdde 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 f950 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d001      	beq.n	800338c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e03c      	b.n	8003406 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <HAL_TIM_Base_Start+0xa0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_TIM_Base_Start+0x5c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a6:	d013      	beq.n	80033d0 <HAL_TIM_Base_Start+0x5c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003418 <HAL_TIM_Base_Start+0xa4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_TIM_Base_Start+0x5c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a19      	ldr	r2, [pc, #100]	@ (800341c <HAL_TIM_Base_Start+0xa8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_Base_Start+0x5c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a17      	ldr	r2, [pc, #92]	@ (8003420 <HAL_TIM_Base_Start+0xac>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_Base_Start+0x5c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <HAL_TIM_Base_Start+0xb0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d010      	beq.n	8003404 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	e007      	b.n	8003404 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40014000 	.word	0x40014000

08003428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x1c>
 8003440:	2302      	movs	r3, #2
 8003442:	e0b4      	b.n	80035ae <HAL_TIM_ConfigClockSource+0x186>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800346a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800347c:	d03e      	beq.n	80034fc <HAL_TIM_ConfigClockSource+0xd4>
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003482:	f200 8087 	bhi.w	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 8003486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348a:	f000 8086 	beq.w	800359a <HAL_TIM_ConfigClockSource+0x172>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003492:	d87f      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b70      	cmp	r3, #112	@ 0x70
 8003496:	d01a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xa6>
 8003498:	2b70      	cmp	r3, #112	@ 0x70
 800349a:	d87b      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b60      	cmp	r3, #96	@ 0x60
 800349e:	d050      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x11a>
 80034a0:	2b60      	cmp	r3, #96	@ 0x60
 80034a2:	d877      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b50      	cmp	r3, #80	@ 0x50
 80034a6:	d03c      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0xfa>
 80034a8:	2b50      	cmp	r3, #80	@ 0x50
 80034aa:	d873      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b40      	cmp	r3, #64	@ 0x40
 80034ae:	d058      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x13a>
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d86f      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b30      	cmp	r3, #48	@ 0x30
 80034b6:	d064      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034b8:	2b30      	cmp	r3, #48	@ 0x30
 80034ba:	d86b      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d060      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d867      	bhi.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05c      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d05a      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	e062      	b.n	8003594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034de:	f000 f971 	bl	80037c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	609a      	str	r2, [r3, #8]
      break;
 80034fa:	e04f      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800350c:	f000 f95a 	bl	80037c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800351e:	609a      	str	r2, [r3, #8]
      break;
 8003520:	e03c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	461a      	mov	r2, r3
 8003530:	f000 f8ce 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2150      	movs	r1, #80	@ 0x50
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f927 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003540:	e02c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800354e:	461a      	mov	r2, r3
 8003550:	f000 f8ed 	bl	800372e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2160      	movs	r1, #96	@ 0x60
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f917 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003560:	e01c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356e:	461a      	mov	r2, r3
 8003570:	f000 f8ae 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2140      	movs	r1, #64	@ 0x40
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f907 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003580:	e00c      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f000 f8fe 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003592:	e003      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      break;
 8003598:	e000      	b.n	800359c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800359a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3a      	ldr	r2, [pc, #232]	@ (80036b4 <TIM_Base_SetConfig+0xfc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00f      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d6:	d00b      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a37      	ldr	r2, [pc, #220]	@ (80036b8 <TIM_Base_SetConfig+0x100>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a36      	ldr	r2, [pc, #216]	@ (80036bc <TIM_Base_SetConfig+0x104>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a35      	ldr	r2, [pc, #212]	@ (80036c0 <TIM_Base_SetConfig+0x108>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2b      	ldr	r2, [pc, #172]	@ (80036b4 <TIM_Base_SetConfig+0xfc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a28      	ldr	r2, [pc, #160]	@ (80036b8 <TIM_Base_SetConfig+0x100>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a27      	ldr	r2, [pc, #156]	@ (80036bc <TIM_Base_SetConfig+0x104>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a26      	ldr	r2, [pc, #152]	@ (80036c0 <TIM_Base_SetConfig+0x108>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a25      	ldr	r2, [pc, #148]	@ (80036c4 <TIM_Base_SetConfig+0x10c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a24      	ldr	r2, [pc, #144]	@ (80036c8 <TIM_Base_SetConfig+0x110>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a23      	ldr	r2, [pc, #140]	@ (80036cc <TIM_Base_SetConfig+0x114>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0e      	ldr	r2, [pc, #56]	@ (80036b4 <TIM_Base_SetConfig+0xfc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	611a      	str	r2, [r3, #16]
  }
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800

080036d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f023 0201 	bic.w	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 030a 	bic.w	r3, r3, #10
 800370c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372e:	b480      	push	{r7}
 8003730:	b087      	sub	sp, #28
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 0210 	bic.w	r2, r3, #16
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	031b      	lsls	r3, r3, #12
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800376a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f043 0307 	orr.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	021a      	lsls	r2, r3, #8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003818:	2302      	movs	r3, #2
 800381a:	e050      	b.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003868:	d013      	beq.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a15      	ldr	r2, [pc, #84]	@ (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d10c      	bne.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40014000 	.word	0x40014000

080038e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e042      	b.n	8003978 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fafa 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	@ 0x24
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa09 	bl	8003d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	d175      	bne.n	8003a8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_UART_Transmit+0x2c>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e06e      	b.n	8003a8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2221      	movs	r2, #33	@ 0x21
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039be:	f7fd fc79 	bl	80012b4 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d8:	d108      	bne.n	80039ec <HAL_UART_Transmit+0x6c>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d104      	bne.n	80039ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e003      	b.n	80039f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039f4:	e02e      	b.n	8003a54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2180      	movs	r1, #128	@ 0x80
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f8df 	bl	8003bc4 <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e03a      	b.n	8003a8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3302      	adds	r3, #2
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	e007      	b.n	8003a46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1cb      	bne.n	80039f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2140      	movs	r1, #64	@ 0x40
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f8ab 	bl	8003bc4 <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e006      	b.n	8003a8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b08a      	sub	sp, #40	@ 0x28
 8003a9a:	af02      	add	r7, sp, #8
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	f040 8081 	bne.w	8003bba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_UART_Receive+0x2e>
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e079      	b.n	8003bbc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2222      	movs	r2, #34	@ 0x22
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003adc:	f7fd fbea 	bl	80012b4 <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af6:	d108      	bne.n	8003b0a <HAL_UART_Receive+0x74>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e003      	b.n	8003b12 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b12:	e047      	b.n	8003ba4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f850 	bl	8003bc4 <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e042      	b.n	8003bbc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10c      	bne.n	8003b56 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	3302      	adds	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e01f      	b.n	8003b96 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5e:	d007      	beq.n	8003b70 <HAL_UART_Receive+0xda>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_UART_Receive+0xe8>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e008      	b.n	8003b90 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1b2      	bne.n	8003b14 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd4:	e03b      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d037      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fd fb69 	bl	80012b4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e03a      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b80      	cmp	r3, #128	@ 0x80
 8003c0a:	d020      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d01d      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d116      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f81d 	bl	8003c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00f      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4013      	ands	r3, r2
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	bf0c      	ite	eq
 8003c5e:	2301      	moveq	r3, #1
 8003c60:	2300      	movne	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d0b4      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b095      	sub	sp, #84	@ 0x54
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e5      	bne.n	8003c7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d119      	bne.n	8003d22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f023 0310 	bic.w	r3, r3, #16
 8003d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0e:	61ba      	str	r2, [r7, #24]
 8003d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6979      	ldr	r1, [r7, #20]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e5      	bne.n	8003cee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d30:	bf00      	nop
 8003d32:	3754      	adds	r7, #84	@ 0x54
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d40:	b0c0      	sub	sp, #256	@ 0x100
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	68d9      	ldr	r1, [r3, #12]
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	ea40 0301 	orr.w	r3, r0, r1
 8003d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d94:	f021 010c 	bic.w	r1, r1, #12
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003da2:	430b      	orrs	r3, r1
 8003da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	6999      	ldr	r1, [r3, #24]
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	ea40 0301 	orr.w	r3, r0, r1
 8003dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b8f      	ldr	r3, [pc, #572]	@ (8004008 <UART_SetConfig+0x2cc>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d005      	beq.n	8003ddc <UART_SetConfig+0xa0>
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800400c <UART_SetConfig+0x2d0>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d104      	bne.n	8003de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7ff fa66 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8003de0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003de4:	e003      	b.n	8003dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de6:	f7ff fa4d 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8003dea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df8:	f040 810c 	bne.w	8004014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	1891      	adds	r1, r2, r2
 8003e14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e16:	415b      	adcs	r3, r3
 8003e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e1e:	4621      	mov	r1, r4
 8003e20:	eb12 0801 	adds.w	r8, r2, r1
 8003e24:	4629      	mov	r1, r5
 8003e26:	eb43 0901 	adc.w	r9, r3, r1
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3e:	4690      	mov	r8, r2
 8003e40:	4699      	mov	r9, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	eb18 0303 	adds.w	r3, r8, r3
 8003e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	eb49 0303 	adc.w	r3, r9, r3
 8003e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	18db      	adds	r3, r3, r3
 8003e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e70:	4613      	mov	r3, r2
 8003e72:	eb42 0303 	adc.w	r3, r2, r3
 8003e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e80:	f7fc f9fe 	bl	8000280 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <UART_SetConfig+0x2d4>)
 8003e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	011c      	lsls	r4, r3, #4
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eac:	415b      	adcs	r3, r3
 8003eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eba:	4649      	mov	r1, r9
 8003ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed4:	4692      	mov	sl, r2
 8003ed6:	469b      	mov	fp, r3
 8003ed8:	4643      	mov	r3, r8
 8003eda:	eb1a 0303 	adds.w	r3, sl, r3
 8003ede:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f00:	460b      	mov	r3, r1
 8003f02:	18db      	adds	r3, r3, r3
 8003f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f06:	4613      	mov	r3, r2
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f16:	f7fc f9b3 	bl	8000280 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4b3b      	ldr	r3, [pc, #236]	@ (8004010 <UART_SetConfig+0x2d4>)
 8003f22:	fba3 2301 	umull	r2, r3, r3, r1
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2264      	movs	r2, #100	@ 0x64
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	1acb      	subs	r3, r1, r3
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f36:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <UART_SetConfig+0x2d4>)
 8003f38:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f44:	441c      	add	r4, r3
 8003f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	1891      	adds	r1, r2, r2
 8003f5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f60:	415b      	adcs	r3, r3
 8003f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f68:	4641      	mov	r1, r8
 8003f6a:	1851      	adds	r1, r2, r1
 8003f6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f6e:	4649      	mov	r1, r9
 8003f70:	414b      	adcs	r3, r1
 8003f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f80:	4659      	mov	r1, fp
 8003f82:	00cb      	lsls	r3, r1, #3
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	00ca      	lsls	r2, r1, #3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	4642      	mov	r2, r8
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f9c:	464b      	mov	r3, r9
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	18db      	adds	r3, r3, r3
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	eb42 0303 	adc.w	r3, r2, r3
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fd2:	f7fc f955 	bl	8000280 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <UART_SetConfig+0x2d4>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	@ 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	3332      	adds	r3, #50	@ 0x32
 8003fee:	4a08      	ldr	r2, [pc, #32]	@ (8004010 <UART_SetConfig+0x2d4>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 0207 	and.w	r2, r3, #7
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4422      	add	r2, r4
 8004002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004004:	e106      	b.n	8004214 <UART_SetConfig+0x4d8>
 8004006:	bf00      	nop
 8004008:	40011000 	.word	0x40011000
 800400c:	40011400 	.word	0x40011400
 8004010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004026:	4642      	mov	r2, r8
 8004028:	464b      	mov	r3, r9
 800402a:	1891      	adds	r1, r2, r2
 800402c:	6239      	str	r1, [r7, #32]
 800402e:	415b      	adcs	r3, r3
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
 8004032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004036:	4641      	mov	r1, r8
 8004038:	1854      	adds	r4, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb43 0501 	adc.w	r5, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	00eb      	lsls	r3, r5, #3
 800404a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404e:	00e2      	lsls	r2, r4, #3
 8004050:	4614      	mov	r4, r2
 8004052:	461d      	mov	r5, r3
 8004054:	4643      	mov	r3, r8
 8004056:	18e3      	adds	r3, r4, r3
 8004058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800405c:	464b      	mov	r3, r9
 800405e:	eb45 0303 	adc.w	r3, r5, r3
 8004062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004072:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004082:	4629      	mov	r1, r5
 8004084:	008b      	lsls	r3, r1, #2
 8004086:	4621      	mov	r1, r4
 8004088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408c:	4621      	mov	r1, r4
 800408e:	008a      	lsls	r2, r1, #2
 8004090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004094:	f7fc f8f4 	bl	8000280 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4b60      	ldr	r3, [pc, #384]	@ (8004220 <UART_SetConfig+0x4e4>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	011c      	lsls	r4, r3, #4
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	61b9      	str	r1, [r7, #24]
 80040c0:	415b      	adcs	r3, r3
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6139      	str	r1, [r7, #16]
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040fc:	464b      	mov	r3, r9
 80040fe:	460a      	mov	r2, r1
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004112:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004120:	4649      	mov	r1, r9
 8004122:	008b      	lsls	r3, r1, #2
 8004124:	4641      	mov	r1, r8
 8004126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800412a:	4641      	mov	r1, r8
 800412c:	008a      	lsls	r2, r1, #2
 800412e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004132:	f7fc f8a5 	bl	8000280 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4611      	mov	r1, r2
 800413c:	4b38      	ldr	r3, [pc, #224]	@ (8004220 <UART_SetConfig+0x4e4>)
 800413e:	fba3 2301 	umull	r2, r3, r3, r1
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2264      	movs	r2, #100	@ 0x64
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	1acb      	subs	r3, r1, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	@ 0x32
 8004150:	4a33      	ldr	r2, [pc, #204]	@ (8004220 <UART_SetConfig+0x4e4>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800415c:	441c      	add	r4, r3
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004162:	2200      	movs	r2, #0
 8004164:	673b      	str	r3, [r7, #112]	@ 0x70
 8004166:	677a      	str	r2, [r7, #116]	@ 0x74
 8004168:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	415b      	adcs	r3, r3
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800417c:	4641      	mov	r1, r8
 800417e:	1851      	adds	r1, r2, r1
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	4649      	mov	r1, r9
 8004184:	414b      	adcs	r3, r1
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004194:	4659      	mov	r1, fp
 8004196:	00cb      	lsls	r3, r1, #3
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419e:	4651      	mov	r1, sl
 80041a0:	00ca      	lsls	r2, r1, #3
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	4642      	mov	r2, r8
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ae:	464b      	mov	r3, r9
 80041b0:	460a      	mov	r2, r1
 80041b2:	eb42 0303 	adc.w	r3, r2, r3
 80041b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041d0:	4649      	mov	r1, r9
 80041d2:	008b      	lsls	r3, r1, #2
 80041d4:	4641      	mov	r1, r8
 80041d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041da:	4641      	mov	r1, r8
 80041dc:	008a      	lsls	r2, r1, #2
 80041de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041e2:	f7fc f84d 	bl	8000280 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <UART_SetConfig+0x4e4>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	@ 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	3332      	adds	r3, #50	@ 0x32
 80041fe:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <UART_SetConfig+0x4e4>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4422      	add	r2, r4
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004220:	51eb851f 	.word	0x51eb851f

08004224 <std>:
 8004224:	2300      	movs	r3, #0
 8004226:	b510      	push	{r4, lr}
 8004228:	4604      	mov	r4, r0
 800422a:	e9c0 3300 	strd	r3, r3, [r0]
 800422e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004232:	6083      	str	r3, [r0, #8]
 8004234:	8181      	strh	r1, [r0, #12]
 8004236:	6643      	str	r3, [r0, #100]	@ 0x64
 8004238:	81c2      	strh	r2, [r0, #14]
 800423a:	6183      	str	r3, [r0, #24]
 800423c:	4619      	mov	r1, r3
 800423e:	2208      	movs	r2, #8
 8004240:	305c      	adds	r0, #92	@ 0x5c
 8004242:	f000 f9f9 	bl	8004638 <memset>
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <std+0x58>)
 8004248:	6263      	str	r3, [r4, #36]	@ 0x24
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <std+0x5c>)
 800424c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <std+0x60>)
 8004250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <std+0x64>)
 8004254:	6323      	str	r3, [r4, #48]	@ 0x30
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <std+0x68>)
 8004258:	6224      	str	r4, [r4, #32]
 800425a:	429c      	cmp	r4, r3
 800425c:	d006      	beq.n	800426c <std+0x48>
 800425e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004262:	4294      	cmp	r4, r2
 8004264:	d002      	beq.n	800426c <std+0x48>
 8004266:	33d0      	adds	r3, #208	@ 0xd0
 8004268:	429c      	cmp	r4, r3
 800426a:	d105      	bne.n	8004278 <std+0x54>
 800426c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004274:	f000 ba58 	b.w	8004728 <__retarget_lock_init_recursive>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	bf00      	nop
 800427c:	08004489 	.word	0x08004489
 8004280:	080044ab 	.word	0x080044ab
 8004284:	080044e3 	.word	0x080044e3
 8004288:	08004507 	.word	0x08004507
 800428c:	200003bc 	.word	0x200003bc

08004290 <stdio_exit_handler>:
 8004290:	4a02      	ldr	r2, [pc, #8]	@ (800429c <stdio_exit_handler+0xc>)
 8004292:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <stdio_exit_handler+0x10>)
 8004294:	4803      	ldr	r0, [pc, #12]	@ (80042a4 <stdio_exit_handler+0x14>)
 8004296:	f000 b869 	b.w	800436c <_fwalk_sglue>
 800429a:	bf00      	nop
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	08004fc9 	.word	0x08004fc9
 80042a4:	2000001c 	.word	0x2000001c

080042a8 <cleanup_stdio>:
 80042a8:	6841      	ldr	r1, [r0, #4]
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <cleanup_stdio+0x34>)
 80042ac:	4299      	cmp	r1, r3
 80042ae:	b510      	push	{r4, lr}
 80042b0:	4604      	mov	r4, r0
 80042b2:	d001      	beq.n	80042b8 <cleanup_stdio+0x10>
 80042b4:	f000 fe88 	bl	8004fc8 <_fflush_r>
 80042b8:	68a1      	ldr	r1, [r4, #8]
 80042ba:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <cleanup_stdio+0x38>)
 80042bc:	4299      	cmp	r1, r3
 80042be:	d002      	beq.n	80042c6 <cleanup_stdio+0x1e>
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fe81 	bl	8004fc8 <_fflush_r>
 80042c6:	68e1      	ldr	r1, [r4, #12]
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <cleanup_stdio+0x3c>)
 80042ca:	4299      	cmp	r1, r3
 80042cc:	d004      	beq.n	80042d8 <cleanup_stdio+0x30>
 80042ce:	4620      	mov	r0, r4
 80042d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d4:	f000 be78 	b.w	8004fc8 <_fflush_r>
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	bf00      	nop
 80042dc:	200003bc 	.word	0x200003bc
 80042e0:	20000424 	.word	0x20000424
 80042e4:	2000048c 	.word	0x2000048c

080042e8 <global_stdio_init.part.0>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <global_stdio_init.part.0+0x30>)
 80042ec:	4c0b      	ldr	r4, [pc, #44]	@ (800431c <global_stdio_init.part.0+0x34>)
 80042ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <global_stdio_init.part.0+0x38>)
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	4620      	mov	r0, r4
 80042f4:	2200      	movs	r2, #0
 80042f6:	2104      	movs	r1, #4
 80042f8:	f7ff ff94 	bl	8004224 <std>
 80042fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004300:	2201      	movs	r2, #1
 8004302:	2109      	movs	r1, #9
 8004304:	f7ff ff8e 	bl	8004224 <std>
 8004308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800430c:	2202      	movs	r2, #2
 800430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004312:	2112      	movs	r1, #18
 8004314:	f7ff bf86 	b.w	8004224 <std>
 8004318:	200004f4 	.word	0x200004f4
 800431c:	200003bc 	.word	0x200003bc
 8004320:	08004291 	.word	0x08004291

08004324 <__sfp_lock_acquire>:
 8004324:	4801      	ldr	r0, [pc, #4]	@ (800432c <__sfp_lock_acquire+0x8>)
 8004326:	f000 ba00 	b.w	800472a <__retarget_lock_acquire_recursive>
 800432a:	bf00      	nop
 800432c:	200004fd 	.word	0x200004fd

08004330 <__sfp_lock_release>:
 8004330:	4801      	ldr	r0, [pc, #4]	@ (8004338 <__sfp_lock_release+0x8>)
 8004332:	f000 b9fb 	b.w	800472c <__retarget_lock_release_recursive>
 8004336:	bf00      	nop
 8004338:	200004fd 	.word	0x200004fd

0800433c <__sinit>:
 800433c:	b510      	push	{r4, lr}
 800433e:	4604      	mov	r4, r0
 8004340:	f7ff fff0 	bl	8004324 <__sfp_lock_acquire>
 8004344:	6a23      	ldr	r3, [r4, #32]
 8004346:	b11b      	cbz	r3, 8004350 <__sinit+0x14>
 8004348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434c:	f7ff bff0 	b.w	8004330 <__sfp_lock_release>
 8004350:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <__sinit+0x28>)
 8004352:	6223      	str	r3, [r4, #32]
 8004354:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <__sinit+0x2c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f5      	bne.n	8004348 <__sinit+0xc>
 800435c:	f7ff ffc4 	bl	80042e8 <global_stdio_init.part.0>
 8004360:	e7f2      	b.n	8004348 <__sinit+0xc>
 8004362:	bf00      	nop
 8004364:	080042a9 	.word	0x080042a9
 8004368:	200004f4 	.word	0x200004f4

0800436c <_fwalk_sglue>:
 800436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004370:	4607      	mov	r7, r0
 8004372:	4688      	mov	r8, r1
 8004374:	4614      	mov	r4, r2
 8004376:	2600      	movs	r6, #0
 8004378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800437c:	f1b9 0901 	subs.w	r9, r9, #1
 8004380:	d505      	bpl.n	800438e <_fwalk_sglue+0x22>
 8004382:	6824      	ldr	r4, [r4, #0]
 8004384:	2c00      	cmp	r4, #0
 8004386:	d1f7      	bne.n	8004378 <_fwalk_sglue+0xc>
 8004388:	4630      	mov	r0, r6
 800438a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d907      	bls.n	80043a4 <_fwalk_sglue+0x38>
 8004394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004398:	3301      	adds	r3, #1
 800439a:	d003      	beq.n	80043a4 <_fwalk_sglue+0x38>
 800439c:	4629      	mov	r1, r5
 800439e:	4638      	mov	r0, r7
 80043a0:	47c0      	blx	r8
 80043a2:	4306      	orrs	r6, r0
 80043a4:	3568      	adds	r5, #104	@ 0x68
 80043a6:	e7e9      	b.n	800437c <_fwalk_sglue+0x10>

080043a8 <iprintf>:
 80043a8:	b40f      	push	{r0, r1, r2, r3}
 80043aa:	b507      	push	{r0, r1, r2, lr}
 80043ac:	4906      	ldr	r1, [pc, #24]	@ (80043c8 <iprintf+0x20>)
 80043ae:	ab04      	add	r3, sp, #16
 80043b0:	6808      	ldr	r0, [r1, #0]
 80043b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b6:	6881      	ldr	r1, [r0, #8]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	f000 fadb 	bl	8004974 <_vfiprintf_r>
 80043be:	b003      	add	sp, #12
 80043c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043c4:	b004      	add	sp, #16
 80043c6:	4770      	bx	lr
 80043c8:	20000018 	.word	0x20000018

080043cc <_puts_r>:
 80043cc:	6a03      	ldr	r3, [r0, #32]
 80043ce:	b570      	push	{r4, r5, r6, lr}
 80043d0:	6884      	ldr	r4, [r0, #8]
 80043d2:	4605      	mov	r5, r0
 80043d4:	460e      	mov	r6, r1
 80043d6:	b90b      	cbnz	r3, 80043dc <_puts_r+0x10>
 80043d8:	f7ff ffb0 	bl	800433c <__sinit>
 80043dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d405      	bmi.n	80043ee <_puts_r+0x22>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	0598      	lsls	r0, r3, #22
 80043e6:	d402      	bmi.n	80043ee <_puts_r+0x22>
 80043e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ea:	f000 f99e 	bl	800472a <__retarget_lock_acquire_recursive>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0719      	lsls	r1, r3, #28
 80043f2:	d502      	bpl.n	80043fa <_puts_r+0x2e>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d135      	bne.n	8004466 <_puts_r+0x9a>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f8c5 	bl	800458c <__swsetup_r>
 8004402:	b380      	cbz	r0, 8004466 <_puts_r+0x9a>
 8004404:	f04f 35ff 	mov.w	r5, #4294967295
 8004408:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800440a:	07da      	lsls	r2, r3, #31
 800440c:	d405      	bmi.n	800441a <_puts_r+0x4e>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	059b      	lsls	r3, r3, #22
 8004412:	d402      	bmi.n	800441a <_puts_r+0x4e>
 8004414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004416:	f000 f989 	bl	800472c <__retarget_lock_release_recursive>
 800441a:	4628      	mov	r0, r5
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	2b00      	cmp	r3, #0
 8004420:	da04      	bge.n	800442c <_puts_r+0x60>
 8004422:	69a2      	ldr	r2, [r4, #24]
 8004424:	429a      	cmp	r2, r3
 8004426:	dc17      	bgt.n	8004458 <_puts_r+0x8c>
 8004428:	290a      	cmp	r1, #10
 800442a:	d015      	beq.n	8004458 <_puts_r+0x8c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	6022      	str	r2, [r4, #0]
 8004432:	7019      	strb	r1, [r3, #0]
 8004434:	68a3      	ldr	r3, [r4, #8]
 8004436:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800443a:	3b01      	subs	r3, #1
 800443c:	60a3      	str	r3, [r4, #8]
 800443e:	2900      	cmp	r1, #0
 8004440:	d1ed      	bne.n	800441e <_puts_r+0x52>
 8004442:	2b00      	cmp	r3, #0
 8004444:	da11      	bge.n	800446a <_puts_r+0x9e>
 8004446:	4622      	mov	r2, r4
 8004448:	210a      	movs	r1, #10
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f85f 	bl	800450e <__swbuf_r>
 8004450:	3001      	adds	r0, #1
 8004452:	d0d7      	beq.n	8004404 <_puts_r+0x38>
 8004454:	250a      	movs	r5, #10
 8004456:	e7d7      	b.n	8004408 <_puts_r+0x3c>
 8004458:	4622      	mov	r2, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f857 	bl	800450e <__swbuf_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d1e7      	bne.n	8004434 <_puts_r+0x68>
 8004464:	e7ce      	b.n	8004404 <_puts_r+0x38>
 8004466:	3e01      	subs	r6, #1
 8004468:	e7e4      	b.n	8004434 <_puts_r+0x68>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	220a      	movs	r2, #10
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e7ee      	b.n	8004454 <_puts_r+0x88>
	...

08004478 <puts>:
 8004478:	4b02      	ldr	r3, [pc, #8]	@ (8004484 <puts+0xc>)
 800447a:	4601      	mov	r1, r0
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f7ff bfa5 	b.w	80043cc <_puts_r>
 8004482:	bf00      	nop
 8004484:	20000018 	.word	0x20000018

08004488 <__sread>:
 8004488:	b510      	push	{r4, lr}
 800448a:	460c      	mov	r4, r1
 800448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004490:	f000 f8fc 	bl	800468c <_read_r>
 8004494:	2800      	cmp	r0, #0
 8004496:	bfab      	itete	ge
 8004498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800449a:	89a3      	ldrhlt	r3, [r4, #12]
 800449c:	181b      	addge	r3, r3, r0
 800449e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044a2:	bfac      	ite	ge
 80044a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044a6:	81a3      	strhlt	r3, [r4, #12]
 80044a8:	bd10      	pop	{r4, pc}

080044aa <__swrite>:
 80044aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ae:	461f      	mov	r7, r3
 80044b0:	898b      	ldrh	r3, [r1, #12]
 80044b2:	05db      	lsls	r3, r3, #23
 80044b4:	4605      	mov	r5, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	4616      	mov	r6, r2
 80044ba:	d505      	bpl.n	80044c8 <__swrite+0x1e>
 80044bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c0:	2302      	movs	r3, #2
 80044c2:	2200      	movs	r2, #0
 80044c4:	f000 f8d0 	bl	8004668 <_lseek_r>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	4632      	mov	r2, r6
 80044d6:	463b      	mov	r3, r7
 80044d8:	4628      	mov	r0, r5
 80044da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044de:	f000 b8e7 	b.w	80046b0 <_write_r>

080044e2 <__sseek>:
 80044e2:	b510      	push	{r4, lr}
 80044e4:	460c      	mov	r4, r1
 80044e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ea:	f000 f8bd 	bl	8004668 <_lseek_r>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	bf15      	itete	ne
 80044f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044fe:	81a3      	strheq	r3, [r4, #12]
 8004500:	bf18      	it	ne
 8004502:	81a3      	strhne	r3, [r4, #12]
 8004504:	bd10      	pop	{r4, pc}

08004506 <__sclose>:
 8004506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450a:	f000 b89d 	b.w	8004648 <_close_r>

0800450e <__swbuf_r>:
 800450e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004510:	460e      	mov	r6, r1
 8004512:	4614      	mov	r4, r2
 8004514:	4605      	mov	r5, r0
 8004516:	b118      	cbz	r0, 8004520 <__swbuf_r+0x12>
 8004518:	6a03      	ldr	r3, [r0, #32]
 800451a:	b90b      	cbnz	r3, 8004520 <__swbuf_r+0x12>
 800451c:	f7ff ff0e 	bl	800433c <__sinit>
 8004520:	69a3      	ldr	r3, [r4, #24]
 8004522:	60a3      	str	r3, [r4, #8]
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	071a      	lsls	r2, r3, #28
 8004528:	d501      	bpl.n	800452e <__swbuf_r+0x20>
 800452a:	6923      	ldr	r3, [r4, #16]
 800452c:	b943      	cbnz	r3, 8004540 <__swbuf_r+0x32>
 800452e:	4621      	mov	r1, r4
 8004530:	4628      	mov	r0, r5
 8004532:	f000 f82b 	bl	800458c <__swsetup_r>
 8004536:	b118      	cbz	r0, 8004540 <__swbuf_r+0x32>
 8004538:	f04f 37ff 	mov.w	r7, #4294967295
 800453c:	4638      	mov	r0, r7
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	1a98      	subs	r0, r3, r2
 8004546:	6963      	ldr	r3, [r4, #20]
 8004548:	b2f6      	uxtb	r6, r6
 800454a:	4283      	cmp	r3, r0
 800454c:	4637      	mov	r7, r6
 800454e:	dc05      	bgt.n	800455c <__swbuf_r+0x4e>
 8004550:	4621      	mov	r1, r4
 8004552:	4628      	mov	r0, r5
 8004554:	f000 fd38 	bl	8004fc8 <_fflush_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	d1ed      	bne.n	8004538 <__swbuf_r+0x2a>
 800455c:	68a3      	ldr	r3, [r4, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	701e      	strb	r6, [r3, #0]
 800456a:	6962      	ldr	r2, [r4, #20]
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	429a      	cmp	r2, r3
 8004570:	d004      	beq.n	800457c <__swbuf_r+0x6e>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	07db      	lsls	r3, r3, #31
 8004576:	d5e1      	bpl.n	800453c <__swbuf_r+0x2e>
 8004578:	2e0a      	cmp	r6, #10
 800457a:	d1df      	bne.n	800453c <__swbuf_r+0x2e>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fd22 	bl	8004fc8 <_fflush_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	d0d9      	beq.n	800453c <__swbuf_r+0x2e>
 8004588:	e7d6      	b.n	8004538 <__swbuf_r+0x2a>
	...

0800458c <__swsetup_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4b29      	ldr	r3, [pc, #164]	@ (8004634 <__swsetup_r+0xa8>)
 8004590:	4605      	mov	r5, r0
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	460c      	mov	r4, r1
 8004596:	b118      	cbz	r0, 80045a0 <__swsetup_r+0x14>
 8004598:	6a03      	ldr	r3, [r0, #32]
 800459a:	b90b      	cbnz	r3, 80045a0 <__swsetup_r+0x14>
 800459c:	f7ff fece 	bl	800433c <__sinit>
 80045a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a4:	0719      	lsls	r1, r3, #28
 80045a6:	d422      	bmi.n	80045ee <__swsetup_r+0x62>
 80045a8:	06da      	lsls	r2, r3, #27
 80045aa:	d407      	bmi.n	80045bc <__swsetup_r+0x30>
 80045ac:	2209      	movs	r2, #9
 80045ae:	602a      	str	r2, [r5, #0]
 80045b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ba:	e033      	b.n	8004624 <__swsetup_r+0x98>
 80045bc:	0758      	lsls	r0, r3, #29
 80045be:	d512      	bpl.n	80045e6 <__swsetup_r+0x5a>
 80045c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045c2:	b141      	cbz	r1, 80045d6 <__swsetup_r+0x4a>
 80045c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045c8:	4299      	cmp	r1, r3
 80045ca:	d002      	beq.n	80045d2 <__swsetup_r+0x46>
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 f8af 	bl	8004730 <_free_r>
 80045d2:	2300      	movs	r3, #0
 80045d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	2300      	movs	r3, #0
 80045e0:	6063      	str	r3, [r4, #4]
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f043 0308 	orr.w	r3, r3, #8
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	b94b      	cbnz	r3, 8004606 <__swsetup_r+0x7a>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fc:	d003      	beq.n	8004606 <__swsetup_r+0x7a>
 80045fe:	4621      	mov	r1, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fd2f 	bl	8005064 <__smakebuf_r>
 8004606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460a:	f013 0201 	ands.w	r2, r3, #1
 800460e:	d00a      	beq.n	8004626 <__swsetup_r+0x9a>
 8004610:	2200      	movs	r2, #0
 8004612:	60a2      	str	r2, [r4, #8]
 8004614:	6962      	ldr	r2, [r4, #20]
 8004616:	4252      	negs	r2, r2
 8004618:	61a2      	str	r2, [r4, #24]
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	b942      	cbnz	r2, 8004630 <__swsetup_r+0xa4>
 800461e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004622:	d1c5      	bne.n	80045b0 <__swsetup_r+0x24>
 8004624:	bd38      	pop	{r3, r4, r5, pc}
 8004626:	0799      	lsls	r1, r3, #30
 8004628:	bf58      	it	pl
 800462a:	6962      	ldrpl	r2, [r4, #20]
 800462c:	60a2      	str	r2, [r4, #8]
 800462e:	e7f4      	b.n	800461a <__swsetup_r+0x8e>
 8004630:	2000      	movs	r0, #0
 8004632:	e7f7      	b.n	8004624 <__swsetup_r+0x98>
 8004634:	20000018 	.word	0x20000018

08004638 <memset>:
 8004638:	4402      	add	r2, r0
 800463a:	4603      	mov	r3, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	d100      	bne.n	8004642 <memset+0xa>
 8004640:	4770      	bx	lr
 8004642:	f803 1b01 	strb.w	r1, [r3], #1
 8004646:	e7f9      	b.n	800463c <memset+0x4>

08004648 <_close_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d06      	ldr	r5, [pc, #24]	@ (8004664 <_close_r+0x1c>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fd21 	bl	800109a <_close>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_close_r+0x1a>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_close_r+0x1a>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	200004f8 	.word	0x200004f8

08004668 <_lseek_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d07      	ldr	r5, [pc, #28]	@ (8004688 <_lseek_r+0x20>)
 800466c:	4604      	mov	r4, r0
 800466e:	4608      	mov	r0, r1
 8004670:	4611      	mov	r1, r2
 8004672:	2200      	movs	r2, #0
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f7fc fd36 	bl	80010e8 <_lseek>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_lseek_r+0x1e>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_lseek_r+0x1e>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	200004f8 	.word	0x200004f8

0800468c <_read_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4d07      	ldr	r5, [pc, #28]	@ (80046ac <_read_r+0x20>)
 8004690:	4604      	mov	r4, r0
 8004692:	4608      	mov	r0, r1
 8004694:	4611      	mov	r1, r2
 8004696:	2200      	movs	r2, #0
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc fcc4 	bl	8001028 <_read>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_read_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_read_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	200004f8 	.word	0x200004f8

080046b0 <_write_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d07      	ldr	r5, [pc, #28]	@ (80046d0 <_write_r+0x20>)
 80046b4:	4604      	mov	r4, r0
 80046b6:	4608      	mov	r0, r1
 80046b8:	4611      	mov	r1, r2
 80046ba:	2200      	movs	r2, #0
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7fc fccf 	bl	8001062 <_write>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_write_r+0x1e>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_write_r+0x1e>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200004f8 	.word	0x200004f8

080046d4 <__errno>:
 80046d4:	4b01      	ldr	r3, [pc, #4]	@ (80046dc <__errno+0x8>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000018 	.word	0x20000018

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004718 <__libc_init_array+0x38>)
 80046e4:	4c0d      	ldr	r4, [pc, #52]	@ (800471c <__libc_init_array+0x3c>)
 80046e6:	1b64      	subs	r4, r4, r5
 80046e8:	10a4      	asrs	r4, r4, #2
 80046ea:	2600      	movs	r6, #0
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004720 <__libc_init_array+0x40>)
 80046f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004724 <__libc_init_array+0x44>)
 80046f4:	f000 fd24 	bl	8005140 <_init>
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	2600      	movs	r6, #0
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f855 3b04 	ldr.w	r3, [r5], #4
 8004708:	4798      	blx	r3
 800470a:	3601      	adds	r6, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004712:	4798      	blx	r3
 8004714:	3601      	adds	r6, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	0800533c 	.word	0x0800533c
 800471c:	0800533c 	.word	0x0800533c
 8004720:	0800533c 	.word	0x0800533c
 8004724:	08005340 	.word	0x08005340

08004728 <__retarget_lock_init_recursive>:
 8004728:	4770      	bx	lr

0800472a <__retarget_lock_acquire_recursive>:
 800472a:	4770      	bx	lr

0800472c <__retarget_lock_release_recursive>:
 800472c:	4770      	bx	lr
	...

08004730 <_free_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	2900      	cmp	r1, #0
 8004736:	d041      	beq.n	80047bc <_free_r+0x8c>
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f0c      	subs	r4, r1, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfb8      	it	lt
 8004742:	18e4      	addlt	r4, r4, r3
 8004744:	f000 f8e0 	bl	8004908 <__malloc_lock>
 8004748:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <_free_r+0x90>)
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	b933      	cbnz	r3, 800475c <_free_r+0x2c>
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	6014      	str	r4, [r2, #0]
 8004752:	4628      	mov	r0, r5
 8004754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004758:	f000 b8dc 	b.w	8004914 <__malloc_unlock>
 800475c:	42a3      	cmp	r3, r4
 800475e:	d908      	bls.n	8004772 <_free_r+0x42>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	1821      	adds	r1, r4, r0
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1809      	addeq	r1, r1, r0
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	e7ed      	b.n	800474e <_free_r+0x1e>
 8004772:	461a      	mov	r2, r3
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b10b      	cbz	r3, 800477c <_free_r+0x4c>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x42>
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	1850      	adds	r0, r2, r1
 8004780:	42a0      	cmp	r0, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x6c>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	4401      	add	r1, r0
 8004788:	1850      	adds	r0, r2, r1
 800478a:	4283      	cmp	r3, r0
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	d1e0      	bne.n	8004752 <_free_r+0x22>
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	6053      	str	r3, [r2, #4]
 8004796:	4408      	add	r0, r1
 8004798:	6010      	str	r0, [r2, #0]
 800479a:	e7da      	b.n	8004752 <_free_r+0x22>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x74>
 800479e:	230c      	movs	r3, #12
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	e7d6      	b.n	8004752 <_free_r+0x22>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf04      	itt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	bf04      	itt	eq
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	6054      	str	r4, [r2, #4]
 80047ba:	e7ca      	b.n	8004752 <_free_r+0x22>
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	20000504 	.word	0x20000504

080047c4 <sbrk_aligned>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004804 <sbrk_aligned+0x40>)
 80047c8:	460c      	mov	r4, r1
 80047ca:	6831      	ldr	r1, [r6, #0]
 80047cc:	4605      	mov	r5, r0
 80047ce:	b911      	cbnz	r1, 80047d6 <sbrk_aligned+0x12>
 80047d0:	f000 fca6 	bl	8005120 <_sbrk_r>
 80047d4:	6030      	str	r0, [r6, #0]
 80047d6:	4621      	mov	r1, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 fca1 	bl	8005120 <_sbrk_r>
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	d103      	bne.n	80047ea <sbrk_aligned+0x26>
 80047e2:	f04f 34ff 	mov.w	r4, #4294967295
 80047e6:	4620      	mov	r0, r4
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
 80047ea:	1cc4      	adds	r4, r0, #3
 80047ec:	f024 0403 	bic.w	r4, r4, #3
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d0f8      	beq.n	80047e6 <sbrk_aligned+0x22>
 80047f4:	1a21      	subs	r1, r4, r0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 fc92 	bl	8005120 <_sbrk_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d1f2      	bne.n	80047e6 <sbrk_aligned+0x22>
 8004800:	e7ef      	b.n	80047e2 <sbrk_aligned+0x1e>
 8004802:	bf00      	nop
 8004804:	20000500 	.word	0x20000500

08004808 <_malloc_r>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	1ccd      	adds	r5, r1, #3
 800480e:	f025 0503 	bic.w	r5, r5, #3
 8004812:	3508      	adds	r5, #8
 8004814:	2d0c      	cmp	r5, #12
 8004816:	bf38      	it	cc
 8004818:	250c      	movcc	r5, #12
 800481a:	2d00      	cmp	r5, #0
 800481c:	4606      	mov	r6, r0
 800481e:	db01      	blt.n	8004824 <_malloc_r+0x1c>
 8004820:	42a9      	cmp	r1, r5
 8004822:	d904      	bls.n	800482e <_malloc_r+0x26>
 8004824:	230c      	movs	r3, #12
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	2000      	movs	r0, #0
 800482a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004904 <_malloc_r+0xfc>
 8004832:	f000 f869 	bl	8004908 <__malloc_lock>
 8004836:	f8d8 3000 	ldr.w	r3, [r8]
 800483a:	461c      	mov	r4, r3
 800483c:	bb44      	cbnz	r4, 8004890 <_malloc_r+0x88>
 800483e:	4629      	mov	r1, r5
 8004840:	4630      	mov	r0, r6
 8004842:	f7ff ffbf 	bl	80047c4 <sbrk_aligned>
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	4604      	mov	r4, r0
 800484a:	d158      	bne.n	80048fe <_malloc_r+0xf6>
 800484c:	f8d8 4000 	ldr.w	r4, [r8]
 8004850:	4627      	mov	r7, r4
 8004852:	2f00      	cmp	r7, #0
 8004854:	d143      	bne.n	80048de <_malloc_r+0xd6>
 8004856:	2c00      	cmp	r4, #0
 8004858:	d04b      	beq.n	80048f2 <_malloc_r+0xea>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	4639      	mov	r1, r7
 800485e:	4630      	mov	r0, r6
 8004860:	eb04 0903 	add.w	r9, r4, r3
 8004864:	f000 fc5c 	bl	8005120 <_sbrk_r>
 8004868:	4581      	cmp	r9, r0
 800486a:	d142      	bne.n	80048f2 <_malloc_r+0xea>
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	1a6d      	subs	r5, r5, r1
 8004870:	4629      	mov	r1, r5
 8004872:	4630      	mov	r0, r6
 8004874:	f7ff ffa6 	bl	80047c4 <sbrk_aligned>
 8004878:	3001      	adds	r0, #1
 800487a:	d03a      	beq.n	80048f2 <_malloc_r+0xea>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	442b      	add	r3, r5
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	f8d8 3000 	ldr.w	r3, [r8]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	bb62      	cbnz	r2, 80048e4 <_malloc_r+0xdc>
 800488a:	f8c8 7000 	str.w	r7, [r8]
 800488e:	e00f      	b.n	80048b0 <_malloc_r+0xa8>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	1b52      	subs	r2, r2, r5
 8004894:	d420      	bmi.n	80048d8 <_malloc_r+0xd0>
 8004896:	2a0b      	cmp	r2, #11
 8004898:	d917      	bls.n	80048ca <_malloc_r+0xc2>
 800489a:	1961      	adds	r1, r4, r5
 800489c:	42a3      	cmp	r3, r4
 800489e:	6025      	str	r5, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	6059      	strne	r1, [r3, #4]
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	bf08      	it	eq
 80048a8:	f8c8 1000 	streq.w	r1, [r8]
 80048ac:	5162      	str	r2, [r4, r5]
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f82f 	bl	8004914 <__malloc_unlock>
 80048b6:	f104 000b 	add.w	r0, r4, #11
 80048ba:	1d23      	adds	r3, r4, #4
 80048bc:	f020 0007 	bic.w	r0, r0, #7
 80048c0:	1ac2      	subs	r2, r0, r3
 80048c2:	bf1c      	itt	ne
 80048c4:	1a1b      	subne	r3, r3, r0
 80048c6:	50a3      	strne	r3, [r4, r2]
 80048c8:	e7af      	b.n	800482a <_malloc_r+0x22>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	bf0c      	ite	eq
 80048d0:	f8c8 2000 	streq.w	r2, [r8]
 80048d4:	605a      	strne	r2, [r3, #4]
 80048d6:	e7eb      	b.n	80048b0 <_malloc_r+0xa8>
 80048d8:	4623      	mov	r3, r4
 80048da:	6864      	ldr	r4, [r4, #4]
 80048dc:	e7ae      	b.n	800483c <_malloc_r+0x34>
 80048de:	463c      	mov	r4, r7
 80048e0:	687f      	ldr	r7, [r7, #4]
 80048e2:	e7b6      	b.n	8004852 <_malloc_r+0x4a>
 80048e4:	461a      	mov	r2, r3
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d1fb      	bne.n	80048e4 <_malloc_r+0xdc>
 80048ec:	2300      	movs	r3, #0
 80048ee:	6053      	str	r3, [r2, #4]
 80048f0:	e7de      	b.n	80048b0 <_malloc_r+0xa8>
 80048f2:	230c      	movs	r3, #12
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	4630      	mov	r0, r6
 80048f8:	f000 f80c 	bl	8004914 <__malloc_unlock>
 80048fc:	e794      	b.n	8004828 <_malloc_r+0x20>
 80048fe:	6005      	str	r5, [r0, #0]
 8004900:	e7d6      	b.n	80048b0 <_malloc_r+0xa8>
 8004902:	bf00      	nop
 8004904:	20000504 	.word	0x20000504

08004908 <__malloc_lock>:
 8004908:	4801      	ldr	r0, [pc, #4]	@ (8004910 <__malloc_lock+0x8>)
 800490a:	f7ff bf0e 	b.w	800472a <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	200004fc 	.word	0x200004fc

08004914 <__malloc_unlock>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__malloc_unlock+0x8>)
 8004916:	f7ff bf09 	b.w	800472c <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	200004fc 	.word	0x200004fc

08004920 <__sfputc_r>:
 8004920:	6893      	ldr	r3, [r2, #8]
 8004922:	3b01      	subs	r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	b410      	push	{r4}
 8004928:	6093      	str	r3, [r2, #8]
 800492a:	da08      	bge.n	800493e <__sfputc_r+0x1e>
 800492c:	6994      	ldr	r4, [r2, #24]
 800492e:	42a3      	cmp	r3, r4
 8004930:	db01      	blt.n	8004936 <__sfputc_r+0x16>
 8004932:	290a      	cmp	r1, #10
 8004934:	d103      	bne.n	800493e <__sfputc_r+0x1e>
 8004936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800493a:	f7ff bde8 	b.w	800450e <__swbuf_r>
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	1c58      	adds	r0, r3, #1
 8004942:	6010      	str	r0, [r2, #0]
 8004944:	7019      	strb	r1, [r3, #0]
 8004946:	4608      	mov	r0, r1
 8004948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800494c:	4770      	bx	lr

0800494e <__sfputs_r>:
 800494e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004950:	4606      	mov	r6, r0
 8004952:	460f      	mov	r7, r1
 8004954:	4614      	mov	r4, r2
 8004956:	18d5      	adds	r5, r2, r3
 8004958:	42ac      	cmp	r4, r5
 800495a:	d101      	bne.n	8004960 <__sfputs_r+0x12>
 800495c:	2000      	movs	r0, #0
 800495e:	e007      	b.n	8004970 <__sfputs_r+0x22>
 8004960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004964:	463a      	mov	r2, r7
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ffda 	bl	8004920 <__sfputc_r>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d1f3      	bne.n	8004958 <__sfputs_r+0xa>
 8004970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004974 <_vfiprintf_r>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	460d      	mov	r5, r1
 800497a:	b09d      	sub	sp, #116	@ 0x74
 800497c:	4614      	mov	r4, r2
 800497e:	4698      	mov	r8, r3
 8004980:	4606      	mov	r6, r0
 8004982:	b118      	cbz	r0, 800498c <_vfiprintf_r+0x18>
 8004984:	6a03      	ldr	r3, [r0, #32]
 8004986:	b90b      	cbnz	r3, 800498c <_vfiprintf_r+0x18>
 8004988:	f7ff fcd8 	bl	800433c <__sinit>
 800498c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800498e:	07d9      	lsls	r1, r3, #31
 8004990:	d405      	bmi.n	800499e <_vfiprintf_r+0x2a>
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	059a      	lsls	r2, r3, #22
 8004996:	d402      	bmi.n	800499e <_vfiprintf_r+0x2a>
 8004998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800499a:	f7ff fec6 	bl	800472a <__retarget_lock_acquire_recursive>
 800499e:	89ab      	ldrh	r3, [r5, #12]
 80049a0:	071b      	lsls	r3, r3, #28
 80049a2:	d501      	bpl.n	80049a8 <_vfiprintf_r+0x34>
 80049a4:	692b      	ldr	r3, [r5, #16]
 80049a6:	b99b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x5c>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff fdee 	bl	800458c <__swsetup_r>
 80049b0:	b170      	cbz	r0, 80049d0 <_vfiprintf_r+0x5c>
 80049b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049b4:	07dc      	lsls	r4, r3, #31
 80049b6:	d504      	bpl.n	80049c2 <_vfiprintf_r+0x4e>
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	b01d      	add	sp, #116	@ 0x74
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	89ab      	ldrh	r3, [r5, #12]
 80049c4:	0598      	lsls	r0, r3, #22
 80049c6:	d4f7      	bmi.n	80049b8 <_vfiprintf_r+0x44>
 80049c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049ca:	f7ff feaf 	bl	800472c <__retarget_lock_release_recursive>
 80049ce:	e7f3      	b.n	80049b8 <_vfiprintf_r+0x44>
 80049d0:	2300      	movs	r3, #0
 80049d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d4:	2320      	movs	r3, #32
 80049d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049da:	f8cd 800c 	str.w	r8, [sp, #12]
 80049de:	2330      	movs	r3, #48	@ 0x30
 80049e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b90 <_vfiprintf_r+0x21c>
 80049e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049e8:	f04f 0901 	mov.w	r9, #1
 80049ec:	4623      	mov	r3, r4
 80049ee:	469a      	mov	sl, r3
 80049f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f4:	b10a      	cbz	r2, 80049fa <_vfiprintf_r+0x86>
 80049f6:	2a25      	cmp	r2, #37	@ 0x25
 80049f8:	d1f9      	bne.n	80049ee <_vfiprintf_r+0x7a>
 80049fa:	ebba 0b04 	subs.w	fp, sl, r4
 80049fe:	d00b      	beq.n	8004a18 <_vfiprintf_r+0xa4>
 8004a00:	465b      	mov	r3, fp
 8004a02:	4622      	mov	r2, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7ff ffa1 	bl	800494e <__sfputs_r>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f000 80a7 	beq.w	8004b60 <_vfiprintf_r+0x1ec>
 8004a12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a14:	445a      	add	r2, fp
 8004a16:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a18:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 809f 	beq.w	8004b60 <_vfiprintf_r+0x1ec>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2c:	f10a 0a01 	add.w	sl, sl, #1
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	9307      	str	r3, [sp, #28]
 8004a34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a38:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a3a:	4654      	mov	r4, sl
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a42:	4853      	ldr	r0, [pc, #332]	@ (8004b90 <_vfiprintf_r+0x21c>)
 8004a44:	f7fb fbcc 	bl	80001e0 <memchr>
 8004a48:	9a04      	ldr	r2, [sp, #16]
 8004a4a:	b9d8      	cbnz	r0, 8004a84 <_vfiprintf_r+0x110>
 8004a4c:	06d1      	lsls	r1, r2, #27
 8004a4e:	bf44      	itt	mi
 8004a50:	2320      	movmi	r3, #32
 8004a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a56:	0713      	lsls	r3, r2, #28
 8004a58:	bf44      	itt	mi
 8004a5a:	232b      	movmi	r3, #43	@ 0x2b
 8004a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a60:	f89a 3000 	ldrb.w	r3, [sl]
 8004a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a66:	d015      	beq.n	8004a94 <_vfiprintf_r+0x120>
 8004a68:	9a07      	ldr	r2, [sp, #28]
 8004a6a:	4654      	mov	r4, sl
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f04f 0c0a 	mov.w	ip, #10
 8004a72:	4621      	mov	r1, r4
 8004a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a78:	3b30      	subs	r3, #48	@ 0x30
 8004a7a:	2b09      	cmp	r3, #9
 8004a7c:	d94b      	bls.n	8004b16 <_vfiprintf_r+0x1a2>
 8004a7e:	b1b0      	cbz	r0, 8004aae <_vfiprintf_r+0x13a>
 8004a80:	9207      	str	r2, [sp, #28]
 8004a82:	e014      	b.n	8004aae <_vfiprintf_r+0x13a>
 8004a84:	eba0 0308 	sub.w	r3, r0, r8
 8004a88:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	46a2      	mov	sl, r4
 8004a92:	e7d2      	b.n	8004a3a <_vfiprintf_r+0xc6>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d19      	adds	r1, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9103      	str	r1, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfbb      	ittet	lt
 8004aa0:	425b      	neglt	r3, r3
 8004aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa6:	9307      	strge	r3, [sp, #28]
 8004aa8:	9307      	strlt	r3, [sp, #28]
 8004aaa:	bfb8      	it	lt
 8004aac:	9204      	strlt	r2, [sp, #16]
 8004aae:	7823      	ldrb	r3, [r4, #0]
 8004ab0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab2:	d10a      	bne.n	8004aca <_vfiprintf_r+0x156>
 8004ab4:	7863      	ldrb	r3, [r4, #1]
 8004ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab8:	d132      	bne.n	8004b20 <_vfiprintf_r+0x1ac>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9203      	str	r2, [sp, #12]
 8004ac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac6:	3402      	adds	r4, #2
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ba0 <_vfiprintf_r+0x22c>
 8004ace:	7821      	ldrb	r1, [r4, #0]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	f7fb fb84 	bl	80001e0 <memchr>
 8004ad8:	b138      	cbz	r0, 8004aea <_vfiprintf_r+0x176>
 8004ada:	9b04      	ldr	r3, [sp, #16]
 8004adc:	eba0 000a 	sub.w	r0, r0, sl
 8004ae0:	2240      	movs	r2, #64	@ 0x40
 8004ae2:	4082      	lsls	r2, r0
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aee:	4829      	ldr	r0, [pc, #164]	@ (8004b94 <_vfiprintf_r+0x220>)
 8004af0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af4:	2206      	movs	r2, #6
 8004af6:	f7fb fb73 	bl	80001e0 <memchr>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d03f      	beq.n	8004b7e <_vfiprintf_r+0x20a>
 8004afe:	4b26      	ldr	r3, [pc, #152]	@ (8004b98 <_vfiprintf_r+0x224>)
 8004b00:	bb1b      	cbnz	r3, 8004b4a <_vfiprintf_r+0x1d6>
 8004b02:	9b03      	ldr	r3, [sp, #12]
 8004b04:	3307      	adds	r3, #7
 8004b06:	f023 0307 	bic.w	r3, r3, #7
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b10:	443b      	add	r3, r7
 8004b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b14:	e76a      	b.n	80049ec <_vfiprintf_r+0x78>
 8004b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	e7a8      	b.n	8004a72 <_vfiprintf_r+0xfe>
 8004b20:	2300      	movs	r3, #0
 8004b22:	3401      	adds	r4, #1
 8004b24:	9305      	str	r3, [sp, #20]
 8004b26:	4619      	mov	r1, r3
 8004b28:	f04f 0c0a 	mov.w	ip, #10
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b32:	3a30      	subs	r2, #48	@ 0x30
 8004b34:	2a09      	cmp	r2, #9
 8004b36:	d903      	bls.n	8004b40 <_vfiprintf_r+0x1cc>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0c6      	beq.n	8004aca <_vfiprintf_r+0x156>
 8004b3c:	9105      	str	r1, [sp, #20]
 8004b3e:	e7c4      	b.n	8004aca <_vfiprintf_r+0x156>
 8004b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b44:	4604      	mov	r4, r0
 8004b46:	2301      	movs	r3, #1
 8004b48:	e7f0      	b.n	8004b2c <_vfiprintf_r+0x1b8>
 8004b4a:	ab03      	add	r3, sp, #12
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	462a      	mov	r2, r5
 8004b50:	4b12      	ldr	r3, [pc, #72]	@ (8004b9c <_vfiprintf_r+0x228>)
 8004b52:	a904      	add	r1, sp, #16
 8004b54:	4630      	mov	r0, r6
 8004b56:	f3af 8000 	nop.w
 8004b5a:	4607      	mov	r7, r0
 8004b5c:	1c78      	adds	r0, r7, #1
 8004b5e:	d1d6      	bne.n	8004b0e <_vfiprintf_r+0x19a>
 8004b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b62:	07d9      	lsls	r1, r3, #31
 8004b64:	d405      	bmi.n	8004b72 <_vfiprintf_r+0x1fe>
 8004b66:	89ab      	ldrh	r3, [r5, #12]
 8004b68:	059a      	lsls	r2, r3, #22
 8004b6a:	d402      	bmi.n	8004b72 <_vfiprintf_r+0x1fe>
 8004b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b6e:	f7ff fddd 	bl	800472c <__retarget_lock_release_recursive>
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	065b      	lsls	r3, r3, #25
 8004b76:	f53f af1f 	bmi.w	80049b8 <_vfiprintf_r+0x44>
 8004b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b7c:	e71e      	b.n	80049bc <_vfiprintf_r+0x48>
 8004b7e:	ab03      	add	r3, sp, #12
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	462a      	mov	r2, r5
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <_vfiprintf_r+0x228>)
 8004b86:	a904      	add	r1, sp, #16
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f879 	bl	8004c80 <_printf_i>
 8004b8e:	e7e4      	b.n	8004b5a <_vfiprintf_r+0x1e6>
 8004b90:	08005300 	.word	0x08005300
 8004b94:	0800530a 	.word	0x0800530a
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	0800494f 	.word	0x0800494f
 8004ba0:	08005306 	.word	0x08005306

08004ba4 <_printf_common>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	4616      	mov	r6, r2
 8004baa:	4698      	mov	r8, r3
 8004bac:	688a      	ldr	r2, [r1, #8]
 8004bae:	690b      	ldr	r3, [r1, #16]
 8004bb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	bfb8      	it	lt
 8004bb8:	4613      	movlt	r3, r2
 8004bba:	6033      	str	r3, [r6, #0]
 8004bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	b10a      	cbz	r2, 8004bca <_printf_common+0x26>
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	0699      	lsls	r1, r3, #26
 8004bce:	bf42      	ittt	mi
 8004bd0:	6833      	ldrmi	r3, [r6, #0]
 8004bd2:	3302      	addmi	r3, #2
 8004bd4:	6033      	strmi	r3, [r6, #0]
 8004bd6:	6825      	ldr	r5, [r4, #0]
 8004bd8:	f015 0506 	ands.w	r5, r5, #6
 8004bdc:	d106      	bne.n	8004bec <_printf_common+0x48>
 8004bde:	f104 0a19 	add.w	sl, r4, #25
 8004be2:	68e3      	ldr	r3, [r4, #12]
 8004be4:	6832      	ldr	r2, [r6, #0]
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	42ab      	cmp	r3, r5
 8004bea:	dc26      	bgt.n	8004c3a <_printf_common+0x96>
 8004bec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	3b00      	subs	r3, #0
 8004bf4:	bf18      	it	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	0692      	lsls	r2, r2, #26
 8004bfa:	d42b      	bmi.n	8004c54 <_printf_common+0xb0>
 8004bfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c00:	4641      	mov	r1, r8
 8004c02:	4638      	mov	r0, r7
 8004c04:	47c8      	blx	r9
 8004c06:	3001      	adds	r0, #1
 8004c08:	d01e      	beq.n	8004c48 <_printf_common+0xa4>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	6922      	ldr	r2, [r4, #16]
 8004c0e:	f003 0306 	and.w	r3, r3, #6
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf02      	ittt	eq
 8004c16:	68e5      	ldreq	r5, [r4, #12]
 8004c18:	6833      	ldreq	r3, [r6, #0]
 8004c1a:	1aed      	subeq	r5, r5, r3
 8004c1c:	68a3      	ldr	r3, [r4, #8]
 8004c1e:	bf0c      	ite	eq
 8004c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c24:	2500      	movne	r5, #0
 8004c26:	4293      	cmp	r3, r2
 8004c28:	bfc4      	itt	gt
 8004c2a:	1a9b      	subgt	r3, r3, r2
 8004c2c:	18ed      	addgt	r5, r5, r3
 8004c2e:	2600      	movs	r6, #0
 8004c30:	341a      	adds	r4, #26
 8004c32:	42b5      	cmp	r5, r6
 8004c34:	d11a      	bne.n	8004c6c <_printf_common+0xc8>
 8004c36:	2000      	movs	r0, #0
 8004c38:	e008      	b.n	8004c4c <_printf_common+0xa8>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4652      	mov	r2, sl
 8004c3e:	4641      	mov	r1, r8
 8004c40:	4638      	mov	r0, r7
 8004c42:	47c8      	blx	r9
 8004c44:	3001      	adds	r0, #1
 8004c46:	d103      	bne.n	8004c50 <_printf_common+0xac>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	3501      	adds	r5, #1
 8004c52:	e7c6      	b.n	8004be2 <_printf_common+0x3e>
 8004c54:	18e1      	adds	r1, r4, r3
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	2030      	movs	r0, #48	@ 0x30
 8004c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c5e:	4422      	add	r2, r4
 8004c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c68:	3302      	adds	r3, #2
 8004c6a:	e7c7      	b.n	8004bfc <_printf_common+0x58>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4622      	mov	r2, r4
 8004c70:	4641      	mov	r1, r8
 8004c72:	4638      	mov	r0, r7
 8004c74:	47c8      	blx	r9
 8004c76:	3001      	adds	r0, #1
 8004c78:	d0e6      	beq.n	8004c48 <_printf_common+0xa4>
 8004c7a:	3601      	adds	r6, #1
 8004c7c:	e7d9      	b.n	8004c32 <_printf_common+0x8e>
	...

08004c80 <_printf_i>:
 8004c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	7e0f      	ldrb	r7, [r1, #24]
 8004c86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c88:	2f78      	cmp	r7, #120	@ 0x78
 8004c8a:	4691      	mov	r9, r2
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	469a      	mov	sl, r3
 8004c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c96:	d807      	bhi.n	8004ca8 <_printf_i+0x28>
 8004c98:	2f62      	cmp	r7, #98	@ 0x62
 8004c9a:	d80a      	bhi.n	8004cb2 <_printf_i+0x32>
 8004c9c:	2f00      	cmp	r7, #0
 8004c9e:	f000 80d2 	beq.w	8004e46 <_printf_i+0x1c6>
 8004ca2:	2f58      	cmp	r7, #88	@ 0x58
 8004ca4:	f000 80b9 	beq.w	8004e1a <_printf_i+0x19a>
 8004ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cb0:	e03a      	b.n	8004d28 <_printf_i+0xa8>
 8004cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cb6:	2b15      	cmp	r3, #21
 8004cb8:	d8f6      	bhi.n	8004ca8 <_printf_i+0x28>
 8004cba:	a101      	add	r1, pc, #4	@ (adr r1, 8004cc0 <_printf_i+0x40>)
 8004cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d2d 	.word	0x08004d2d
 8004cc8:	08004ca9 	.word	0x08004ca9
 8004ccc:	08004ca9 	.word	0x08004ca9
 8004cd0:	08004ca9 	.word	0x08004ca9
 8004cd4:	08004ca9 	.word	0x08004ca9
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004ca9 	.word	0x08004ca9
 8004ce0:	08004ca9 	.word	0x08004ca9
 8004ce4:	08004ca9 	.word	0x08004ca9
 8004ce8:	08004ca9 	.word	0x08004ca9
 8004cec:	08004e2d 	.word	0x08004e2d
 8004cf0:	08004d57 	.word	0x08004d57
 8004cf4:	08004de7 	.word	0x08004de7
 8004cf8:	08004ca9 	.word	0x08004ca9
 8004cfc:	08004ca9 	.word	0x08004ca9
 8004d00:	08004e4f 	.word	0x08004e4f
 8004d04:	08004ca9 	.word	0x08004ca9
 8004d08:	08004d57 	.word	0x08004d57
 8004d0c:	08004ca9 	.word	0x08004ca9
 8004d10:	08004ca9 	.word	0x08004ca9
 8004d14:	08004def 	.word	0x08004def
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	1d1a      	adds	r2, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e09d      	b.n	8004e68 <_printf_i+0x1e8>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	1d19      	adds	r1, r3, #4
 8004d32:	6031      	str	r1, [r6, #0]
 8004d34:	0606      	lsls	r6, r0, #24
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0xbc>
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	e003      	b.n	8004d44 <_printf_i+0xc4>
 8004d3c:	0645      	lsls	r5, r0, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0xb8>
 8004d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	da03      	bge.n	8004d50 <_printf_i+0xd0>
 8004d48:	232d      	movs	r3, #45	@ 0x2d
 8004d4a:	426d      	negs	r5, r5
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d50:	4859      	ldr	r0, [pc, #356]	@ (8004eb8 <_printf_i+0x238>)
 8004d52:	230a      	movs	r3, #10
 8004d54:	e011      	b.n	8004d7a <_printf_i+0xfa>
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	6833      	ldr	r3, [r6, #0]
 8004d5a:	0608      	lsls	r0, r1, #24
 8004d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d60:	d402      	bmi.n	8004d68 <_printf_i+0xe8>
 8004d62:	0649      	lsls	r1, r1, #25
 8004d64:	bf48      	it	mi
 8004d66:	b2ad      	uxthmi	r5, r5
 8004d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d6a:	4853      	ldr	r0, [pc, #332]	@ (8004eb8 <_printf_i+0x238>)
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	bf14      	ite	ne
 8004d70:	230a      	movne	r3, #10
 8004d72:	2308      	moveq	r3, #8
 8004d74:	2100      	movs	r1, #0
 8004d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d7a:	6866      	ldr	r6, [r4, #4]
 8004d7c:	60a6      	str	r6, [r4, #8]
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	bfa2      	ittt	ge
 8004d82:	6821      	ldrge	r1, [r4, #0]
 8004d84:	f021 0104 	bicge.w	r1, r1, #4
 8004d88:	6021      	strge	r1, [r4, #0]
 8004d8a:	b90d      	cbnz	r5, 8004d90 <_printf_i+0x110>
 8004d8c:	2e00      	cmp	r6, #0
 8004d8e:	d04b      	beq.n	8004e28 <_printf_i+0x1a8>
 8004d90:	4616      	mov	r6, r2
 8004d92:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d96:	fb03 5711 	mls	r7, r3, r1, r5
 8004d9a:	5dc7      	ldrb	r7, [r0, r7]
 8004d9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004da0:	462f      	mov	r7, r5
 8004da2:	42bb      	cmp	r3, r7
 8004da4:	460d      	mov	r5, r1
 8004da6:	d9f4      	bls.n	8004d92 <_printf_i+0x112>
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10b      	bne.n	8004dc4 <_printf_i+0x144>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	07df      	lsls	r7, r3, #31
 8004db0:	d508      	bpl.n	8004dc4 <_printf_i+0x144>
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	6861      	ldr	r1, [r4, #4]
 8004db6:	4299      	cmp	r1, r3
 8004db8:	bfde      	ittt	le
 8004dba:	2330      	movle	r3, #48	@ 0x30
 8004dbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dc4:	1b92      	subs	r2, r2, r6
 8004dc6:	6122      	str	r2, [r4, #16]
 8004dc8:	f8cd a000 	str.w	sl, [sp]
 8004dcc:	464b      	mov	r3, r9
 8004dce:	aa03      	add	r2, sp, #12
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f7ff fee6 	bl	8004ba4 <_printf_common>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d14a      	bne.n	8004e72 <_printf_i+0x1f2>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b004      	add	sp, #16
 8004de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f043 0320 	orr.w	r3, r3, #32
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	4833      	ldr	r0, [pc, #204]	@ (8004ebc <_printf_i+0x23c>)
 8004df0:	2778      	movs	r7, #120	@ 0x78
 8004df2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	6831      	ldr	r1, [r6, #0]
 8004dfa:	061f      	lsls	r7, r3, #24
 8004dfc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e00:	d402      	bmi.n	8004e08 <_printf_i+0x188>
 8004e02:	065f      	lsls	r7, r3, #25
 8004e04:	bf48      	it	mi
 8004e06:	b2ad      	uxthmi	r5, r5
 8004e08:	6031      	str	r1, [r6, #0]
 8004e0a:	07d9      	lsls	r1, r3, #31
 8004e0c:	bf44      	itt	mi
 8004e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e12:	6023      	strmi	r3, [r4, #0]
 8004e14:	b11d      	cbz	r5, 8004e1e <_printf_i+0x19e>
 8004e16:	2310      	movs	r3, #16
 8004e18:	e7ac      	b.n	8004d74 <_printf_i+0xf4>
 8004e1a:	4827      	ldr	r0, [pc, #156]	@ (8004eb8 <_printf_i+0x238>)
 8004e1c:	e7e9      	b.n	8004df2 <_printf_i+0x172>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	f023 0320 	bic.w	r3, r3, #32
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	e7f6      	b.n	8004e16 <_printf_i+0x196>
 8004e28:	4616      	mov	r6, r2
 8004e2a:	e7bd      	b.n	8004da8 <_printf_i+0x128>
 8004e2c:	6833      	ldr	r3, [r6, #0]
 8004e2e:	6825      	ldr	r5, [r4, #0]
 8004e30:	6961      	ldr	r1, [r4, #20]
 8004e32:	1d18      	adds	r0, r3, #4
 8004e34:	6030      	str	r0, [r6, #0]
 8004e36:	062e      	lsls	r6, r5, #24
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	d501      	bpl.n	8004e40 <_printf_i+0x1c0>
 8004e3c:	6019      	str	r1, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <_printf_i+0x1c6>
 8004e40:	0668      	lsls	r0, r5, #25
 8004e42:	d5fb      	bpl.n	8004e3c <_printf_i+0x1bc>
 8004e44:	8019      	strh	r1, [r3, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	4616      	mov	r6, r2
 8004e4c:	e7bc      	b.n	8004dc8 <_printf_i+0x148>
 8004e4e:	6833      	ldr	r3, [r6, #0]
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	6032      	str	r2, [r6, #0]
 8004e54:	681e      	ldr	r6, [r3, #0]
 8004e56:	6862      	ldr	r2, [r4, #4]
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7fb f9c0 	bl	80001e0 <memchr>
 8004e60:	b108      	cbz	r0, 8004e66 <_printf_i+0x1e6>
 8004e62:	1b80      	subs	r0, r0, r6
 8004e64:	6060      	str	r0, [r4, #4]
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e70:	e7aa      	b.n	8004dc8 <_printf_i+0x148>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d0ad      	beq.n	8004ddc <_printf_i+0x15c>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	079b      	lsls	r3, r3, #30
 8004e84:	d413      	bmi.n	8004eae <_printf_i+0x22e>
 8004e86:	68e0      	ldr	r0, [r4, #12]
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	4298      	cmp	r0, r3
 8004e8c:	bfb8      	it	lt
 8004e8e:	4618      	movlt	r0, r3
 8004e90:	e7a6      	b.n	8004de0 <_printf_i+0x160>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4632      	mov	r2, r6
 8004e96:	4649      	mov	r1, r9
 8004e98:	4640      	mov	r0, r8
 8004e9a:	47d0      	blx	sl
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d09d      	beq.n	8004ddc <_printf_i+0x15c>
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	9903      	ldr	r1, [sp, #12]
 8004ea6:	1a5b      	subs	r3, r3, r1
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dcf2      	bgt.n	8004e92 <_printf_i+0x212>
 8004eac:	e7eb      	b.n	8004e86 <_printf_i+0x206>
 8004eae:	2500      	movs	r5, #0
 8004eb0:	f104 0619 	add.w	r6, r4, #25
 8004eb4:	e7f5      	b.n	8004ea2 <_printf_i+0x222>
 8004eb6:	bf00      	nop
 8004eb8:	08005311 	.word	0x08005311
 8004ebc:	08005322 	.word	0x08005322

08004ec0 <__sflush_r>:
 8004ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec8:	0716      	lsls	r6, r2, #28
 8004eca:	4605      	mov	r5, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	d454      	bmi.n	8004f7a <__sflush_r+0xba>
 8004ed0:	684b      	ldr	r3, [r1, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dc02      	bgt.n	8004edc <__sflush_r+0x1c>
 8004ed6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	dd48      	ble.n	8004f6e <__sflush_r+0xae>
 8004edc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d045      	beq.n	8004f6e <__sflush_r+0xae>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ee8:	682f      	ldr	r7, [r5, #0]
 8004eea:	6a21      	ldr	r1, [r4, #32]
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	d030      	beq.n	8004f52 <__sflush_r+0x92>
 8004ef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	0759      	lsls	r1, r3, #29
 8004ef6:	d505      	bpl.n	8004f04 <__sflush_r+0x44>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004efe:	b10b      	cbz	r3, 8004f04 <__sflush_r+0x44>
 8004f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	2300      	movs	r3, #0
 8004f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f08:	6a21      	ldr	r1, [r4, #32]
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b0      	blx	r6
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	d106      	bne.n	8004f22 <__sflush_r+0x62>
 8004f14:	6829      	ldr	r1, [r5, #0]
 8004f16:	291d      	cmp	r1, #29
 8004f18:	d82b      	bhi.n	8004f72 <__sflush_r+0xb2>
 8004f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc4 <__sflush_r+0x104>)
 8004f1c:	410a      	asrs	r2, r1
 8004f1e:	07d6      	lsls	r6, r2, #31
 8004f20:	d427      	bmi.n	8004f72 <__sflush_r+0xb2>
 8004f22:	2200      	movs	r2, #0
 8004f24:	6062      	str	r2, [r4, #4]
 8004f26:	04d9      	lsls	r1, r3, #19
 8004f28:	6922      	ldr	r2, [r4, #16]
 8004f2a:	6022      	str	r2, [r4, #0]
 8004f2c:	d504      	bpl.n	8004f38 <__sflush_r+0x78>
 8004f2e:	1c42      	adds	r2, r0, #1
 8004f30:	d101      	bne.n	8004f36 <__sflush_r+0x76>
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	b903      	cbnz	r3, 8004f38 <__sflush_r+0x78>
 8004f36:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f3a:	602f      	str	r7, [r5, #0]
 8004f3c:	b1b9      	cbz	r1, 8004f6e <__sflush_r+0xae>
 8004f3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f42:	4299      	cmp	r1, r3
 8004f44:	d002      	beq.n	8004f4c <__sflush_r+0x8c>
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff fbf2 	bl	8004730 <_free_r>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f50:	e00d      	b.n	8004f6e <__sflush_r+0xae>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b0      	blx	r6
 8004f58:	4602      	mov	r2, r0
 8004f5a:	1c50      	adds	r0, r2, #1
 8004f5c:	d1c9      	bne.n	8004ef2 <__sflush_r+0x32>
 8004f5e:	682b      	ldr	r3, [r5, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0c6      	beq.n	8004ef2 <__sflush_r+0x32>
 8004f64:	2b1d      	cmp	r3, #29
 8004f66:	d001      	beq.n	8004f6c <__sflush_r+0xac>
 8004f68:	2b16      	cmp	r3, #22
 8004f6a:	d11e      	bne.n	8004faa <__sflush_r+0xea>
 8004f6c:	602f      	str	r7, [r5, #0]
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e022      	b.n	8004fb8 <__sflush_r+0xf8>
 8004f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	e01b      	b.n	8004fb2 <__sflush_r+0xf2>
 8004f7a:	690f      	ldr	r7, [r1, #16]
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	d0f6      	beq.n	8004f6e <__sflush_r+0xae>
 8004f80:	0793      	lsls	r3, r2, #30
 8004f82:	680e      	ldr	r6, [r1, #0]
 8004f84:	bf08      	it	eq
 8004f86:	694b      	ldreq	r3, [r1, #20]
 8004f88:	600f      	str	r7, [r1, #0]
 8004f8a:	bf18      	it	ne
 8004f8c:	2300      	movne	r3, #0
 8004f8e:	eba6 0807 	sub.w	r8, r6, r7
 8004f92:	608b      	str	r3, [r1, #8]
 8004f94:	f1b8 0f00 	cmp.w	r8, #0
 8004f98:	dde9      	ble.n	8004f6e <__sflush_r+0xae>
 8004f9a:	6a21      	ldr	r1, [r4, #32]
 8004f9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f9e:	4643      	mov	r3, r8
 8004fa0:	463a      	mov	r2, r7
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b0      	blx	r6
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	dc08      	bgt.n	8004fbc <__sflush_r+0xfc>
 8004faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fbc:	4407      	add	r7, r0
 8004fbe:	eba8 0800 	sub.w	r8, r8, r0
 8004fc2:	e7e7      	b.n	8004f94 <__sflush_r+0xd4>
 8004fc4:	dfbffffe 	.word	0xdfbffffe

08004fc8 <_fflush_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	4605      	mov	r5, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	b913      	cbnz	r3, 8004fd8 <_fflush_r+0x10>
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	b118      	cbz	r0, 8004fe2 <_fflush_r+0x1a>
 8004fda:	6a03      	ldr	r3, [r0, #32]
 8004fdc:	b90b      	cbnz	r3, 8004fe2 <_fflush_r+0x1a>
 8004fde:	f7ff f9ad 	bl	800433c <__sinit>
 8004fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f3      	beq.n	8004fd2 <_fflush_r+0xa>
 8004fea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d404      	bmi.n	8004ffa <_fflush_r+0x32>
 8004ff0:	0599      	lsls	r1, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_fflush_r+0x32>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ff6:	f7ff fb98 	bl	800472a <__retarget_lock_acquire_recursive>
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f7ff ff5f 	bl	8004ec0 <__sflush_r>
 8005002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005004:	07da      	lsls	r2, r3, #31
 8005006:	4605      	mov	r5, r0
 8005008:	d4e4      	bmi.n	8004fd4 <_fflush_r+0xc>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	059b      	lsls	r3, r3, #22
 800500e:	d4e1      	bmi.n	8004fd4 <_fflush_r+0xc>
 8005010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005012:	f7ff fb8b 	bl	800472c <__retarget_lock_release_recursive>
 8005016:	e7dd      	b.n	8004fd4 <_fflush_r+0xc>

08005018 <__swhatbuf_r>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	460c      	mov	r4, r1
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	2900      	cmp	r1, #0
 8005022:	b096      	sub	sp, #88	@ 0x58
 8005024:	4615      	mov	r5, r2
 8005026:	461e      	mov	r6, r3
 8005028:	da0d      	bge.n	8005046 <__swhatbuf_r+0x2e>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005030:	f04f 0100 	mov.w	r1, #0
 8005034:	bf14      	ite	ne
 8005036:	2340      	movne	r3, #64	@ 0x40
 8005038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800503c:	2000      	movs	r0, #0
 800503e:	6031      	str	r1, [r6, #0]
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	b016      	add	sp, #88	@ 0x58
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	466a      	mov	r2, sp
 8005048:	f000 f848 	bl	80050dc <_fstat_r>
 800504c:	2800      	cmp	r0, #0
 800504e:	dbec      	blt.n	800502a <__swhatbuf_r+0x12>
 8005050:	9901      	ldr	r1, [sp, #4]
 8005052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800505a:	4259      	negs	r1, r3
 800505c:	4159      	adcs	r1, r3
 800505e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005062:	e7eb      	b.n	800503c <__swhatbuf_r+0x24>

08005064 <__smakebuf_r>:
 8005064:	898b      	ldrh	r3, [r1, #12]
 8005066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005068:	079d      	lsls	r5, r3, #30
 800506a:	4606      	mov	r6, r0
 800506c:	460c      	mov	r4, r1
 800506e:	d507      	bpl.n	8005080 <__smakebuf_r+0x1c>
 8005070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	2301      	movs	r3, #1
 800507a:	6163      	str	r3, [r4, #20]
 800507c:	b003      	add	sp, #12
 800507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005080:	ab01      	add	r3, sp, #4
 8005082:	466a      	mov	r2, sp
 8005084:	f7ff ffc8 	bl	8005018 <__swhatbuf_r>
 8005088:	9f00      	ldr	r7, [sp, #0]
 800508a:	4605      	mov	r5, r0
 800508c:	4639      	mov	r1, r7
 800508e:	4630      	mov	r0, r6
 8005090:	f7ff fbba 	bl	8004808 <_malloc_r>
 8005094:	b948      	cbnz	r0, 80050aa <__smakebuf_r+0x46>
 8005096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509a:	059a      	lsls	r2, r3, #22
 800509c:	d4ee      	bmi.n	800507c <__smakebuf_r+0x18>
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	f043 0302 	orr.w	r3, r3, #2
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	e7e2      	b.n	8005070 <__smakebuf_r+0xc>
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	6020      	str	r0, [r4, #0]
 80050ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050ba:	b15b      	cbz	r3, 80050d4 <__smakebuf_r+0x70>
 80050bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f81d 	bl	8005100 <_isatty_r>
 80050c6:	b128      	cbz	r0, 80050d4 <__smakebuf_r+0x70>
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	431d      	orrs	r5, r3
 80050d8:	81a5      	strh	r5, [r4, #12]
 80050da:	e7cf      	b.n	800507c <__smakebuf_r+0x18>

080050dc <_fstat_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d07      	ldr	r5, [pc, #28]	@ (80050fc <_fstat_r+0x20>)
 80050e0:	2300      	movs	r3, #0
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	f7fb ffe2 	bl	80010b2 <_fstat>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	d102      	bne.n	80050f8 <_fstat_r+0x1c>
 80050f2:	682b      	ldr	r3, [r5, #0]
 80050f4:	b103      	cbz	r3, 80050f8 <_fstat_r+0x1c>
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	bd38      	pop	{r3, r4, r5, pc}
 80050fa:	bf00      	nop
 80050fc:	200004f8 	.word	0x200004f8

08005100 <_isatty_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d06      	ldr	r5, [pc, #24]	@ (800511c <_isatty_r+0x1c>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fb ffe1 	bl	80010d2 <_isatty>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_isatty_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_isatty_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	200004f8 	.word	0x200004f8

08005120 <_sbrk_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d06      	ldr	r5, [pc, #24]	@ (800513c <_sbrk_r+0x1c>)
 8005124:	2300      	movs	r3, #0
 8005126:	4604      	mov	r4, r0
 8005128:	4608      	mov	r0, r1
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	f7fb ffea 	bl	8001104 <_sbrk>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_sbrk_r+0x1a>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	b103      	cbz	r3, 800513a <_sbrk_r+0x1a>
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	200004f8 	.word	0x200004f8

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
