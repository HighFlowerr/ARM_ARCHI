
TEST006_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005010  08005010  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005018  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000006c  08005084  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08005084  0000746c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009755  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd5  00000000  00000000  000107f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  000124c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000607  00000000  00000000  00012cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164eb  00000000  00000000  000132c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fe3  00000000  00000000  000297b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008792b  00000000  00000000  00033795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb0c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  000bb104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000bd974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f04 	.word	0x08004f04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004f04 	.word	0x08004f04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <HAL_GPIO_EXTI_Callback>:
int n = 1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin) // n = 1, 2, 4, 8(Echo mode)
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000594:	d10d      	bne.n	80005b2 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		cls();
 8000596:	f000 fa0f 	bl	80009b8 <cls>
		if(( n <<= 1) > 8) n = 1; // n <<= 1 --> n *= 2
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x38>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4a06      	ldr	r2, [pc, #24]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x38>)
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x38>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	dd02      	ble.n	80005b2 <HAL_GPIO_EXTI_Callback+0x2e>
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x38>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
	}
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b09a      	sub	sp, #104	@ 0x68
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fca9 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f847 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8f9 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 f8d7 	bl	8000784 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f8ab 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("UART - DMA");
 80005da:	4819      	ldr	r0, [pc, #100]	@ (8000640 <main+0x80>)
 80005dc:	f000 fab2 	bl	8000b44 <ProgramStart>
  HAL_UART_Receive_DMA(&huart2, &Buf, MAX_BUF);
 80005e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80005e4:	4917      	ldr	r1, [pc, #92]	@ (8000644 <main+0x84>)
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <main+0x88>)
 80005e8:	f002 fa1a 	bl	8002a20 <HAL_UART_Receive_DMA>
  Cursor(0);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f9f1 	bl	80009d4 <Cursor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cls();
 80005f2:	f000 f9e1 	bl	80009b8 <cls>
  printf("Memory dump mode\r\n");
 80005f6:	4815      	ldr	r0, [pc, #84]	@ (800064c <main+0x8c>)
 80005f8:	f003 fc4a 	bl	8003e90 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(n == 8) // KBD echo mode
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <main+0x90>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b08      	cmp	r3, #8
 8000602:	d110      	bne.n	8000626 <main+0x66>
	{
		char arr[100];
		if(GetBuffer(arr)) // if GetBuffer(arr) == 1
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f9fa 	bl	8000a00 <GetBuffer>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d004      	beq.n	800061c <main+0x5c>
		{
			printf("%s\r\n", arr);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	480f      	ldr	r0, [pc, #60]	@ (8000654 <main+0x94>)
 8000618:	f003 fbd2 	bl	8003dc0 <iprintf>
		}
		HAL_Delay(500);
 800061c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000620:	f000 fcee 	bl	8001000 <HAL_Delay>
 8000624:	e7ea      	b.n	80005fc <main+0x3c>
	}
	else
	{
      printf("\033[3;0H\n");
 8000626:	480c      	ldr	r0, [pc, #48]	@ (8000658 <main+0x98>)
 8000628:	f003 fc32 	bl	8003e90 <puts>
      Dump(n);
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <main+0x90>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f955 	bl	80008e0 <Dump>
      HAL_Delay(200);
 8000636:	20c8      	movs	r0, #200	@ 0xc8
 8000638:	f000 fce2 	bl	8001000 <HAL_Delay>
	if(n == 8) // KBD echo mode
 800063c:	e7de      	b.n	80005fc <main+0x3c>
 800063e:	bf00      	nop
 8000640:	08004f1c 	.word	0x08004f1c
 8000644:	20000130 	.word	0x20000130
 8000648:	20000088 	.word	0x20000088
 800064c:	08004f28 	.word	0x08004f28
 8000650:	20000000 	.word	0x20000000
 8000654:	08004f3c 	.word	0x08004f3c
 8000658:	08004f44 	.word	0x08004f44

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fd10 	bl	8004090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb92 	bl	8001e0c <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ee:	f000 f8df 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fdf4 	bl	80022fc <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f8c9 	bl	80008b0 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 ffe8 	bl	800273c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f89d 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000088 	.word	0x20000088
 8000780:	40004400 	.word	0x40004400

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fd27 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007b0:	2010      	movs	r0, #16
 80007b2:	f000 fd40 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a30      	ldr	r2, [pc, #192]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a29      	ldr	r2, [pc, #164]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a22      	ldr	r2, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <MX_GPIO_Init+0xe4>)
 8000850:	f001 faaa 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4810      	ldr	r0, [pc, #64]	@ (80008ac <MX_GPIO_Init+0xe8>)
 800086c:	f001 f900 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <MX_GPIO_Init+0xe4>)
 8000888:	f001 f8f2 	bl	8001a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2028      	movs	r0, #40	@ 0x28
 8000892:	f000 fcb4 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000896:	2028      	movs	r0, #40	@ 0x28
 8000898:	f000 fccd 	bl	8001236 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <__io_putchar>:
#include "main.h"
#include "myLib.h"
extern UART_HandleTypeDef huart2; //소스가 여러개 있어도 모두 모여서 하나의 실행파일로 만들어진다.

int __io_putchar(int ch)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80008c4:	1d39      	adds	r1, r7, #4
 80008c6:	230a      	movs	r3, #10
 80008c8:	2201      	movs	r2, #1
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <__io_putchar+0x20>)
 80008cc:	f001 ff86 	bl	80027dc <HAL_UART_Transmit>
   return ch;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000088 	.word	0x20000088

080008e0 <Dump>:


myBuffer Buf;

void Dump(int n) // 1,2,4... (byte)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	int max_row = 20;
 80008e8:	2314      	movs	r3, #20
 80008ea:	61fb      	str	r3, [r7, #28]
	int max_col = 16 / n; //if n==1 char, if n==4 int
 80008ec:	2210      	movs	r2, #16
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008f4:	61bb      	str	r3, [r7, #24]
	char str[10];
	sprintf(str, "%%0%dx ", n*2); //%% %02d --> %% 0으로 채워라 printf format string %02x %04x %08x
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	005a      	lsls	r2, r3, #1
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	492a      	ldr	r1, [pc, #168]	@ (80009a8 <Dump+0xc8>)
 8000900:	4618      	mov	r0, r3
 8000902:	f003 facd 	bl	8003ea0 <siprintf>

	for (int i = 0; i < max_row; i++)
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
 800090a:	e043      	b.n	8000994 <Dump+0xb4>
	{
	 for (int j = 0; j < max_col; j++)
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
 8000910:	e036      	b.n	8000980 <Dump+0xa0>
	 {
		 unsigned int v =
				 (n == 1)? Buf.v0[(i*16)+j] :
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d106      	bne.n	8000926 <Dump+0x46>
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	011a      	lsls	r2, r3, #4
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	4413      	add	r3, r2
 8000920:	4a22      	ldr	r2, [pc, #136]	@ (80009ac <Dump+0xcc>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	e017      	b.n	8000956 <Dump+0x76>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d107      	bne.n	800093c <Dump+0x5c>
				 (n == 2)? Buf.v1[(i*8)+j]  :
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092e:	00da      	lsls	r2, r3, #3
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	4413      	add	r3, r2
 8000934:	4a1d      	ldr	r2, [pc, #116]	@ (80009ac <Dump+0xcc>)
 8000936:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800093a:	e00c      	b.n	8000956 <Dump+0x76>
				 (n == 1)? Buf.v0[(i*16)+j] :
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d107      	bne.n	8000952 <Dump+0x72>
				 (n == 4)? Buf.v2[(i*4)+j]  : -1;
 8000942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000944:	009a      	lsls	r2, r3, #2
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	4413      	add	r3, r2
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <Dump+0xcc>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	e001      	b.n	8000956 <Dump+0x76>
				 (n == 1)? Buf.v0[(i*16)+j] :
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
		 unsigned int v =
 8000956:	617b      	str	r3, [r7, #20]

		 printf(str, v);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	6979      	ldr	r1, [r7, #20]
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fa2e 	bl	8003dc0 <iprintf>
		 if(j == (8 / n) - 1) printf("  ");
 8000964:	2208      	movs	r2, #8
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	fb92 f3f3 	sdiv	r3, r2, r3
 800096c:	3b01      	subs	r3, #1
 800096e:	6a3a      	ldr	r2, [r7, #32]
 8000970:	429a      	cmp	r2, r3
 8000972:	d102      	bne.n	800097a <Dump+0x9a>
 8000974:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <Dump+0xd0>)
 8000976:	f003 fa23 	bl	8003dc0 <iprintf>
	 for (int j = 0; j < max_col; j++)
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	3301      	adds	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
 8000980:	6a3a      	ldr	r2, [r7, #32]
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbc4      	blt.n	8000912 <Dump+0x32>
	 }
	 printf("\r\n");
 8000988:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <Dump+0xd4>)
 800098a:	f003 fa81 	bl	8003e90 <puts>
	for (int i = 0; i < max_row; i++)
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	3301      	adds	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
 8000994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbb7      	blt.n	800090c <Dump+0x2c>
	}
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	@ 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08004f4c 	.word	0x08004f4c
 80009ac:	20000130 	.word	0x20000130
 80009b0:	08004f54 	.word	0x08004f54
 80009b4:	08004f58 	.word	0x08004f58

080009b8 <cls>:


void cls()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
   printf("\033[2J\n");    //[y;xH : move cur to (x,y) 2J: 화면 클리어
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <cls+0x14>)
 80009be:	f003 fa67 	bl	8003e90 <puts>

   printf("\033[2J\033[1;1H\n");
 80009c2:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <cls+0x18>)
 80009c4:	f003 fa64 	bl	8003e90 <puts>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	08004f5c 	.word	0x08004f5c
 80009d0:	08004f64 	.word	0x08004f64

080009d4 <Cursor>:


void Cursor(int OnOff)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
   if(OnOff)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <Cursor+0x16>
   {
      printf("\033[?25h\n");
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <Cursor+0x24>)
 80009e4:	f003 fa54 	bl	8003e90 <puts>
   }
   else
   {
      printf("\033[?251\n");
   }
}
 80009e8:	e002      	b.n	80009f0 <Cursor+0x1c>
      printf("\033[?251\n");
 80009ea:	4804      	ldr	r0, [pc, #16]	@ (80009fc <Cursor+0x28>)
 80009ec:	f003 fa50 	bl	8003e90 <puts>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	08004f70 	.word	0x08004f70
 80009fc:	08004f78 	.word	0x08004f78

08000a00 <GetBuffer>:

int head = 0, tail = 0;
int GetBuffer(char* b) // b : char array pointer for destination
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
	char* s = &Buf;		//.v0[0]
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <GetBuffer+0xc8>)
 8000a0e:	60bb      	str	r3, [r7, #8]
	tail = MAX_BUF - huart2.hdmarx->Instance->NDTR;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <GetBuffer+0xcc>)
 8000a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <GetBuffer+0xd0>)
 8000a20:	601a      	str	r2, [r3, #0]
	if(tail > head)
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <GetBuffer+0xd0>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dd14      	ble.n	8000a58 <GetBuffer+0x58>
	{
		memcpy(b, s + head, tail - head); // from head to tail
 8000a2e:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1899      	adds	r1, r3, r2
 8000a38:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <GetBuffer+0xd0>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f003 fb9e 	bl	8004186 <memcpy>
		len = tail - head; //length
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <GetBuffer+0xd0>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e029      	b.n	8000aac <GetBuffer+0xac>
	}
	else if(tail < head)
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <GetBuffer+0xd0>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	da21      	bge.n	8000aa8 <GetBuffer+0xa8>
	{
		memcpy(b, s + head, MAX_BUF - head); //from head to end
 8000a64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1899      	adds	r1, r3, r2
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000a76:	461a      	mov	r2, r3
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f003 fb84 	bl	8004186 <memcpy>
		memcpy(b + MAX_BUF - head, s, tail); //from Start to Tail
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a11      	ldr	r2, [pc, #68]	@ (8000ad0 <GetBuffer+0xd0>)
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fb78 	bl	8004186 <memcpy>
		len = MAX_BUF - head + tail; //length
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <GetBuffer+0xd4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f5c3 72f0 	rsb	r2, r3, #480	@ 0x1e0
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <GetBuffer+0xd0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e001      	b.n	8000aac <GetBuffer+0xac>
	}
	else //tail == head
	{
		len = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
	}
	*(b + len) = 0;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	head = tail;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <GetBuffer+0xd0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <GetBuffer+0xd4>)
 8000abc:	6013      	str	r3, [r2, #0]
	return len;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000130 	.word	0x20000130
 8000acc:	20000088 	.word	0x20000088
 8000ad0:	20000314 	.word	0x20000314
 8000ad4:	20000310 	.word	0x20000310

08000ad8 <__io_getchar>:


int __io_getchar(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
   {
      int r = HAL_UART_Receive(&huart2, &ch, 1, 10);
      if(r == HAL_OK) break;
   }
   */
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000ade:	bf00      	nop
 8000ae0:	1df9      	adds	r1, r7, #7
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <__io_getchar+0x44>)
 8000ae8:	f001 ff03 	bl	80028f2 <HAL_UART_Receive>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f6      	bne.n	8000ae0 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10);   // echo
 8000af2:	1df9      	adds	r1, r7, #7
 8000af4:	230a      	movs	r3, #10
 8000af6:	2201      	movs	r2, #1
 8000af8:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <__io_getchar+0x44>)
 8000afa:	f001 fe6f 	bl	80027dc <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b0d      	cmp	r3, #13
 8000b02:	d105      	bne.n	8000b10 <__io_getchar+0x38>
 8000b04:	230a      	movs	r3, #10
 8000b06:	2201      	movs	r2, #1
 8000b08:	4905      	ldr	r1, [pc, #20]	@ (8000b20 <__io_getchar+0x48>)
 8000b0a:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <__io_getchar+0x44>)
 8000b0c:	f001 fe66 	bl	80027dc <HAL_UART_Transmit>
   return ch;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000088 	.word	0x20000088
 8000b20:	08004f80 	.word	0x08004f80

08000b24 <Wait>:

void Wait()
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000b28:	bf00      	nop
 8000b2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2e:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <Wait+0x1c>)
 8000b30:	f001 f922 	bl	8001d78 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f7      	bne.n	8000b2a <Wait+0x6>
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020800 	.word	0x40020800

08000b44 <ProgramStart>:

void ProgramStart(char *name)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
   printf("\033[2J\033[1;1H\n"); // [y;xH : move cur to (x,y) 2J: 화면 클리어
 8000b4c:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <ProgramStart+0x24>)
 8000b4e:	f003 f99f 	bl	8003e90 <puts>
   printf("Program(%s) started... Blue button to start\r\n", name);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <ProgramStart+0x28>)
 8000b56:	f003 f933 	bl	8003dc0 <iprintf>
   Wait(); //while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000b5a:	f7ff ffe3 	bl	8000b24 <Wait>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08004f64 	.word	0x08004f64
 8000b6c:	08004f84 	.word	0x08004f84

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bae:	2007      	movs	r0, #7
 8000bb0:	f000 fb1a 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <HAL_UART_MspInit+0xf0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d162      	bne.n	8000ca8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <HAL_UART_MspInit+0xf4>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a32      	ldr	r2, [pc, #200]	@ (8000cb4 <HAL_UART_MspInit+0xf4>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <HAL_UART_MspInit+0xf4>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <HAL_UART_MspInit+0xf4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a2b      	ldr	r2, [pc, #172]	@ (8000cb4 <HAL_UART_MspInit+0xf4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <HAL_UART_MspInit+0xf4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4820      	ldr	r0, [pc, #128]	@ (8000cb8 <HAL_UART_MspInit+0xf8>)
 8000c36:	f000 ff1b 	bl	8001a70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c3c:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <HAL_UART_MspInit+0x100>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c7c:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c7e:	f000 faf5 	bl	800126c <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c88:	f7ff fe12 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_UART_MspInit+0xfc>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2026      	movs	r0, #38	@ 0x26
 8000c9e:	f000 faae 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca2:	2026      	movs	r0, #38	@ 0x26
 8000ca4:	f000 fac7 	bl	8001236 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	200000d0 	.word	0x200000d0
 8000cc0:	40026088 	.word	0x40026088

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 f951 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <DMA1_Stream5_IRQHandler+0x10>)
 8000d2a:	f000 fc37 	bl	800159c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000d0 	.word	0x200000d0

08000d38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	@ (8000d48 <USART2_IRQHandler+0x10>)
 8000d3e:	f001 fe95 	bl	8002a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000088 	.word	0x20000088

08000d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d54:	f001 f842 	bl	8001ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00a      	b.n	8000d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d6e:	f7ff feb3 	bl	8000ad8 <__io_getchar>
 8000d72:	4601      	mov	r1, r0
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf0      	blt.n	8000d6e <_read+0x12>
  }

  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e009      	b.n	8000dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd83 	bl	80008bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf1      	blt.n	8000da8 <_write+0x12>
  }
  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_close>:

int _close(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000df6:	605a      	str	r2, [r3, #4]
  return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_isatty>:

int _isatty(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f003 f960 	bl	800412c <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	20000318 	.word	0x20000318
 8000ea0:	20000470 	.word	0x20000470

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f003 f91f 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fb61 	bl	80005c0 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f0c:	08005018 	.word	0x08005018
  ldr r2, =_sbss
 8000f10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f14:	2000046c 	.word	0x2000046c

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f94f 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe0e 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f967 	bl	8001252 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f92f 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	2000000c 	.word	0x2000000c
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	2000031c 	.word	0x2000031c

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000031c 	.word	0x2000031c

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	@ (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff feb6 	bl	8000fe8 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e099      	b.n	80013bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a8:	e00f      	b.n	80012ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012aa:	f7ff fe9d 	bl	8000fe8 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d908      	bls.n	80012ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2220      	movs	r2, #32
 80012bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2203      	movs	r2, #3
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e078      	b.n	80013bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1e8      	bne.n	80012aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <HAL_DMA_Init+0x158>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001320:	2b04      	cmp	r3, #4
 8001322:	d107      	bne.n	8001334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4313      	orrs	r3, r2
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f023 0307 	bic.w	r3, r3, #7
 800134a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	4313      	orrs	r3, r2
 8001354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	2b04      	cmp	r3, #4
 800135c:	d117      	bne.n	800138e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00e      	beq.n	800138e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fb01 	bl	8001978 <DMA_CheckFifoParam>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2240      	movs	r2, #64	@ 0x40
 8001380:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800138a:	2301      	movs	r3, #1
 800138c:	e016      	b.n	80013bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fab8 	bl	800190c <DMA_CalcBaseAndBitshift>
 800139c:	4603      	mov	r3, r0
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a4:	223f      	movs	r2, #63	@ 0x3f
 80013a6:	409a      	lsls	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	f010803f 	.word	0xf010803f

080013c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_DMA_Start_IT+0x26>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e040      	b.n	8001470 <HAL_DMA_Start_IT+0xa8>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12f      	bne.n	8001462 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2202      	movs	r2, #2
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 fa4a 	bl	80018b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001420:	223f      	movs	r2, #63	@ 0x3f
 8001422:	409a      	lsls	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0216 	orr.w	r2, r2, #22
 8001436:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e005      	b.n	800146e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800146a:	2302      	movs	r3, #2
 800146c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800146e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001484:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001486:	f7ff fdaf 	bl	8000fe8 <HAL_GetTick>
 800148a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d008      	beq.n	80014aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e052      	b.n	8001550 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0216 	bic.w	r2, r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <HAL_DMA_Abort+0x62>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0208 	bic.w	r2, r2, #8
 80014e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fa:	e013      	b.n	8001524 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fc:	f7ff fd74 	bl	8000fe8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d90c      	bls.n	8001524 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2220      	movs	r2, #32
 800150e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e015      	b.n	8001550 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1e4      	bne.n	80014fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001536:	223f      	movs	r2, #63	@ 0x3f
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d004      	beq.n	8001576 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00c      	b.n	8001590 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a8:	4b8e      	ldr	r3, [pc, #568]	@ (80017e4 <HAL_DMA_IRQHandler+0x248>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a8e      	ldr	r2, [pc, #568]	@ (80017e8 <HAL_DMA_IRQHandler+0x24c>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0a9b      	lsrs	r3, r3, #10
 80015b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c6:	2208      	movs	r2, #8
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01a      	beq.n	8001608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0204 	bic.w	r2, r2, #4
 80015ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	2208      	movs	r2, #8
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160c:	2201      	movs	r2, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d012      	beq.n	800163e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162a:	2201      	movs	r2, #1
 800162c:	409a      	lsls	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001636:	f043 0202 	orr.w	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001642:	2204      	movs	r2, #4
 8001644:	409a      	lsls	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d012      	beq.n	8001674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001660:	2204      	movs	r2, #4
 8001662:	409a      	lsls	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	f043 0204 	orr.w	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001678:	2210      	movs	r2, #16
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d043      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d03c      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	2210      	movs	r2, #16
 8001698:	409a      	lsls	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d018      	beq.n	80016de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d024      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
 80016ca:	e01f      	b.n	800170c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01b      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	4798      	blx	r3
 80016dc:	e016      	b.n	800170c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001710:	2220      	movs	r2, #32
 8001712:	409a      	lsls	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 808f 	beq.w	800183c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8087 	beq.w	800183c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001732:	2220      	movs	r2, #32
 8001734:	409a      	lsls	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b05      	cmp	r3, #5
 8001744:	d136      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0216 	bic.w	r2, r2, #22
 8001754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_DMA_IRQHandler+0x1da>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0208 	bic.w	r2, r2, #8
 8001784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178a:	223f      	movs	r2, #63	@ 0x3f
 800178c:	409a      	lsls	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d07e      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
        }
        return;
 80017b2:	e079      	b.n	80018a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01d      	beq.n	80017fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10d      	bne.n	80017ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d031      	beq.n	800183c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
 80017e0:	e02c      	b.n	800183c <HAL_DMA_IRQHandler+0x2a0>
 80017e2:	bf00      	nop
 80017e4:	20000004 	.word	0x20000004
 80017e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e01e      	b.n	800183c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10f      	bne.n	800182c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0210 	bic.w	r2, r2, #16
 800181a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	2b00      	cmp	r3, #0
 8001842:	d032      	beq.n	80018aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d022      	beq.n	8001896 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2205      	movs	r2, #5
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3301      	adds	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	429a      	cmp	r2, r3
 8001872:	d307      	bcc.n	8001884 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f2      	bne.n	8001868 <HAL_DMA_IRQHandler+0x2cc>
 8001882:	e000      	b.n	8001886 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001884:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
 80018a6:	e000      	b.n	80018aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80018a8:	bf00      	nop
    }
  }
}
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b40      	cmp	r3, #64	@ 0x40
 80018dc:	d108      	bne.n	80018f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ee:	e007      	b.n	8001900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3b10      	subs	r3, #16
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <DMA_CalcBaseAndBitshift+0x64>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001926:	4a13      	ldr	r2, [pc, #76]	@ (8001974 <DMA_CalcBaseAndBitshift+0x68>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d909      	bls.n	800194e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	1d1a      	adds	r2, r3, #4
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	659a      	str	r2, [r3, #88]	@ 0x58
 800194c:	e007      	b.n	800195e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	aaaaaaab 	.word	0xaaaaaaab
 8001974:	08004fcc 	.word	0x08004fcc

08001978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11f      	bne.n	80019d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d856      	bhi.n	8001a46 <DMA_CheckFifoParam+0xce>
 8001998:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <DMA_CheckFifoParam+0x28>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019c3 	.word	0x080019c3
 80019a8:	080019b1 	.word	0x080019b1
 80019ac:	08001a47 	.word	0x08001a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d046      	beq.n	8001a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c0:	e043      	b.n	8001a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019ca:	d140      	bne.n	8001a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d0:	e03d      	b.n	8001a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019da:	d121      	bne.n	8001a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d837      	bhi.n	8001a52 <DMA_CheckFifoParam+0xda>
 80019e2:	a201      	add	r2, pc, #4	@ (adr r2, 80019e8 <DMA_CheckFifoParam+0x70>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	080019ff 	.word	0x080019ff
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a11 	.word	0x08001a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      break;
 80019fc:	e030      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d025      	beq.n	8001a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a0e:	e022      	b.n	8001a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a18:	d11f      	bne.n	8001a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a1e:	e01c      	b.n	8001a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d903      	bls.n	8001a2e <DMA_CheckFifoParam+0xb6>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d003      	beq.n	8001a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a2c:	e018      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
      break;
 8001a32:	e015      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      break;
 8001a44:	e00b      	b.n	8001a5e <DMA_CheckFifoParam+0xe6>
      break;
 8001a46:	bf00      	nop
 8001a48:	e00a      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e008      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e006      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
 8001a54:	e004      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e002      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e159      	b.n	8001d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8148 	bne.w	8001d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a2 	beq.w	8001d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b57      	ldr	r3, [pc, #348]	@ (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a56      	ldr	r2, [pc, #344]	@ (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b54      	ldr	r3, [pc, #336]	@ (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x202>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a48      	ldr	r2, [pc, #288]	@ (8001d64 <HAL_GPIO_Init+0x2f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x1fe>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a47      	ldr	r2, [pc, #284]	@ (8001d68 <HAL_GPIO_Init+0x2f8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a46      	ldr	r2, [pc, #280]	@ (8001d6c <HAL_GPIO_Init+0x2fc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x1f6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a45      	ldr	r2, [pc, #276]	@ (8001d70 <HAL_GPIO_Init+0x300>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x1f2>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4935      	ldr	r1, [pc, #212]	@ (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c92:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce0:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d10:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d34:	4a0f      	ldr	r2, [pc, #60]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f aea2 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	e001      	b.n	8001d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc4:	e003      	b.n	8001dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	041a      	lsls	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	619a      	str	r2, [r3, #24]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fbc2 	bl	8000584 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e267      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b85      	ldr	r3, [pc, #532]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b82      	ldr	r3, [pc, #520]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b7e      	ldr	r3, [pc, #504]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e242      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b70      	ldr	r3, [pc, #448]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6d      	ldr	r3, [pc, #436]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b69      	ldr	r3, [pc, #420]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a68      	ldr	r2, [pc, #416]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f890 	bl	8000fe8 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f88c 	bl	8000fe8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e207      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f87c 	bl	8000fe8 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f878 	bl	8000fe8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1f3      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1c7      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4937      	ldr	r1, [pc, #220]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_RCC_OscConfig+0x244>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f831 	bl	8000fe8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f82d 	bl	8000fe8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1a8      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4925      	ldr	r1, [pc, #148]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCC_OscConfig+0x244>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f810 	bl	8000fe8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f80c 	bl	8000fe8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e187      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x248>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fff0 	bl	8000fe8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe ffec 	bl	8000fe8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e167      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_OscConfig+0x248>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe ffd9 	bl	8000fe8 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe ffd5 	bl	8000fe8 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d907      	bls.n	8002058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e150      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ea      	bne.n	800203a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b81      	ldr	r3, [pc, #516]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b7a      	ldr	r3, [pc, #488]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b77      	ldr	r3, [pc, #476]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b74      	ldr	r3, [pc, #464]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a73      	ldr	r2, [pc, #460]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7fe ff95 	bl	8000fe8 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7fe ff91 	bl	8000fe8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e10c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2ea>
 80020e8:	4b64      	ldr	r3, [pc, #400]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a63      	ldr	r2, [pc, #396]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f4:	e01c      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x30c>
 80020fe:	4b5f      	ldr	r3, [pc, #380]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002102:	4a5e      	ldr	r2, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	@ 0x70
 800210a:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	4a5b      	ldr	r2, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	@ 0x70
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 8002118:	4b58      	ldr	r3, [pc, #352]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a57      	ldr	r2, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	4b55      	ldr	r3, [pc, #340]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	4a54      	ldr	r2, [pc, #336]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe ff56 	bl	8000fe8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe ff52 	bl	8000fe8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0cb      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b49      	ldr	r3, [pc, #292]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCC_OscConfig+0x334>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe ff40 	bl	8000fe8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe ff3c 	bl	8000fe8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0b5      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	4a38      	ldr	r2, [pc, #224]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a1 	beq.w	80022ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021aa:	4b34      	ldr	r3, [pc, #208]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d05c      	beq.n	8002270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d141      	bne.n	8002242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe ff10 	bl	8000fe8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe ff0c 	bl	8000fe8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e087      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b27      	ldr	r3, [pc, #156]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	491b      	ldr	r1, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fee5 	bl	8000fe8 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fee1 	bl	8000fe8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e05c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x416>
 8002240:	e054      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fece 	bl	8000fe8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe feca 	bl	8000fe8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e045      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x444>
 800226e:	e03d      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e038      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x4ec>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d028      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d121      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d111      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0cc      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b68      	ldr	r3, [pc, #416]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d90c      	bls.n	8002338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a52      	ldr	r2, [pc, #328]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d044      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d119      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b3f      	ldr	r3, [pc, #252]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e067      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4934      	ldr	r1, [pc, #208]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fdfc 	bl	8000fe8 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fdf8 	bl	8000fe8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e04f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d20c      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fd5c 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00
 80024b8:	40023800 	.word	0x40023800
 80024bc:	08004fb4 	.word	0x08004fb4
 80024c0:	20000004 	.word	0x20000004
 80024c4:	20000008 	.word	0x20000008

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024cc:	b094      	sub	sp, #80	@ 0x50
 80024ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d8:	2300      	movs	r3, #0
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e0:	4b79      	ldr	r3, [pc, #484]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d00d      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x40>
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	f200 80e1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fa:	e0db      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002500:	e0db      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002502:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002506:	e0d8      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002512:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	2200      	movs	r2, #0
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	633b      	str	r3, [r7, #48]	@ 0x30
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
 8002536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	6139      	str	r1, [r7, #16]
 8002558:	4629      	mov	r1, r5
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800256c:	4659      	mov	r1, fp
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002576:	4651      	mov	r1, sl
 8002578:	018a      	lsls	r2, r1, #6
 800257a:	4651      	mov	r1, sl
 800257c:	ebb2 0801 	subs.w	r8, r2, r1
 8002580:	4659      	mov	r1, fp
 8002582:	eb63 0901 	sbc.w	r9, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	eb18 0303 	adds.w	r3, r8, r3
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	462b      	mov	r3, r5
 80025a8:	eb49 0303 	adc.w	r3, r9, r3
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ba:	4629      	mov	r1, r5
 80025bc:	024b      	lsls	r3, r1, #9
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c4:	4621      	mov	r1, r4
 80025c6:	024a      	lsls	r2, r1, #9
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025d8:	f7fd fe52 	bl	8000280 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e4:	e058      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	2200      	movs	r2, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	4611      	mov	r1, r2
 80025f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002600:	4642      	mov	r2, r8
 8002602:	464b      	mov	r3, r9
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	0159      	lsls	r1, r3, #5
 800260e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002612:	0150      	lsls	r0, r2, #5
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4641      	mov	r1, r8
 800261a:	ebb2 0a01 	subs.w	sl, r2, r1
 800261e:	4649      	mov	r1, r9
 8002620:	eb63 0b01 	sbc.w	fp, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002638:	ebb2 040a 	subs.w	r4, r2, sl
 800263c:	eb63 050b 	sbc.w	r5, r3, fp
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4643      	mov	r3, r8
 8002656:	18e3      	adds	r3, r4, r3
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	464b      	mov	r3, r9
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266e:	4629      	mov	r1, r5
 8002670:	028b      	lsls	r3, r1, #10
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002678:	4621      	mov	r1, r4
 800267a:	028a      	lsls	r2, r1, #10
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	61fa      	str	r2, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	f7fd fdf8 	bl	8000280 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80026a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3750      	adds	r7, #80	@ 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08004fc4 	.word	0x08004fc4

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffdc 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	08004fc4 	.word	0x08004fc4

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e042      	b.n	80027d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fa2c 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	@ 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 ffe7 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d175      	bne.n	80028e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_Transmit+0x2c>
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e06e      	b.n	80028ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2221      	movs	r2, #33	@ 0x21
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe fbe5 	bl	8000fe8 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0x6c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002850:	e02e      	b.n	80028b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	@ 0x80
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fcbf 	bl	80031e0 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e03a      	b.n	80028ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3302      	adds	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e007      	b.n	80028a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cb      	bne.n	8002852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	@ 0x40
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fc8b 	bl	80031e0 <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	@ 0x28
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	f040 8081 	bne.w	8002a16 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_UART_Receive+0x2e>
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e079      	b.n	8002a18 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2222      	movs	r2, #34	@ 0x22
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002938:	f7fe fb56 	bl	8000fe8 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002952:	d108      	bne.n	8002966 <HAL_UART_Receive+0x74>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e003      	b.n	800296e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800296e:	e047      	b.n	8002a00 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2200      	movs	r2, #0
 8002978:	2120      	movs	r1, #32
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fc30 	bl	80031e0 <UART_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e042      	b.n	8002a18 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10c      	bne.n	80029b2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	3302      	adds	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e01f      	b.n	80029f2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ba:	d007      	beq.n	80029cc <HAL_UART_Receive+0xda>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_UART_Receive+0xe8>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e008      	b.n	80029ec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3301      	adds	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1b2      	bne.n	8002970 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d112      	bne.n	8002a60 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_UART_Receive_DMA+0x26>
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00b      	b.n	8002a62 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fc1c 	bl	8003294 <UART_Start_Receive_DMA>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	e000      	b.n	8002a62 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0ba      	sub	sp, #232	@ 0xe8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x66>
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fd83 	bl	80035d6 <UART_Receive_IT>
      return;
 8002ad0:	e25b      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80de 	beq.w	8002c98 <HAL_UART_IRQHandler+0x22c>
 8002adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80d1 	beq.w	8002c98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xae>
 8002b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0xd2>
 8002b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xf6>
 8002b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d011      	beq.n	8002b92 <HAL_UART_IRQHandler+0x126>
 8002b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f043 0208 	orr.w	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 81f2 	beq.w	8002f80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_UART_IRQHandler+0x14e>
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fd0e 	bl	80035d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc4:	2b40      	cmp	r3, #64	@ 0x40
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_UART_IRQHandler+0x17a>
 8002bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04f      	beq.n	8002c86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fc16 	bl	8003418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	d141      	bne.n	8002c7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c36:	e841 2300 	strex	r3, r2, [r1]
 8002c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1d9      	bne.n	8002bfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	4a7e      	ldr	r2, [pc, #504]	@ (8002e4c <HAL_UART_IRQHandler+0x3e0>)
 8002c54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fc7c 	bl	8001558 <HAL_DMA_Abort_IT>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c70:	4610      	mov	r0, r2
 8002c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00e      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f99e 	bl	8002fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e00a      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f99a 	bl	8002fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	e006      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f996 	bl	8002fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c92:	e175      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	bf00      	nop
    return;
 8002c96:	e173      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 814f 	bne.w	8002f40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8148 	beq.w	8002f40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8141 	beq.w	8002f40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	f040 80b6 	bne.w	8002e50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8145 	beq.w	8002f84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d02:	429a      	cmp	r2, r3
 8002d04:	f080 813e 	bcs.w	8002f84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1a:	f000 8088 	beq.w	8002e2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1d9      	bne.n	8002d1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e1      	bne.n	8002d6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e3      	bne.n	8002da6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e3      	bne.n	8002dec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fb25 	bl	8001478 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8c1 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e4a:	e09b      	b.n	8002f84 <HAL_UART_IRQHandler+0x518>
 8002e4c:	080034df 	.word	0x080034df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 808e 	beq.w	8002f88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8089 	beq.w	8002f88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e3      	bne.n	8002e76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ed2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e3      	bne.n	8002eae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f18:	61fa      	str	r2, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	617b      	str	r3, [r7, #20]
   return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e3      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f847 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f3e:	e023      	b.n	8002f88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_UART_IRQHandler+0x4f4>
 8002f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fad4 	bl	8003506 <UART_Transmit_IT>
    return;
 8002f5e:	e014      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <HAL_UART_IRQHandler+0x51e>
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fb14 	bl	80035a6 <UART_EndTransmit_IT>
    return;
 8002f7e:	e004      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f80:	bf00      	nop
 8002f82:	e002      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f88:	bf00      	nop
  }
}
 8002f8a:	37e8      	adds	r7, #232	@ 0xe8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b09c      	sub	sp, #112	@ 0x70
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d172      	bne.n	80030e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003002:	2200      	movs	r2, #0
 8003004:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800301c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800301e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003026:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003028:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800302c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e5      	bne.n	8003006 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800304a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	667b      	str	r3, [r7, #100]	@ 0x64
 8003052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800305a:	647a      	str	r2, [r7, #68]	@ 0x44
 800305c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3314      	adds	r3, #20
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	623b      	str	r3, [r7, #32]
   return(result);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003084:	663b      	str	r3, [r7, #96]	@ 0x60
 8003086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800308e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e5      	bne.n	800306e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d119      	bne.n	80030e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0310 	bic.w	r3, r3, #16
 80030c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80030d2:	61fa      	str	r2, [r7, #28]
 80030d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	69b9      	ldr	r1, [r7, #24]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	617b      	str	r3, [r7, #20]
   return(result);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e8:	2200      	movs	r2, #0
 80030ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030f8:	4619      	mov	r1, r3
 80030fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80030fc:	f7ff ff66 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003100:	e002      	b.n	8003108 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003102:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003104:	f7fd fa34 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8003108:	bf00      	nop
 800310a:	3770      	adds	r7, #112	@ 0x70
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7ff ff48 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800313c:	e002      	b.n	8003144 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff ff30 	bl	8002fa4 <HAL_UART_RxHalfCpltCallback>
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	2b80      	cmp	r3, #128	@ 0x80
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b21      	cmp	r3, #33	@ 0x21
 800317e:	d108      	bne.n	8003192 <UART_DMAError+0x46>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800318c:	68b8      	ldr	r0, [r7, #8]
 800318e:	f000 f91b 	bl	80033c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b22      	cmp	r3, #34	@ 0x22
 80031b2:	d108      	bne.n	80031c6 <UART_DMAError+0x7a>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80031c0:	68b8      	ldr	r0, [r7, #8]
 80031c2:	f000 f929 	bl	8003418 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d2:	68b8      	ldr	r0, [r7, #8]
 80031d4:	f7ff fef0 	bl	8002fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f0:	e03b      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d037      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fd fef5 	bl	8000fe8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <UART_WaitOnFlagUntilTimeout+0x30>
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e03a      	b.n	800328a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d023      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b80      	cmp	r3, #128	@ 0x80
 8003226:	d020      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b40      	cmp	r3, #64	@ 0x40
 800322c:	d01d      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b08      	cmp	r3, #8
 800323a:	d116      	bne.n	800326a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f8e0 	bl	8003418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2208      	movs	r2, #8
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	429a      	cmp	r2, r3
 8003286:	d0b4      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b098      	sub	sp, #96	@ 0x60
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2222      	movs	r2, #34	@ 0x22
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	4a3e      	ldr	r2, [pc, #248]	@ (80033bc <UART_Start_Receive_DMA+0x128>)
 80032c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	4a3d      	ldr	r2, [pc, #244]	@ (80033c0 <UART_Start_Receive_DMA+0x12c>)
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	4a3c      	ldr	r2, [pc, #240]	@ (80033c4 <UART_Start_Receive_DMA+0x130>)
 80032d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	2200      	movs	r2, #0
 80032da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f7fe f868 	bl	80013c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d019      	beq.n	800334a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003336:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003338:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800333c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	657b      	str	r3, [r7, #84]	@ 0x54
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800336a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e5      	bne.n	800334a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	617b      	str	r3, [r7, #20]
   return(result);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003394:	653b      	str	r3, [r7, #80]	@ 0x50
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800339e:	627a      	str	r2, [r7, #36]	@ 0x24
 80033a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6a39      	ldr	r1, [r7, #32]
 80033a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3760      	adds	r7, #96	@ 0x60
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	08002fe5 	.word	0x08002fe5
 80033c0:	08003111 	.word	0x08003111
 80033c4:	0800314d 	.word	0x0800314d

080033c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	@ 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	61ba      	str	r2, [r7, #24]
 80033f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800340c:	bf00      	nop
 800340e:	3724      	adds	r7, #36	@ 0x24
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b095      	sub	sp, #84	@ 0x54
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003440:	643a      	str	r2, [r7, #64]	@ 0x40
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003446:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3314      	adds	r3, #20
 800345a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	61fb      	str	r3, [r7, #28]
   return(result);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003474:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003476:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800347a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e5      	bne.n	8003454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	2b01      	cmp	r3, #1
 800348e:	d119      	bne.n	80034c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 0310 	bic.w	r3, r3, #16
 80034a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b0:	61ba      	str	r2, [r7, #24]
 80034b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6979      	ldr	r1, [r7, #20]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	613b      	str	r3, [r7, #16]
   return(result);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034d2:	bf00      	nop
 80034d4:	3754      	adds	r7, #84	@ 0x54
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff fd5d 	bl	8002fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b21      	cmp	r3, #33	@ 0x21
 8003518:	d13e      	bne.n	8003598 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003522:	d114      	bne.n	800354e <UART_Transmit_IT+0x48>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d110      	bne.n	800354e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	1c9a      	adds	r2, r3, #2
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]
 800354c:	e008      	b.n	8003560 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6211      	str	r1, [r2, #32]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4619      	mov	r1, r3
 800356e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003582:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003592:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fce2 	bl	8002f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b08c      	sub	sp, #48	@ 0x30
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b22      	cmp	r3, #34	@ 0x22
 80035e8:	f040 80ae 	bne.w	8003748 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f4:	d117      	bne.n	8003626 <UART_Receive_IT+0x50>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003614:	b29a      	uxth	r2, r3
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	1c9a      	adds	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	@ 0x28
 8003624:	e026      	b.n	8003674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003638:	d007      	beq.n	800364a <UART_Receive_IT+0x74>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <UART_Receive_IT+0x82>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e008      	b.n	800366a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003664:	b2da      	uxtb	r2, r3
 8003666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29b      	uxth	r3, r3
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4619      	mov	r1, r3
 8003682:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003684:	2b00      	cmp	r3, #0
 8003686:	d15d      	bne.n	8003744 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0220 	bic.w	r2, r2, #32
 8003696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d135      	bne.n	800373a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	613b      	str	r3, [r7, #16]
   return(result);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f023 0310 	bic.w	r3, r3, #16
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f4:	623a      	str	r2, [r7, #32]
 80036f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	6a3a      	ldr	r2, [r7, #32]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	61bb      	str	r3, [r7, #24]
   return(result);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b10      	cmp	r3, #16
 8003714:	d10a      	bne.n	800372c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fc4a 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
 8003738:	e002      	b.n	8003740 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fc ff18 	bl	8000570 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e002      	b.n	800374a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3730      	adds	r7, #48	@ 0x30
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b0c0      	sub	sp, #256	@ 0x100
 800375a:	af00      	add	r7, sp, #0
 800375c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037ac:	f021 010c 	bic.w	r1, r1, #12
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	ea40 0301 	orr.w	r3, r0, r1
 80037da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a20 <UART_SetConfig+0x2cc>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0xa0>
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003a24 <UART_SetConfig+0x2d0>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7fe ff8e 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 80037f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7fe ff75 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8003802:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003810:	f040 810c 	bne.w	8003a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800381e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	1891      	adds	r1, r2, r2
 800382c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800382e:	415b      	adcs	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003836:	4621      	mov	r1, r4
 8003838:	eb12 0801 	adds.w	r8, r2, r1
 800383c:	4629      	mov	r1, r5
 800383e:	eb43 0901 	adc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003864:	462b      	mov	r3, r5
 8003866:	eb49 0303 	adc.w	r3, r9, r3
 800386a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800387a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800387e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003882:	460b      	mov	r3, r1
 8003884:	18db      	adds	r3, r3, r3
 8003886:	653b      	str	r3, [r7, #80]	@ 0x50
 8003888:	4613      	mov	r3, r2
 800388a:	eb42 0303 	adc.w	r3, r2, r3
 800388e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003898:	f7fc fcf2 	bl	8000280 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4b61      	ldr	r3, [pc, #388]	@ (8003a28 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2302 	umull	r2, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	011c      	lsls	r4, r3, #4
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038c4:	415b      	adcs	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038cc:	4641      	mov	r1, r8
 80038ce:	eb12 0a01 	adds.w	sl, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0b01 	adc.w	fp, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	4692      	mov	sl, r2
 80038ee:	469b      	mov	fp, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	eb1a 0303 	adds.w	r3, sl, r3
 80038f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003900:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003910:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003918:	460b      	mov	r3, r1
 800391a:	18db      	adds	r3, r3, r3
 800391c:	643b      	str	r3, [r7, #64]	@ 0x40
 800391e:	4613      	mov	r3, r2
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	647b      	str	r3, [r7, #68]	@ 0x44
 8003926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800392a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800392e:	f7fc fca7 	bl	8000280 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	@ 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800394e:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <UART_SetConfig+0x2d4>)
 8003950:	fba3 2302 	umull	r2, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800395c:	441c      	add	r4, r3
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003968:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800396c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003978:	415b      	adcs	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6339      	str	r1, [r7, #48]	@ 0x30
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ea:	f7fc fc49 	bl	8000280 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <UART_SetConfig+0x2d4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	@ 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3332      	adds	r3, #50	@ 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	@ (8003a28 <UART_SetConfig+0x2d4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a1c:	e106      	b.n	8003c2c <UART_SetConfig+0x4d8>
 8003a1e:	bf00      	nop
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40011400 	.word	0x40011400
 8003a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	6239      	str	r1, [r7, #32]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0501 	adc.w	r5, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a74:	464b      	mov	r3, r9
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	008a      	lsls	r2, r1, #2
 8003aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aac:	f7fc fbe8 	bl	8000280 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4b60      	ldr	r3, [pc, #384]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011c      	lsls	r4, r3, #4
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ac8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	61b9      	str	r1, [r7, #24]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b38:	4649      	mov	r1, r9
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b42:	4641      	mov	r1, r8
 8003b44:	008a      	lsls	r2, r1, #2
 8003b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b4a:	f7fc fb99 	bl	8000280 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003b56:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2264      	movs	r2, #100	@ 0x64
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	@ 0x32
 8003b68:	4a33      	ldr	r2, [pc, #204]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	1891      	adds	r1, r2, r2
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	415b      	adcs	r3, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b94:	4641      	mov	r1, r8
 8003b96:	1851      	adds	r1, r2, r1
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	414b      	adcs	r3, r1
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bac:	4659      	mov	r1, fp
 8003bae:	00cb      	lsls	r3, r1, #3
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	00ca      	lsls	r2, r1, #3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	460a      	mov	r2, r1
 8003bca:	eb42 0303 	adc.w	r3, r2, r3
 8003bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003be8:	4649      	mov	r1, r9
 8003bea:	008b      	lsls	r3, r1, #2
 8003bec:	4641      	mov	r1, r8
 8003bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	008a      	lsls	r2, r1, #2
 8003bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bfa:	f7fc fb41 	bl	8000280 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003c04:	fba3 1302 	umull	r1, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	2164      	movs	r1, #100	@ 0x64
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	3332      	adds	r3, #50	@ 0x32
 8003c16:	4a08      	ldr	r2, [pc, #32]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4422      	add	r2, r4
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c32:	46bd      	mov	sp, r7
 8003c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	e9c0 3300 	strd	r3, r3, [r0]
 8003c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4a:	6083      	str	r3, [r0, #8]
 8003c4c:	8181      	strh	r1, [r0, #12]
 8003c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c50:	81c2      	strh	r2, [r0, #14]
 8003c52:	6183      	str	r3, [r0, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	@ 0x5c
 8003c5a:	f000 fa19 	bl	8004090 <memset>
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <std+0x58>)
 8003c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <std+0x5c>)
 8003c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c66:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <std+0x60>)
 8003c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <std+0x64>)
 8003c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <std+0x68>)
 8003c70:	6224      	str	r4, [r4, #32]
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d006      	beq.n	8003c84 <std+0x48>
 8003c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c7a:	4294      	cmp	r4, r2
 8003c7c:	d002      	beq.n	8003c84 <std+0x48>
 8003c7e:	33d0      	adds	r3, #208	@ 0xd0
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d105      	bne.n	8003c90 <std+0x54>
 8003c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	f000 ba78 	b.w	8004180 <__retarget_lock_init_recursive>
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	08003ee1 	.word	0x08003ee1
 8003c98:	08003f03 	.word	0x08003f03
 8003c9c:	08003f3b 	.word	0x08003f3b
 8003ca0:	08003f5f 	.word	0x08003f5f
 8003ca4:	20000320 	.word	0x20000320

08003ca8 <stdio_exit_handler>:
 8003ca8:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <stdio_exit_handler+0xc>)
 8003caa:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <stdio_exit_handler+0x10>)
 8003cac:	4803      	ldr	r0, [pc, #12]	@ (8003cbc <stdio_exit_handler+0x14>)
 8003cae:	f000 b869 	b.w	8003d84 <_fwalk_sglue>
 8003cb2:	bf00      	nop
 8003cb4:	20000010 	.word	0x20000010
 8003cb8:	08004ced 	.word	0x08004ced
 8003cbc:	20000020 	.word	0x20000020

08003cc0 <cleanup_stdio>:
 8003cc0:	6841      	ldr	r1, [r0, #4]
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <cleanup_stdio+0x34>)
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	4604      	mov	r4, r0
 8003cca:	d001      	beq.n	8003cd0 <cleanup_stdio+0x10>
 8003ccc:	f001 f80e 	bl	8004cec <_fflush_r>
 8003cd0:	68a1      	ldr	r1, [r4, #8]
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <cleanup_stdio+0x38>)
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d002      	beq.n	8003cde <cleanup_stdio+0x1e>
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f001 f807 	bl	8004cec <_fflush_r>
 8003cde:	68e1      	ldr	r1, [r4, #12]
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <cleanup_stdio+0x3c>)
 8003ce2:	4299      	cmp	r1, r3
 8003ce4:	d004      	beq.n	8003cf0 <cleanup_stdio+0x30>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f000 bffe 	b.w	8004cec <_fflush_r>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000320 	.word	0x20000320
 8003cf8:	20000388 	.word	0x20000388
 8003cfc:	200003f0 	.word	0x200003f0

08003d00 <global_stdio_init.part.0>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <global_stdio_init.part.0+0x30>)
 8003d04:	4c0b      	ldr	r4, [pc, #44]	@ (8003d34 <global_stdio_init.part.0+0x34>)
 8003d06:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <global_stdio_init.part.0+0x38>)
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2104      	movs	r1, #4
 8003d10:	f7ff ff94 	bl	8003c3c <std>
 8003d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2109      	movs	r1, #9
 8003d1c:	f7ff ff8e 	bl	8003c3c <std>
 8003d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d24:	2202      	movs	r2, #2
 8003d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2a:	2112      	movs	r1, #18
 8003d2c:	f7ff bf86 	b.w	8003c3c <std>
 8003d30:	20000458 	.word	0x20000458
 8003d34:	20000320 	.word	0x20000320
 8003d38:	08003ca9 	.word	0x08003ca9

08003d3c <__sfp_lock_acquire>:
 8003d3c:	4801      	ldr	r0, [pc, #4]	@ (8003d44 <__sfp_lock_acquire+0x8>)
 8003d3e:	f000 ba20 	b.w	8004182 <__retarget_lock_acquire_recursive>
 8003d42:	bf00      	nop
 8003d44:	20000461 	.word	0x20000461

08003d48 <__sfp_lock_release>:
 8003d48:	4801      	ldr	r0, [pc, #4]	@ (8003d50 <__sfp_lock_release+0x8>)
 8003d4a:	f000 ba1b 	b.w	8004184 <__retarget_lock_release_recursive>
 8003d4e:	bf00      	nop
 8003d50:	20000461 	.word	0x20000461

08003d54 <__sinit>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	f7ff fff0 	bl	8003d3c <__sfp_lock_acquire>
 8003d5c:	6a23      	ldr	r3, [r4, #32]
 8003d5e:	b11b      	cbz	r3, 8003d68 <__sinit+0x14>
 8003d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d64:	f7ff bff0 	b.w	8003d48 <__sfp_lock_release>
 8003d68:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <__sinit+0x28>)
 8003d6a:	6223      	str	r3, [r4, #32]
 8003d6c:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <__sinit+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f5      	bne.n	8003d60 <__sinit+0xc>
 8003d74:	f7ff ffc4 	bl	8003d00 <global_stdio_init.part.0>
 8003d78:	e7f2      	b.n	8003d60 <__sinit+0xc>
 8003d7a:	bf00      	nop
 8003d7c:	08003cc1 	.word	0x08003cc1
 8003d80:	20000458 	.word	0x20000458

08003d84 <_fwalk_sglue>:
 8003d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4688      	mov	r8, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d94:	f1b9 0901 	subs.w	r9, r9, #1
 8003d98:	d505      	bpl.n	8003da6 <_fwalk_sglue+0x22>
 8003d9a:	6824      	ldr	r4, [r4, #0]
 8003d9c:	2c00      	cmp	r4, #0
 8003d9e:	d1f7      	bne.n	8003d90 <_fwalk_sglue+0xc>
 8003da0:	4630      	mov	r0, r6
 8003da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d907      	bls.n	8003dbc <_fwalk_sglue+0x38>
 8003dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d003      	beq.n	8003dbc <_fwalk_sglue+0x38>
 8003db4:	4629      	mov	r1, r5
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	4306      	orrs	r6, r0
 8003dbc:	3568      	adds	r5, #104	@ 0x68
 8003dbe:	e7e9      	b.n	8003d94 <_fwalk_sglue+0x10>

08003dc0 <iprintf>:
 8003dc0:	b40f      	push	{r0, r1, r2, r3}
 8003dc2:	b507      	push	{r0, r1, r2, lr}
 8003dc4:	4906      	ldr	r1, [pc, #24]	@ (8003de0 <iprintf+0x20>)
 8003dc6:	ab04      	add	r3, sp, #16
 8003dc8:	6808      	ldr	r0, [r1, #0]
 8003dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dce:	6881      	ldr	r1, [r0, #8]
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	f000 fc61 	bl	8004698 <_vfiprintf_r>
 8003dd6:	b003      	add	sp, #12
 8003dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ddc:	b004      	add	sp, #16
 8003dde:	4770      	bx	lr
 8003de0:	2000001c 	.word	0x2000001c

08003de4 <_puts_r>:
 8003de4:	6a03      	ldr	r3, [r0, #32]
 8003de6:	b570      	push	{r4, r5, r6, lr}
 8003de8:	6884      	ldr	r4, [r0, #8]
 8003dea:	4605      	mov	r5, r0
 8003dec:	460e      	mov	r6, r1
 8003dee:	b90b      	cbnz	r3, 8003df4 <_puts_r+0x10>
 8003df0:	f7ff ffb0 	bl	8003d54 <__sinit>
 8003df4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003df6:	07db      	lsls	r3, r3, #31
 8003df8:	d405      	bmi.n	8003e06 <_puts_r+0x22>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	0598      	lsls	r0, r3, #22
 8003dfe:	d402      	bmi.n	8003e06 <_puts_r+0x22>
 8003e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e02:	f000 f9be 	bl	8004182 <__retarget_lock_acquire_recursive>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	0719      	lsls	r1, r3, #28
 8003e0a:	d502      	bpl.n	8003e12 <_puts_r+0x2e>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d135      	bne.n	8003e7e <_puts_r+0x9a>
 8003e12:	4621      	mov	r1, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 f8e5 	bl	8003fe4 <__swsetup_r>
 8003e1a:	b380      	cbz	r0, 8003e7e <_puts_r+0x9a>
 8003e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e22:	07da      	lsls	r2, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_puts_r+0x4e>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	059b      	lsls	r3, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_puts_r+0x4e>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e2e:	f000 f9a9 	bl	8004184 <__retarget_lock_release_recursive>
 8003e32:	4628      	mov	r0, r5
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da04      	bge.n	8003e44 <_puts_r+0x60>
 8003e3a:	69a2      	ldr	r2, [r4, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dc17      	bgt.n	8003e70 <_puts_r+0x8c>
 8003e40:	290a      	cmp	r1, #10
 8003e42:	d015      	beq.n	8003e70 <_puts_r+0x8c>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	6022      	str	r2, [r4, #0]
 8003e4a:	7019      	strb	r1, [r3, #0]
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e52:	3b01      	subs	r3, #1
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	2900      	cmp	r1, #0
 8003e58:	d1ed      	bne.n	8003e36 <_puts_r+0x52>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da11      	bge.n	8003e82 <_puts_r+0x9e>
 8003e5e:	4622      	mov	r2, r4
 8003e60:	210a      	movs	r1, #10
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f87f 	bl	8003f66 <__swbuf_r>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d0d7      	beq.n	8003e1c <_puts_r+0x38>
 8003e6c:	250a      	movs	r5, #10
 8003e6e:	e7d7      	b.n	8003e20 <_puts_r+0x3c>
 8003e70:	4622      	mov	r2, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f877 	bl	8003f66 <__swbuf_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d1e7      	bne.n	8003e4c <_puts_r+0x68>
 8003e7c:	e7ce      	b.n	8003e1c <_puts_r+0x38>
 8003e7e:	3e01      	subs	r6, #1
 8003e80:	e7e4      	b.n	8003e4c <_puts_r+0x68>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	6022      	str	r2, [r4, #0]
 8003e88:	220a      	movs	r2, #10
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e7ee      	b.n	8003e6c <_puts_r+0x88>
	...

08003e90 <puts>:
 8003e90:	4b02      	ldr	r3, [pc, #8]	@ (8003e9c <puts+0xc>)
 8003e92:	4601      	mov	r1, r0
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f7ff bfa5 	b.w	8003de4 <_puts_r>
 8003e9a:	bf00      	nop
 8003e9c:	2000001c 	.word	0x2000001c

08003ea0 <siprintf>:
 8003ea0:	b40e      	push	{r1, r2, r3}
 8003ea2:	b500      	push	{lr}
 8003ea4:	b09c      	sub	sp, #112	@ 0x70
 8003ea6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ea8:	9002      	str	r0, [sp, #8]
 8003eaa:	9006      	str	r0, [sp, #24]
 8003eac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003eb0:	4809      	ldr	r0, [pc, #36]	@ (8003ed8 <siprintf+0x38>)
 8003eb2:	9107      	str	r1, [sp, #28]
 8003eb4:	9104      	str	r1, [sp, #16]
 8003eb6:	4909      	ldr	r1, [pc, #36]	@ (8003edc <siprintf+0x3c>)
 8003eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ebc:	9105      	str	r1, [sp, #20]
 8003ebe:	6800      	ldr	r0, [r0, #0]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	a902      	add	r1, sp, #8
 8003ec4:	f000 fac2 	bl	800444c <_svfiprintf_r>
 8003ec8:	9b02      	ldr	r3, [sp, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	b01c      	add	sp, #112	@ 0x70
 8003ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed4:	b003      	add	sp, #12
 8003ed6:	4770      	bx	lr
 8003ed8:	2000001c 	.word	0x2000001c
 8003edc:	ffff0208 	.word	0xffff0208

08003ee0 <__sread>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee8:	f000 f8fc 	bl	80040e4 <_read_r>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	bfab      	itete	ge
 8003ef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ef4:	181b      	addge	r3, r3, r0
 8003ef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003efa:	bfac      	ite	ge
 8003efc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003efe:	81a3      	strhlt	r3, [r4, #12]
 8003f00:	bd10      	pop	{r4, pc}

08003f02 <__swrite>:
 8003f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f06:	461f      	mov	r7, r3
 8003f08:	898b      	ldrh	r3, [r1, #12]
 8003f0a:	05db      	lsls	r3, r3, #23
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	4616      	mov	r6, r2
 8003f12:	d505      	bpl.n	8003f20 <__swrite+0x1e>
 8003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f18:	2302      	movs	r3, #2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f000 f8d0 	bl	80040c0 <_lseek_r>
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	463b      	mov	r3, r7
 8003f30:	4628      	mov	r0, r5
 8003f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f36:	f000 b8e7 	b.w	8004108 <_write_r>

08003f3a <__sseek>:
 8003f3a:	b510      	push	{r4, lr}
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f42:	f000 f8bd 	bl	80040c0 <_lseek_r>
 8003f46:	1c43      	adds	r3, r0, #1
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	bf15      	itete	ne
 8003f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f56:	81a3      	strheq	r3, [r4, #12]
 8003f58:	bf18      	it	ne
 8003f5a:	81a3      	strhne	r3, [r4, #12]
 8003f5c:	bd10      	pop	{r4, pc}

08003f5e <__sclose>:
 8003f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f62:	f000 b89d 	b.w	80040a0 <_close_r>

08003f66 <__swbuf_r>:
 8003f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f68:	460e      	mov	r6, r1
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	b118      	cbz	r0, 8003f78 <__swbuf_r+0x12>
 8003f70:	6a03      	ldr	r3, [r0, #32]
 8003f72:	b90b      	cbnz	r3, 8003f78 <__swbuf_r+0x12>
 8003f74:	f7ff feee 	bl	8003d54 <__sinit>
 8003f78:	69a3      	ldr	r3, [r4, #24]
 8003f7a:	60a3      	str	r3, [r4, #8]
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	071a      	lsls	r2, r3, #28
 8003f80:	d501      	bpl.n	8003f86 <__swbuf_r+0x20>
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	b943      	cbnz	r3, 8003f98 <__swbuf_r+0x32>
 8003f86:	4621      	mov	r1, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f82b 	bl	8003fe4 <__swsetup_r>
 8003f8e:	b118      	cbz	r0, 8003f98 <__swbuf_r+0x32>
 8003f90:	f04f 37ff 	mov.w	r7, #4294967295
 8003f94:	4638      	mov	r0, r7
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	6922      	ldr	r2, [r4, #16]
 8003f9c:	1a98      	subs	r0, r3, r2
 8003f9e:	6963      	ldr	r3, [r4, #20]
 8003fa0:	b2f6      	uxtb	r6, r6
 8003fa2:	4283      	cmp	r3, r0
 8003fa4:	4637      	mov	r7, r6
 8003fa6:	dc05      	bgt.n	8003fb4 <__swbuf_r+0x4e>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4628      	mov	r0, r5
 8003fac:	f000 fe9e 	bl	8004cec <_fflush_r>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d1ed      	bne.n	8003f90 <__swbuf_r+0x2a>
 8003fb4:	68a3      	ldr	r3, [r4, #8]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	701e      	strb	r6, [r3, #0]
 8003fc2:	6962      	ldr	r2, [r4, #20]
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d004      	beq.n	8003fd4 <__swbuf_r+0x6e>
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	07db      	lsls	r3, r3, #31
 8003fce:	d5e1      	bpl.n	8003f94 <__swbuf_r+0x2e>
 8003fd0:	2e0a      	cmp	r6, #10
 8003fd2:	d1df      	bne.n	8003f94 <__swbuf_r+0x2e>
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 fe88 	bl	8004cec <_fflush_r>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d0d9      	beq.n	8003f94 <__swbuf_r+0x2e>
 8003fe0:	e7d6      	b.n	8003f90 <__swbuf_r+0x2a>
	...

08003fe4 <__swsetup_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4b29      	ldr	r3, [pc, #164]	@ (800408c <__swsetup_r+0xa8>)
 8003fe8:	4605      	mov	r5, r0
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	460c      	mov	r4, r1
 8003fee:	b118      	cbz	r0, 8003ff8 <__swsetup_r+0x14>
 8003ff0:	6a03      	ldr	r3, [r0, #32]
 8003ff2:	b90b      	cbnz	r3, 8003ff8 <__swsetup_r+0x14>
 8003ff4:	f7ff feae 	bl	8003d54 <__sinit>
 8003ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffc:	0719      	lsls	r1, r3, #28
 8003ffe:	d422      	bmi.n	8004046 <__swsetup_r+0x62>
 8004000:	06da      	lsls	r2, r3, #27
 8004002:	d407      	bmi.n	8004014 <__swsetup_r+0x30>
 8004004:	2209      	movs	r2, #9
 8004006:	602a      	str	r2, [r5, #0]
 8004008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	e033      	b.n	800407c <__swsetup_r+0x98>
 8004014:	0758      	lsls	r0, r3, #29
 8004016:	d512      	bpl.n	800403e <__swsetup_r+0x5a>
 8004018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800401a:	b141      	cbz	r1, 800402e <__swsetup_r+0x4a>
 800401c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004020:	4299      	cmp	r1, r3
 8004022:	d002      	beq.n	800402a <__swsetup_r+0x46>
 8004024:	4628      	mov	r0, r5
 8004026:	f000 f8bd 	bl	80041a4 <_free_r>
 800402a:	2300      	movs	r3, #0
 800402c:	6363      	str	r3, [r4, #52]	@ 0x34
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004034:	81a3      	strh	r3, [r4, #12]
 8004036:	2300      	movs	r3, #0
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	6923      	ldr	r3, [r4, #16]
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	6923      	ldr	r3, [r4, #16]
 8004048:	b94b      	cbnz	r3, 800405e <__swsetup_r+0x7a>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004054:	d003      	beq.n	800405e <__swsetup_r+0x7a>
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	f000 fe95 	bl	8004d88 <__smakebuf_r>
 800405e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004062:	f013 0201 	ands.w	r2, r3, #1
 8004066:	d00a      	beq.n	800407e <__swsetup_r+0x9a>
 8004068:	2200      	movs	r2, #0
 800406a:	60a2      	str	r2, [r4, #8]
 800406c:	6962      	ldr	r2, [r4, #20]
 800406e:	4252      	negs	r2, r2
 8004070:	61a2      	str	r2, [r4, #24]
 8004072:	6922      	ldr	r2, [r4, #16]
 8004074:	b942      	cbnz	r2, 8004088 <__swsetup_r+0xa4>
 8004076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800407a:	d1c5      	bne.n	8004008 <__swsetup_r+0x24>
 800407c:	bd38      	pop	{r3, r4, r5, pc}
 800407e:	0799      	lsls	r1, r3, #30
 8004080:	bf58      	it	pl
 8004082:	6962      	ldrpl	r2, [r4, #20]
 8004084:	60a2      	str	r2, [r4, #8]
 8004086:	e7f4      	b.n	8004072 <__swsetup_r+0x8e>
 8004088:	2000      	movs	r0, #0
 800408a:	e7f7      	b.n	800407c <__swsetup_r+0x98>
 800408c:	2000001c 	.word	0x2000001c

08004090 <memset>:
 8004090:	4402      	add	r2, r0
 8004092:	4603      	mov	r3, r0
 8004094:	4293      	cmp	r3, r2
 8004096:	d100      	bne.n	800409a <memset+0xa>
 8004098:	4770      	bx	lr
 800409a:	f803 1b01 	strb.w	r1, [r3], #1
 800409e:	e7f9      	b.n	8004094 <memset+0x4>

080040a0 <_close_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4d06      	ldr	r5, [pc, #24]	@ (80040bc <_close_r+0x1c>)
 80040a4:	2300      	movs	r3, #0
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	f7fc fe8f 	bl	8000dce <_close>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_close_r+0x1a>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_close_r+0x1a>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	2000045c 	.word	0x2000045c

080040c0 <_lseek_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d07      	ldr	r5, [pc, #28]	@ (80040e0 <_lseek_r+0x20>)
 80040c4:	4604      	mov	r4, r0
 80040c6:	4608      	mov	r0, r1
 80040c8:	4611      	mov	r1, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	602a      	str	r2, [r5, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7fc fea4 	bl	8000e1c <_lseek>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_lseek_r+0x1e>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_lseek_r+0x1e>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	2000045c 	.word	0x2000045c

080040e4 <_read_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4d07      	ldr	r5, [pc, #28]	@ (8004104 <_read_r+0x20>)
 80040e8:	4604      	mov	r4, r0
 80040ea:	4608      	mov	r0, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	2200      	movs	r2, #0
 80040f0:	602a      	str	r2, [r5, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7fc fe32 	bl	8000d5c <_read>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_read_r+0x1e>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_read_r+0x1e>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	2000045c 	.word	0x2000045c

08004108 <_write_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4d07      	ldr	r5, [pc, #28]	@ (8004128 <_write_r+0x20>)
 800410c:	4604      	mov	r4, r0
 800410e:	4608      	mov	r0, r1
 8004110:	4611      	mov	r1, r2
 8004112:	2200      	movs	r2, #0
 8004114:	602a      	str	r2, [r5, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f7fc fe3d 	bl	8000d96 <_write>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_write_r+0x1e>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_write_r+0x1e>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	2000045c 	.word	0x2000045c

0800412c <__errno>:
 800412c:	4b01      	ldr	r3, [pc, #4]	@ (8004134 <__errno+0x8>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000001c 	.word	0x2000001c

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4d0d      	ldr	r5, [pc, #52]	@ (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	@ (8004174 <__libc_init_array+0x3c>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2600      	movs	r6, #0
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4d0b      	ldr	r5, [pc, #44]	@ (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	@ (800417c <__libc_init_array+0x44>)
 800414c:	f000 feda 	bl	8004f04 <_init>
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2600      	movs	r6, #0
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f855 3b04 	ldr.w	r3, [r5], #4
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	08005010 	.word	0x08005010
 8004174:	08005010 	.word	0x08005010
 8004178:	08005010 	.word	0x08005010
 800417c:	08005014 	.word	0x08005014

08004180 <__retarget_lock_init_recursive>:
 8004180:	4770      	bx	lr

08004182 <__retarget_lock_acquire_recursive>:
 8004182:	4770      	bx	lr

08004184 <__retarget_lock_release_recursive>:
 8004184:	4770      	bx	lr

08004186 <memcpy>:
 8004186:	440a      	add	r2, r1
 8004188:	4291      	cmp	r1, r2
 800418a:	f100 33ff 	add.w	r3, r0, #4294967295
 800418e:	d100      	bne.n	8004192 <memcpy+0xc>
 8004190:	4770      	bx	lr
 8004192:	b510      	push	{r4, lr}
 8004194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800419c:	4291      	cmp	r1, r2
 800419e:	d1f9      	bne.n	8004194 <memcpy+0xe>
 80041a0:	bd10      	pop	{r4, pc}
	...

080041a4 <_free_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d041      	beq.n	8004230 <_free_r+0x8c>
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f0c      	subs	r4, r1, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	18e4      	addlt	r4, r4, r3
 80041b8:	f000 f8e0 	bl	800437c <__malloc_lock>
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <_free_r+0x90>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	b933      	cbnz	r3, 80041d0 <_free_r+0x2c>
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	6014      	str	r4, [r2, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041cc:	f000 b8dc 	b.w	8004388 <__malloc_unlock>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x42>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	1821      	adds	r1, r4, r0
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf01      	itttt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	1809      	addeq	r1, r1, r0
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	e7ed      	b.n	80041c2 <_free_r+0x1e>
 80041e6:	461a      	mov	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b10b      	cbz	r3, 80041f0 <_free_r+0x4c>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d9fa      	bls.n	80041e6 <_free_r+0x42>
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	1850      	adds	r0, r2, r1
 80041f4:	42a0      	cmp	r0, r4
 80041f6:	d10b      	bne.n	8004210 <_free_r+0x6c>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	4401      	add	r1, r0
 80041fc:	1850      	adds	r0, r2, r1
 80041fe:	4283      	cmp	r3, r0
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	d1e0      	bne.n	80041c6 <_free_r+0x22>
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6053      	str	r3, [r2, #4]
 800420a:	4408      	add	r0, r1
 800420c:	6010      	str	r0, [r2, #0]
 800420e:	e7da      	b.n	80041c6 <_free_r+0x22>
 8004210:	d902      	bls.n	8004218 <_free_r+0x74>
 8004212:	230c      	movs	r3, #12
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	e7d6      	b.n	80041c6 <_free_r+0x22>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	bf04      	itt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	bf04      	itt	eq
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6054      	str	r4, [r2, #4]
 800422e:	e7ca      	b.n	80041c6 <_free_r+0x22>
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	20000468 	.word	0x20000468

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0f      	ldr	r6, [pc, #60]	@ (8004278 <sbrk_aligned+0x40>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 fe18 	bl	8004e78 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 fe13 	bl	8004e78 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d103      	bne.n	800425e <sbrk_aligned+0x26>
 8004256:	f04f 34ff 	mov.w	r4, #4294967295
 800425a:	4620      	mov	r0, r4
 800425c:	bd70      	pop	{r4, r5, r6, pc}
 800425e:	1cc4      	adds	r4, r0, #3
 8004260:	f024 0403 	bic.w	r4, r4, #3
 8004264:	42a0      	cmp	r0, r4
 8004266:	d0f8      	beq.n	800425a <sbrk_aligned+0x22>
 8004268:	1a21      	subs	r1, r4, r0
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fe04 	bl	8004e78 <_sbrk_r>
 8004270:	3001      	adds	r0, #1
 8004272:	d1f2      	bne.n	800425a <sbrk_aligned+0x22>
 8004274:	e7ef      	b.n	8004256 <sbrk_aligned+0x1e>
 8004276:	bf00      	nop
 8004278:	20000464 	.word	0x20000464

0800427c <_malloc_r>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	f025 0503 	bic.w	r5, r5, #3
 8004286:	3508      	adds	r5, #8
 8004288:	2d0c      	cmp	r5, #12
 800428a:	bf38      	it	cc
 800428c:	250c      	movcc	r5, #12
 800428e:	2d00      	cmp	r5, #0
 8004290:	4606      	mov	r6, r0
 8004292:	db01      	blt.n	8004298 <_malloc_r+0x1c>
 8004294:	42a9      	cmp	r1, r5
 8004296:	d904      	bls.n	80042a2 <_malloc_r+0x26>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004378 <_malloc_r+0xfc>
 80042a6:	f000 f869 	bl	800437c <__malloc_lock>
 80042aa:	f8d8 3000 	ldr.w	r3, [r8]
 80042ae:	461c      	mov	r4, r3
 80042b0:	bb44      	cbnz	r4, 8004304 <_malloc_r+0x88>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff ffbf 	bl	8004238 <sbrk_aligned>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	4604      	mov	r4, r0
 80042be:	d158      	bne.n	8004372 <_malloc_r+0xf6>
 80042c0:	f8d8 4000 	ldr.w	r4, [r8]
 80042c4:	4627      	mov	r7, r4
 80042c6:	2f00      	cmp	r7, #0
 80042c8:	d143      	bne.n	8004352 <_malloc_r+0xd6>
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	d04b      	beq.n	8004366 <_malloc_r+0xea>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	eb04 0903 	add.w	r9, r4, r3
 80042d8:	f000 fdce 	bl	8004e78 <_sbrk_r>
 80042dc:	4581      	cmp	r9, r0
 80042de:	d142      	bne.n	8004366 <_malloc_r+0xea>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	1a6d      	subs	r5, r5, r1
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ffa6 	bl	8004238 <sbrk_aligned>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d03a      	beq.n	8004366 <_malloc_r+0xea>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	442b      	add	r3, r5
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	f8d8 3000 	ldr.w	r3, [r8]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	bb62      	cbnz	r2, 8004358 <_malloc_r+0xdc>
 80042fe:	f8c8 7000 	str.w	r7, [r8]
 8004302:	e00f      	b.n	8004324 <_malloc_r+0xa8>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	1b52      	subs	r2, r2, r5
 8004308:	d420      	bmi.n	800434c <_malloc_r+0xd0>
 800430a:	2a0b      	cmp	r2, #11
 800430c:	d917      	bls.n	800433e <_malloc_r+0xc2>
 800430e:	1961      	adds	r1, r4, r5
 8004310:	42a3      	cmp	r3, r4
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	bf18      	it	ne
 8004316:	6059      	strne	r1, [r3, #4]
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	bf08      	it	eq
 800431c:	f8c8 1000 	streq.w	r1, [r8]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f82f 	bl	8004388 <__malloc_unlock>
 800432a:	f104 000b 	add.w	r0, r4, #11
 800432e:	1d23      	adds	r3, r4, #4
 8004330:	f020 0007 	bic.w	r0, r0, #7
 8004334:	1ac2      	subs	r2, r0, r3
 8004336:	bf1c      	itt	ne
 8004338:	1a1b      	subne	r3, r3, r0
 800433a:	50a3      	strne	r3, [r4, r2]
 800433c:	e7af      	b.n	800429e <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	f8c8 2000 	streq.w	r2, [r8]
 8004348:	605a      	strne	r2, [r3, #4]
 800434a:	e7eb      	b.n	8004324 <_malloc_r+0xa8>
 800434c:	4623      	mov	r3, r4
 800434e:	6864      	ldr	r4, [r4, #4]
 8004350:	e7ae      	b.n	80042b0 <_malloc_r+0x34>
 8004352:	463c      	mov	r4, r7
 8004354:	687f      	ldr	r7, [r7, #4]
 8004356:	e7b6      	b.n	80042c6 <_malloc_r+0x4a>
 8004358:	461a      	mov	r2, r3
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	42a3      	cmp	r3, r4
 800435e:	d1fb      	bne.n	8004358 <_malloc_r+0xdc>
 8004360:	2300      	movs	r3, #0
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa8>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f80c 	bl	8004388 <__malloc_unlock>
 8004370:	e794      	b.n	800429c <_malloc_r+0x20>
 8004372:	6005      	str	r5, [r0, #0]
 8004374:	e7d6      	b.n	8004324 <_malloc_r+0xa8>
 8004376:	bf00      	nop
 8004378:	20000468 	.word	0x20000468

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_lock+0x8>)
 800437e:	f7ff bf00 	b.w	8004182 <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	20000460 	.word	0x20000460

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	@ (8004390 <__malloc_unlock+0x8>)
 800438a:	f7ff befb 	b.w	8004184 <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	20000460 	.word	0x20000460

08004394 <__ssputs_r>:
 8004394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	688e      	ldr	r6, [r1, #8]
 800439a:	461f      	mov	r7, r3
 800439c:	42be      	cmp	r6, r7
 800439e:	680b      	ldr	r3, [r1, #0]
 80043a0:	4682      	mov	sl, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	4690      	mov	r8, r2
 80043a6:	d82d      	bhi.n	8004404 <__ssputs_r+0x70>
 80043a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043b0:	d026      	beq.n	8004400 <__ssputs_r+0x6c>
 80043b2:	6965      	ldr	r5, [r4, #20]
 80043b4:	6909      	ldr	r1, [r1, #16]
 80043b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ba:	eba3 0901 	sub.w	r9, r3, r1
 80043be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043c2:	1c7b      	adds	r3, r7, #1
 80043c4:	444b      	add	r3, r9
 80043c6:	106d      	asrs	r5, r5, #1
 80043c8:	429d      	cmp	r5, r3
 80043ca:	bf38      	it	cc
 80043cc:	461d      	movcc	r5, r3
 80043ce:	0553      	lsls	r3, r2, #21
 80043d0:	d527      	bpl.n	8004422 <__ssputs_r+0x8e>
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7ff ff52 	bl	800427c <_malloc_r>
 80043d8:	4606      	mov	r6, r0
 80043da:	b360      	cbz	r0, 8004436 <__ssputs_r+0xa2>
 80043dc:	6921      	ldr	r1, [r4, #16]
 80043de:	464a      	mov	r2, r9
 80043e0:	f7ff fed1 	bl	8004186 <memcpy>
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ee:	81a3      	strh	r3, [r4, #12]
 80043f0:	6126      	str	r6, [r4, #16]
 80043f2:	6165      	str	r5, [r4, #20]
 80043f4:	444e      	add	r6, r9
 80043f6:	eba5 0509 	sub.w	r5, r5, r9
 80043fa:	6026      	str	r6, [r4, #0]
 80043fc:	60a5      	str	r5, [r4, #8]
 80043fe:	463e      	mov	r6, r7
 8004400:	42be      	cmp	r6, r7
 8004402:	d900      	bls.n	8004406 <__ssputs_r+0x72>
 8004404:	463e      	mov	r6, r7
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	4632      	mov	r2, r6
 800440a:	4641      	mov	r1, r8
 800440c:	f000 fcf8 	bl	8004e00 <memmove>
 8004410:	68a3      	ldr	r3, [r4, #8]
 8004412:	1b9b      	subs	r3, r3, r6
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	4433      	add	r3, r6
 800441a:	6023      	str	r3, [r4, #0]
 800441c:	2000      	movs	r0, #0
 800441e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004422:	462a      	mov	r2, r5
 8004424:	f000 fd38 	bl	8004e98 <_realloc_r>
 8004428:	4606      	mov	r6, r0
 800442a:	2800      	cmp	r0, #0
 800442c:	d1e0      	bne.n	80043f0 <__ssputs_r+0x5c>
 800442e:	6921      	ldr	r1, [r4, #16]
 8004430:	4650      	mov	r0, sl
 8004432:	f7ff feb7 	bl	80041a4 <_free_r>
 8004436:	230c      	movs	r3, #12
 8004438:	f8ca 3000 	str.w	r3, [sl]
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004442:	81a3      	strh	r3, [r4, #12]
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e7e9      	b.n	800441e <__ssputs_r+0x8a>
	...

0800444c <_svfiprintf_r>:
 800444c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004450:	4698      	mov	r8, r3
 8004452:	898b      	ldrh	r3, [r1, #12]
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	b09d      	sub	sp, #116	@ 0x74
 8004458:	4607      	mov	r7, r0
 800445a:	460d      	mov	r5, r1
 800445c:	4614      	mov	r4, r2
 800445e:	d510      	bpl.n	8004482 <_svfiprintf_r+0x36>
 8004460:	690b      	ldr	r3, [r1, #16]
 8004462:	b973      	cbnz	r3, 8004482 <_svfiprintf_r+0x36>
 8004464:	2140      	movs	r1, #64	@ 0x40
 8004466:	f7ff ff09 	bl	800427c <_malloc_r>
 800446a:	6028      	str	r0, [r5, #0]
 800446c:	6128      	str	r0, [r5, #16]
 800446e:	b930      	cbnz	r0, 800447e <_svfiprintf_r+0x32>
 8004470:	230c      	movs	r3, #12
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	b01d      	add	sp, #116	@ 0x74
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447e:	2340      	movs	r3, #64	@ 0x40
 8004480:	616b      	str	r3, [r5, #20]
 8004482:	2300      	movs	r3, #0
 8004484:	9309      	str	r3, [sp, #36]	@ 0x24
 8004486:	2320      	movs	r3, #32
 8004488:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800448c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004490:	2330      	movs	r3, #48	@ 0x30
 8004492:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004630 <_svfiprintf_r+0x1e4>
 8004496:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800449a:	f04f 0901 	mov.w	r9, #1
 800449e:	4623      	mov	r3, r4
 80044a0:	469a      	mov	sl, r3
 80044a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044a6:	b10a      	cbz	r2, 80044ac <_svfiprintf_r+0x60>
 80044a8:	2a25      	cmp	r2, #37	@ 0x25
 80044aa:	d1f9      	bne.n	80044a0 <_svfiprintf_r+0x54>
 80044ac:	ebba 0b04 	subs.w	fp, sl, r4
 80044b0:	d00b      	beq.n	80044ca <_svfiprintf_r+0x7e>
 80044b2:	465b      	mov	r3, fp
 80044b4:	4622      	mov	r2, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ff6b 	bl	8004394 <__ssputs_r>
 80044be:	3001      	adds	r0, #1
 80044c0:	f000 80a7 	beq.w	8004612 <_svfiprintf_r+0x1c6>
 80044c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044c6:	445a      	add	r2, fp
 80044c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80044ca:	f89a 3000 	ldrb.w	r3, [sl]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 809f 	beq.w	8004612 <_svfiprintf_r+0x1c6>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f04f 32ff 	mov.w	r2, #4294967295
 80044da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044de:	f10a 0a01 	add.w	sl, sl, #1
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	9307      	str	r3, [sp, #28]
 80044e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80044ec:	4654      	mov	r4, sl
 80044ee:	2205      	movs	r2, #5
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	484e      	ldr	r0, [pc, #312]	@ (8004630 <_svfiprintf_r+0x1e4>)
 80044f6:	f7fb fe73 	bl	80001e0 <memchr>
 80044fa:	9a04      	ldr	r2, [sp, #16]
 80044fc:	b9d8      	cbnz	r0, 8004536 <_svfiprintf_r+0xea>
 80044fe:	06d0      	lsls	r0, r2, #27
 8004500:	bf44      	itt	mi
 8004502:	2320      	movmi	r3, #32
 8004504:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004508:	0711      	lsls	r1, r2, #28
 800450a:	bf44      	itt	mi
 800450c:	232b      	movmi	r3, #43	@ 0x2b
 800450e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004512:	f89a 3000 	ldrb.w	r3, [sl]
 8004516:	2b2a      	cmp	r3, #42	@ 0x2a
 8004518:	d015      	beq.n	8004546 <_svfiprintf_r+0xfa>
 800451a:	9a07      	ldr	r2, [sp, #28]
 800451c:	4654      	mov	r4, sl
 800451e:	2000      	movs	r0, #0
 8004520:	f04f 0c0a 	mov.w	ip, #10
 8004524:	4621      	mov	r1, r4
 8004526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800452a:	3b30      	subs	r3, #48	@ 0x30
 800452c:	2b09      	cmp	r3, #9
 800452e:	d94b      	bls.n	80045c8 <_svfiprintf_r+0x17c>
 8004530:	b1b0      	cbz	r0, 8004560 <_svfiprintf_r+0x114>
 8004532:	9207      	str	r2, [sp, #28]
 8004534:	e014      	b.n	8004560 <_svfiprintf_r+0x114>
 8004536:	eba0 0308 	sub.w	r3, r0, r8
 800453a:	fa09 f303 	lsl.w	r3, r9, r3
 800453e:	4313      	orrs	r3, r2
 8004540:	9304      	str	r3, [sp, #16]
 8004542:	46a2      	mov	sl, r4
 8004544:	e7d2      	b.n	80044ec <_svfiprintf_r+0xa0>
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	1d19      	adds	r1, r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	9103      	str	r1, [sp, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	bfbb      	ittet	lt
 8004552:	425b      	neglt	r3, r3
 8004554:	f042 0202 	orrlt.w	r2, r2, #2
 8004558:	9307      	strge	r3, [sp, #28]
 800455a:	9307      	strlt	r3, [sp, #28]
 800455c:	bfb8      	it	lt
 800455e:	9204      	strlt	r2, [sp, #16]
 8004560:	7823      	ldrb	r3, [r4, #0]
 8004562:	2b2e      	cmp	r3, #46	@ 0x2e
 8004564:	d10a      	bne.n	800457c <_svfiprintf_r+0x130>
 8004566:	7863      	ldrb	r3, [r4, #1]
 8004568:	2b2a      	cmp	r3, #42	@ 0x2a
 800456a:	d132      	bne.n	80045d2 <_svfiprintf_r+0x186>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	9203      	str	r2, [sp, #12]
 8004574:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004578:	3402      	adds	r4, #2
 800457a:	9305      	str	r3, [sp, #20]
 800457c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004640 <_svfiprintf_r+0x1f4>
 8004580:	7821      	ldrb	r1, [r4, #0]
 8004582:	2203      	movs	r2, #3
 8004584:	4650      	mov	r0, sl
 8004586:	f7fb fe2b 	bl	80001e0 <memchr>
 800458a:	b138      	cbz	r0, 800459c <_svfiprintf_r+0x150>
 800458c:	9b04      	ldr	r3, [sp, #16]
 800458e:	eba0 000a 	sub.w	r0, r0, sl
 8004592:	2240      	movs	r2, #64	@ 0x40
 8004594:	4082      	lsls	r2, r0
 8004596:	4313      	orrs	r3, r2
 8004598:	3401      	adds	r4, #1
 800459a:	9304      	str	r3, [sp, #16]
 800459c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a0:	4824      	ldr	r0, [pc, #144]	@ (8004634 <_svfiprintf_r+0x1e8>)
 80045a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045a6:	2206      	movs	r2, #6
 80045a8:	f7fb fe1a 	bl	80001e0 <memchr>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d036      	beq.n	800461e <_svfiprintf_r+0x1d2>
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <_svfiprintf_r+0x1ec>)
 80045b2:	bb1b      	cbnz	r3, 80045fc <_svfiprintf_r+0x1b0>
 80045b4:	9b03      	ldr	r3, [sp, #12]
 80045b6:	3307      	adds	r3, #7
 80045b8:	f023 0307 	bic.w	r3, r3, #7
 80045bc:	3308      	adds	r3, #8
 80045be:	9303      	str	r3, [sp, #12]
 80045c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045c2:	4433      	add	r3, r6
 80045c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045c6:	e76a      	b.n	800449e <_svfiprintf_r+0x52>
 80045c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045cc:	460c      	mov	r4, r1
 80045ce:	2001      	movs	r0, #1
 80045d0:	e7a8      	b.n	8004524 <_svfiprintf_r+0xd8>
 80045d2:	2300      	movs	r3, #0
 80045d4:	3401      	adds	r4, #1
 80045d6:	9305      	str	r3, [sp, #20]
 80045d8:	4619      	mov	r1, r3
 80045da:	f04f 0c0a 	mov.w	ip, #10
 80045de:	4620      	mov	r0, r4
 80045e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045e4:	3a30      	subs	r2, #48	@ 0x30
 80045e6:	2a09      	cmp	r2, #9
 80045e8:	d903      	bls.n	80045f2 <_svfiprintf_r+0x1a6>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0c6      	beq.n	800457c <_svfiprintf_r+0x130>
 80045ee:	9105      	str	r1, [sp, #20]
 80045f0:	e7c4      	b.n	800457c <_svfiprintf_r+0x130>
 80045f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f6:	4604      	mov	r4, r0
 80045f8:	2301      	movs	r3, #1
 80045fa:	e7f0      	b.n	80045de <_svfiprintf_r+0x192>
 80045fc:	ab03      	add	r3, sp, #12
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	462a      	mov	r2, r5
 8004602:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <_svfiprintf_r+0x1f0>)
 8004604:	a904      	add	r1, sp, #16
 8004606:	4638      	mov	r0, r7
 8004608:	f3af 8000 	nop.w
 800460c:	1c42      	adds	r2, r0, #1
 800460e:	4606      	mov	r6, r0
 8004610:	d1d6      	bne.n	80045c0 <_svfiprintf_r+0x174>
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	065b      	lsls	r3, r3, #25
 8004616:	f53f af2d 	bmi.w	8004474 <_svfiprintf_r+0x28>
 800461a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800461c:	e72c      	b.n	8004478 <_svfiprintf_r+0x2c>
 800461e:	ab03      	add	r3, sp, #12
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	462a      	mov	r2, r5
 8004624:	4b05      	ldr	r3, [pc, #20]	@ (800463c <_svfiprintf_r+0x1f0>)
 8004626:	a904      	add	r1, sp, #16
 8004628:	4638      	mov	r0, r7
 800462a:	f000 f9bb 	bl	80049a4 <_printf_i>
 800462e:	e7ed      	b.n	800460c <_svfiprintf_r+0x1c0>
 8004630:	08004fd4 	.word	0x08004fd4
 8004634:	08004fde 	.word	0x08004fde
 8004638:	00000000 	.word	0x00000000
 800463c:	08004395 	.word	0x08004395
 8004640:	08004fda 	.word	0x08004fda

08004644 <__sfputc_r>:
 8004644:	6893      	ldr	r3, [r2, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	b410      	push	{r4}
 800464c:	6093      	str	r3, [r2, #8]
 800464e:	da08      	bge.n	8004662 <__sfputc_r+0x1e>
 8004650:	6994      	ldr	r4, [r2, #24]
 8004652:	42a3      	cmp	r3, r4
 8004654:	db01      	blt.n	800465a <__sfputc_r+0x16>
 8004656:	290a      	cmp	r1, #10
 8004658:	d103      	bne.n	8004662 <__sfputc_r+0x1e>
 800465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465e:	f7ff bc82 	b.w	8003f66 <__swbuf_r>
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	1c58      	adds	r0, r3, #1
 8004666:	6010      	str	r0, [r2, #0]
 8004668:	7019      	strb	r1, [r3, #0]
 800466a:	4608      	mov	r0, r1
 800466c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004670:	4770      	bx	lr

08004672 <__sfputs_r>:
 8004672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004674:	4606      	mov	r6, r0
 8004676:	460f      	mov	r7, r1
 8004678:	4614      	mov	r4, r2
 800467a:	18d5      	adds	r5, r2, r3
 800467c:	42ac      	cmp	r4, r5
 800467e:	d101      	bne.n	8004684 <__sfputs_r+0x12>
 8004680:	2000      	movs	r0, #0
 8004682:	e007      	b.n	8004694 <__sfputs_r+0x22>
 8004684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004688:	463a      	mov	r2, r7
 800468a:	4630      	mov	r0, r6
 800468c:	f7ff ffda 	bl	8004644 <__sfputc_r>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d1f3      	bne.n	800467c <__sfputs_r+0xa>
 8004694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004698 <_vfiprintf_r>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	460d      	mov	r5, r1
 800469e:	b09d      	sub	sp, #116	@ 0x74
 80046a0:	4614      	mov	r4, r2
 80046a2:	4698      	mov	r8, r3
 80046a4:	4606      	mov	r6, r0
 80046a6:	b118      	cbz	r0, 80046b0 <_vfiprintf_r+0x18>
 80046a8:	6a03      	ldr	r3, [r0, #32]
 80046aa:	b90b      	cbnz	r3, 80046b0 <_vfiprintf_r+0x18>
 80046ac:	f7ff fb52 	bl	8003d54 <__sinit>
 80046b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046b2:	07d9      	lsls	r1, r3, #31
 80046b4:	d405      	bmi.n	80046c2 <_vfiprintf_r+0x2a>
 80046b6:	89ab      	ldrh	r3, [r5, #12]
 80046b8:	059a      	lsls	r2, r3, #22
 80046ba:	d402      	bmi.n	80046c2 <_vfiprintf_r+0x2a>
 80046bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046be:	f7ff fd60 	bl	8004182 <__retarget_lock_acquire_recursive>
 80046c2:	89ab      	ldrh	r3, [r5, #12]
 80046c4:	071b      	lsls	r3, r3, #28
 80046c6:	d501      	bpl.n	80046cc <_vfiprintf_r+0x34>
 80046c8:	692b      	ldr	r3, [r5, #16]
 80046ca:	b99b      	cbnz	r3, 80046f4 <_vfiprintf_r+0x5c>
 80046cc:	4629      	mov	r1, r5
 80046ce:	4630      	mov	r0, r6
 80046d0:	f7ff fc88 	bl	8003fe4 <__swsetup_r>
 80046d4:	b170      	cbz	r0, 80046f4 <_vfiprintf_r+0x5c>
 80046d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046d8:	07dc      	lsls	r4, r3, #31
 80046da:	d504      	bpl.n	80046e6 <_vfiprintf_r+0x4e>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	b01d      	add	sp, #116	@ 0x74
 80046e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e6:	89ab      	ldrh	r3, [r5, #12]
 80046e8:	0598      	lsls	r0, r3, #22
 80046ea:	d4f7      	bmi.n	80046dc <_vfiprintf_r+0x44>
 80046ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ee:	f7ff fd49 	bl	8004184 <__retarget_lock_release_recursive>
 80046f2:	e7f3      	b.n	80046dc <_vfiprintf_r+0x44>
 80046f4:	2300      	movs	r3, #0
 80046f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f8:	2320      	movs	r3, #32
 80046fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004702:	2330      	movs	r3, #48	@ 0x30
 8004704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048b4 <_vfiprintf_r+0x21c>
 8004708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800470c:	f04f 0901 	mov.w	r9, #1
 8004710:	4623      	mov	r3, r4
 8004712:	469a      	mov	sl, r3
 8004714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004718:	b10a      	cbz	r2, 800471e <_vfiprintf_r+0x86>
 800471a:	2a25      	cmp	r2, #37	@ 0x25
 800471c:	d1f9      	bne.n	8004712 <_vfiprintf_r+0x7a>
 800471e:	ebba 0b04 	subs.w	fp, sl, r4
 8004722:	d00b      	beq.n	800473c <_vfiprintf_r+0xa4>
 8004724:	465b      	mov	r3, fp
 8004726:	4622      	mov	r2, r4
 8004728:	4629      	mov	r1, r5
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff ffa1 	bl	8004672 <__sfputs_r>
 8004730:	3001      	adds	r0, #1
 8004732:	f000 80a7 	beq.w	8004884 <_vfiprintf_r+0x1ec>
 8004736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004738:	445a      	add	r2, fp
 800473a:	9209      	str	r2, [sp, #36]	@ 0x24
 800473c:	f89a 3000 	ldrb.w	r3, [sl]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 809f 	beq.w	8004884 <_vfiprintf_r+0x1ec>
 8004746:	2300      	movs	r3, #0
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004750:	f10a 0a01 	add.w	sl, sl, #1
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	9307      	str	r3, [sp, #28]
 8004758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800475c:	931a      	str	r3, [sp, #104]	@ 0x68
 800475e:	4654      	mov	r4, sl
 8004760:	2205      	movs	r2, #5
 8004762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004766:	4853      	ldr	r0, [pc, #332]	@ (80048b4 <_vfiprintf_r+0x21c>)
 8004768:	f7fb fd3a 	bl	80001e0 <memchr>
 800476c:	9a04      	ldr	r2, [sp, #16]
 800476e:	b9d8      	cbnz	r0, 80047a8 <_vfiprintf_r+0x110>
 8004770:	06d1      	lsls	r1, r2, #27
 8004772:	bf44      	itt	mi
 8004774:	2320      	movmi	r3, #32
 8004776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800477a:	0713      	lsls	r3, r2, #28
 800477c:	bf44      	itt	mi
 800477e:	232b      	movmi	r3, #43	@ 0x2b
 8004780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004784:	f89a 3000 	ldrb.w	r3, [sl]
 8004788:	2b2a      	cmp	r3, #42	@ 0x2a
 800478a:	d015      	beq.n	80047b8 <_vfiprintf_r+0x120>
 800478c:	9a07      	ldr	r2, [sp, #28]
 800478e:	4654      	mov	r4, sl
 8004790:	2000      	movs	r0, #0
 8004792:	f04f 0c0a 	mov.w	ip, #10
 8004796:	4621      	mov	r1, r4
 8004798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479c:	3b30      	subs	r3, #48	@ 0x30
 800479e:	2b09      	cmp	r3, #9
 80047a0:	d94b      	bls.n	800483a <_vfiprintf_r+0x1a2>
 80047a2:	b1b0      	cbz	r0, 80047d2 <_vfiprintf_r+0x13a>
 80047a4:	9207      	str	r2, [sp, #28]
 80047a6:	e014      	b.n	80047d2 <_vfiprintf_r+0x13a>
 80047a8:	eba0 0308 	sub.w	r3, r0, r8
 80047ac:	fa09 f303 	lsl.w	r3, r9, r3
 80047b0:	4313      	orrs	r3, r2
 80047b2:	9304      	str	r3, [sp, #16]
 80047b4:	46a2      	mov	sl, r4
 80047b6:	e7d2      	b.n	800475e <_vfiprintf_r+0xc6>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	1d19      	adds	r1, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	9103      	str	r1, [sp, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bfbb      	ittet	lt
 80047c4:	425b      	neglt	r3, r3
 80047c6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ca:	9307      	strge	r3, [sp, #28]
 80047cc:	9307      	strlt	r3, [sp, #28]
 80047ce:	bfb8      	it	lt
 80047d0:	9204      	strlt	r2, [sp, #16]
 80047d2:	7823      	ldrb	r3, [r4, #0]
 80047d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80047d6:	d10a      	bne.n	80047ee <_vfiprintf_r+0x156>
 80047d8:	7863      	ldrb	r3, [r4, #1]
 80047da:	2b2a      	cmp	r3, #42	@ 0x2a
 80047dc:	d132      	bne.n	8004844 <_vfiprintf_r+0x1ac>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	1d1a      	adds	r2, r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	9203      	str	r2, [sp, #12]
 80047e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047ea:	3402      	adds	r4, #2
 80047ec:	9305      	str	r3, [sp, #20]
 80047ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048c4 <_vfiprintf_r+0x22c>
 80047f2:	7821      	ldrb	r1, [r4, #0]
 80047f4:	2203      	movs	r2, #3
 80047f6:	4650      	mov	r0, sl
 80047f8:	f7fb fcf2 	bl	80001e0 <memchr>
 80047fc:	b138      	cbz	r0, 800480e <_vfiprintf_r+0x176>
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	eba0 000a 	sub.w	r0, r0, sl
 8004804:	2240      	movs	r2, #64	@ 0x40
 8004806:	4082      	lsls	r2, r0
 8004808:	4313      	orrs	r3, r2
 800480a:	3401      	adds	r4, #1
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004812:	4829      	ldr	r0, [pc, #164]	@ (80048b8 <_vfiprintf_r+0x220>)
 8004814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004818:	2206      	movs	r2, #6
 800481a:	f7fb fce1 	bl	80001e0 <memchr>
 800481e:	2800      	cmp	r0, #0
 8004820:	d03f      	beq.n	80048a2 <_vfiprintf_r+0x20a>
 8004822:	4b26      	ldr	r3, [pc, #152]	@ (80048bc <_vfiprintf_r+0x224>)
 8004824:	bb1b      	cbnz	r3, 800486e <_vfiprintf_r+0x1d6>
 8004826:	9b03      	ldr	r3, [sp, #12]
 8004828:	3307      	adds	r3, #7
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	3308      	adds	r3, #8
 8004830:	9303      	str	r3, [sp, #12]
 8004832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004834:	443b      	add	r3, r7
 8004836:	9309      	str	r3, [sp, #36]	@ 0x24
 8004838:	e76a      	b.n	8004710 <_vfiprintf_r+0x78>
 800483a:	fb0c 3202 	mla	r2, ip, r2, r3
 800483e:	460c      	mov	r4, r1
 8004840:	2001      	movs	r0, #1
 8004842:	e7a8      	b.n	8004796 <_vfiprintf_r+0xfe>
 8004844:	2300      	movs	r3, #0
 8004846:	3401      	adds	r4, #1
 8004848:	9305      	str	r3, [sp, #20]
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0c0a 	mov.w	ip, #10
 8004850:	4620      	mov	r0, r4
 8004852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004856:	3a30      	subs	r2, #48	@ 0x30
 8004858:	2a09      	cmp	r2, #9
 800485a:	d903      	bls.n	8004864 <_vfiprintf_r+0x1cc>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0c6      	beq.n	80047ee <_vfiprintf_r+0x156>
 8004860:	9105      	str	r1, [sp, #20]
 8004862:	e7c4      	b.n	80047ee <_vfiprintf_r+0x156>
 8004864:	fb0c 2101 	mla	r1, ip, r1, r2
 8004868:	4604      	mov	r4, r0
 800486a:	2301      	movs	r3, #1
 800486c:	e7f0      	b.n	8004850 <_vfiprintf_r+0x1b8>
 800486e:	ab03      	add	r3, sp, #12
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	462a      	mov	r2, r5
 8004874:	4b12      	ldr	r3, [pc, #72]	@ (80048c0 <_vfiprintf_r+0x228>)
 8004876:	a904      	add	r1, sp, #16
 8004878:	4630      	mov	r0, r6
 800487a:	f3af 8000 	nop.w
 800487e:	4607      	mov	r7, r0
 8004880:	1c78      	adds	r0, r7, #1
 8004882:	d1d6      	bne.n	8004832 <_vfiprintf_r+0x19a>
 8004884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	d405      	bmi.n	8004896 <_vfiprintf_r+0x1fe>
 800488a:	89ab      	ldrh	r3, [r5, #12]
 800488c:	059a      	lsls	r2, r3, #22
 800488e:	d402      	bmi.n	8004896 <_vfiprintf_r+0x1fe>
 8004890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004892:	f7ff fc77 	bl	8004184 <__retarget_lock_release_recursive>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	065b      	lsls	r3, r3, #25
 800489a:	f53f af1f 	bmi.w	80046dc <_vfiprintf_r+0x44>
 800489e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048a0:	e71e      	b.n	80046e0 <_vfiprintf_r+0x48>
 80048a2:	ab03      	add	r3, sp, #12
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	462a      	mov	r2, r5
 80048a8:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <_vfiprintf_r+0x228>)
 80048aa:	a904      	add	r1, sp, #16
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f879 	bl	80049a4 <_printf_i>
 80048b2:	e7e4      	b.n	800487e <_vfiprintf_r+0x1e6>
 80048b4:	08004fd4 	.word	0x08004fd4
 80048b8:	08004fde 	.word	0x08004fde
 80048bc:	00000000 	.word	0x00000000
 80048c0:	08004673 	.word	0x08004673
 80048c4:	08004fda 	.word	0x08004fda

080048c8 <_printf_common>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	4616      	mov	r6, r2
 80048ce:	4698      	mov	r8, r3
 80048d0:	688a      	ldr	r2, [r1, #8]
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048d8:	4293      	cmp	r3, r2
 80048da:	bfb8      	it	lt
 80048dc:	4613      	movlt	r3, r2
 80048de:	6033      	str	r3, [r6, #0]
 80048e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048e4:	4607      	mov	r7, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	b10a      	cbz	r2, 80048ee <_printf_common+0x26>
 80048ea:	3301      	adds	r3, #1
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	0699      	lsls	r1, r3, #26
 80048f2:	bf42      	ittt	mi
 80048f4:	6833      	ldrmi	r3, [r6, #0]
 80048f6:	3302      	addmi	r3, #2
 80048f8:	6033      	strmi	r3, [r6, #0]
 80048fa:	6825      	ldr	r5, [r4, #0]
 80048fc:	f015 0506 	ands.w	r5, r5, #6
 8004900:	d106      	bne.n	8004910 <_printf_common+0x48>
 8004902:	f104 0a19 	add.w	sl, r4, #25
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	6832      	ldr	r2, [r6, #0]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	42ab      	cmp	r3, r5
 800490e:	dc26      	bgt.n	800495e <_printf_common+0x96>
 8004910:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	3b00      	subs	r3, #0
 8004918:	bf18      	it	ne
 800491a:	2301      	movne	r3, #1
 800491c:	0692      	lsls	r2, r2, #26
 800491e:	d42b      	bmi.n	8004978 <_printf_common+0xb0>
 8004920:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004924:	4641      	mov	r1, r8
 8004926:	4638      	mov	r0, r7
 8004928:	47c8      	blx	r9
 800492a:	3001      	adds	r0, #1
 800492c:	d01e      	beq.n	800496c <_printf_common+0xa4>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	6922      	ldr	r2, [r4, #16]
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	2b04      	cmp	r3, #4
 8004938:	bf02      	ittt	eq
 800493a:	68e5      	ldreq	r5, [r4, #12]
 800493c:	6833      	ldreq	r3, [r6, #0]
 800493e:	1aed      	subeq	r5, r5, r3
 8004940:	68a3      	ldr	r3, [r4, #8]
 8004942:	bf0c      	ite	eq
 8004944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004948:	2500      	movne	r5, #0
 800494a:	4293      	cmp	r3, r2
 800494c:	bfc4      	itt	gt
 800494e:	1a9b      	subgt	r3, r3, r2
 8004950:	18ed      	addgt	r5, r5, r3
 8004952:	2600      	movs	r6, #0
 8004954:	341a      	adds	r4, #26
 8004956:	42b5      	cmp	r5, r6
 8004958:	d11a      	bne.n	8004990 <_printf_common+0xc8>
 800495a:	2000      	movs	r0, #0
 800495c:	e008      	b.n	8004970 <_printf_common+0xa8>
 800495e:	2301      	movs	r3, #1
 8004960:	4652      	mov	r2, sl
 8004962:	4641      	mov	r1, r8
 8004964:	4638      	mov	r0, r7
 8004966:	47c8      	blx	r9
 8004968:	3001      	adds	r0, #1
 800496a:	d103      	bne.n	8004974 <_printf_common+0xac>
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	3501      	adds	r5, #1
 8004976:	e7c6      	b.n	8004906 <_printf_common+0x3e>
 8004978:	18e1      	adds	r1, r4, r3
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	2030      	movs	r0, #48	@ 0x30
 800497e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004982:	4422      	add	r2, r4
 8004984:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004988:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800498c:	3302      	adds	r3, #2
 800498e:	e7c7      	b.n	8004920 <_printf_common+0x58>
 8004990:	2301      	movs	r3, #1
 8004992:	4622      	mov	r2, r4
 8004994:	4641      	mov	r1, r8
 8004996:	4638      	mov	r0, r7
 8004998:	47c8      	blx	r9
 800499a:	3001      	adds	r0, #1
 800499c:	d0e6      	beq.n	800496c <_printf_common+0xa4>
 800499e:	3601      	adds	r6, #1
 80049a0:	e7d9      	b.n	8004956 <_printf_common+0x8e>
	...

080049a4 <_printf_i>:
 80049a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a8:	7e0f      	ldrb	r7, [r1, #24]
 80049aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049ac:	2f78      	cmp	r7, #120	@ 0x78
 80049ae:	4691      	mov	r9, r2
 80049b0:	4680      	mov	r8, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	469a      	mov	sl, r3
 80049b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049ba:	d807      	bhi.n	80049cc <_printf_i+0x28>
 80049bc:	2f62      	cmp	r7, #98	@ 0x62
 80049be:	d80a      	bhi.n	80049d6 <_printf_i+0x32>
 80049c0:	2f00      	cmp	r7, #0
 80049c2:	f000 80d2 	beq.w	8004b6a <_printf_i+0x1c6>
 80049c6:	2f58      	cmp	r7, #88	@ 0x58
 80049c8:	f000 80b9 	beq.w	8004b3e <_printf_i+0x19a>
 80049cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049d4:	e03a      	b.n	8004a4c <_printf_i+0xa8>
 80049d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049da:	2b15      	cmp	r3, #21
 80049dc:	d8f6      	bhi.n	80049cc <_printf_i+0x28>
 80049de:	a101      	add	r1, pc, #4	@ (adr r1, 80049e4 <_printf_i+0x40>)
 80049e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e4:	08004a3d 	.word	0x08004a3d
 80049e8:	08004a51 	.word	0x08004a51
 80049ec:	080049cd 	.word	0x080049cd
 80049f0:	080049cd 	.word	0x080049cd
 80049f4:	080049cd 	.word	0x080049cd
 80049f8:	080049cd 	.word	0x080049cd
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	080049cd 	.word	0x080049cd
 8004a04:	080049cd 	.word	0x080049cd
 8004a08:	080049cd 	.word	0x080049cd
 8004a0c:	080049cd 	.word	0x080049cd
 8004a10:	08004b51 	.word	0x08004b51
 8004a14:	08004a7b 	.word	0x08004a7b
 8004a18:	08004b0b 	.word	0x08004b0b
 8004a1c:	080049cd 	.word	0x080049cd
 8004a20:	080049cd 	.word	0x080049cd
 8004a24:	08004b73 	.word	0x08004b73
 8004a28:	080049cd 	.word	0x080049cd
 8004a2c:	08004a7b 	.word	0x08004a7b
 8004a30:	080049cd 	.word	0x080049cd
 8004a34:	080049cd 	.word	0x080049cd
 8004a38:	08004b13 	.word	0x08004b13
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6032      	str	r2, [r6, #0]
 8004a44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e09d      	b.n	8004b8c <_printf_i+0x1e8>
 8004a50:	6833      	ldr	r3, [r6, #0]
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	1d19      	adds	r1, r3, #4
 8004a56:	6031      	str	r1, [r6, #0]
 8004a58:	0606      	lsls	r6, r0, #24
 8004a5a:	d501      	bpl.n	8004a60 <_printf_i+0xbc>
 8004a5c:	681d      	ldr	r5, [r3, #0]
 8004a5e:	e003      	b.n	8004a68 <_printf_i+0xc4>
 8004a60:	0645      	lsls	r5, r0, #25
 8004a62:	d5fb      	bpl.n	8004a5c <_printf_i+0xb8>
 8004a64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	da03      	bge.n	8004a74 <_printf_i+0xd0>
 8004a6c:	232d      	movs	r3, #45	@ 0x2d
 8004a6e:	426d      	negs	r5, r5
 8004a70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a74:	4859      	ldr	r0, [pc, #356]	@ (8004bdc <_printf_i+0x238>)
 8004a76:	230a      	movs	r3, #10
 8004a78:	e011      	b.n	8004a9e <_printf_i+0xfa>
 8004a7a:	6821      	ldr	r1, [r4, #0]
 8004a7c:	6833      	ldr	r3, [r6, #0]
 8004a7e:	0608      	lsls	r0, r1, #24
 8004a80:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a84:	d402      	bmi.n	8004a8c <_printf_i+0xe8>
 8004a86:	0649      	lsls	r1, r1, #25
 8004a88:	bf48      	it	mi
 8004a8a:	b2ad      	uxthmi	r5, r5
 8004a8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a8e:	4853      	ldr	r0, [pc, #332]	@ (8004bdc <_printf_i+0x238>)
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	bf14      	ite	ne
 8004a94:	230a      	movne	r3, #10
 8004a96:	2308      	moveq	r3, #8
 8004a98:	2100      	movs	r1, #0
 8004a9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a9e:	6866      	ldr	r6, [r4, #4]
 8004aa0:	60a6      	str	r6, [r4, #8]
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	bfa2      	ittt	ge
 8004aa6:	6821      	ldrge	r1, [r4, #0]
 8004aa8:	f021 0104 	bicge.w	r1, r1, #4
 8004aac:	6021      	strge	r1, [r4, #0]
 8004aae:	b90d      	cbnz	r5, 8004ab4 <_printf_i+0x110>
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	d04b      	beq.n	8004b4c <_printf_i+0x1a8>
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aba:	fb03 5711 	mls	r7, r3, r1, r5
 8004abe:	5dc7      	ldrb	r7, [r0, r7]
 8004ac0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ac4:	462f      	mov	r7, r5
 8004ac6:	42bb      	cmp	r3, r7
 8004ac8:	460d      	mov	r5, r1
 8004aca:	d9f4      	bls.n	8004ab6 <_printf_i+0x112>
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d10b      	bne.n	8004ae8 <_printf_i+0x144>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	07df      	lsls	r7, r3, #31
 8004ad4:	d508      	bpl.n	8004ae8 <_printf_i+0x144>
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	6861      	ldr	r1, [r4, #4]
 8004ada:	4299      	cmp	r1, r3
 8004adc:	bfde      	ittt	le
 8004ade:	2330      	movle	r3, #48	@ 0x30
 8004ae0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ae4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ae8:	1b92      	subs	r2, r2, r6
 8004aea:	6122      	str	r2, [r4, #16]
 8004aec:	f8cd a000 	str.w	sl, [sp]
 8004af0:	464b      	mov	r3, r9
 8004af2:	aa03      	add	r2, sp, #12
 8004af4:	4621      	mov	r1, r4
 8004af6:	4640      	mov	r0, r8
 8004af8:	f7ff fee6 	bl	80048c8 <_printf_common>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d14a      	bne.n	8004b96 <_printf_i+0x1f2>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	b004      	add	sp, #16
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	f043 0320 	orr.w	r3, r3, #32
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	4833      	ldr	r0, [pc, #204]	@ (8004be0 <_printf_i+0x23c>)
 8004b14:	2778      	movs	r7, #120	@ 0x78
 8004b16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	6831      	ldr	r1, [r6, #0]
 8004b1e:	061f      	lsls	r7, r3, #24
 8004b20:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b24:	d402      	bmi.n	8004b2c <_printf_i+0x188>
 8004b26:	065f      	lsls	r7, r3, #25
 8004b28:	bf48      	it	mi
 8004b2a:	b2ad      	uxthmi	r5, r5
 8004b2c:	6031      	str	r1, [r6, #0]
 8004b2e:	07d9      	lsls	r1, r3, #31
 8004b30:	bf44      	itt	mi
 8004b32:	f043 0320 	orrmi.w	r3, r3, #32
 8004b36:	6023      	strmi	r3, [r4, #0]
 8004b38:	b11d      	cbz	r5, 8004b42 <_printf_i+0x19e>
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	e7ac      	b.n	8004a98 <_printf_i+0xf4>
 8004b3e:	4827      	ldr	r0, [pc, #156]	@ (8004bdc <_printf_i+0x238>)
 8004b40:	e7e9      	b.n	8004b16 <_printf_i+0x172>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	f023 0320 	bic.w	r3, r3, #32
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	e7f6      	b.n	8004b3a <_printf_i+0x196>
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	e7bd      	b.n	8004acc <_printf_i+0x128>
 8004b50:	6833      	ldr	r3, [r6, #0]
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	6961      	ldr	r1, [r4, #20]
 8004b56:	1d18      	adds	r0, r3, #4
 8004b58:	6030      	str	r0, [r6, #0]
 8004b5a:	062e      	lsls	r6, r5, #24
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	d501      	bpl.n	8004b64 <_printf_i+0x1c0>
 8004b60:	6019      	str	r1, [r3, #0]
 8004b62:	e002      	b.n	8004b6a <_printf_i+0x1c6>
 8004b64:	0668      	lsls	r0, r5, #25
 8004b66:	d5fb      	bpl.n	8004b60 <_printf_i+0x1bc>
 8004b68:	8019      	strh	r1, [r3, #0]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	4616      	mov	r6, r2
 8004b70:	e7bc      	b.n	8004aec <_printf_i+0x148>
 8004b72:	6833      	ldr	r3, [r6, #0]
 8004b74:	1d1a      	adds	r2, r3, #4
 8004b76:	6032      	str	r2, [r6, #0]
 8004b78:	681e      	ldr	r6, [r3, #0]
 8004b7a:	6862      	ldr	r2, [r4, #4]
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f7fb fb2e 	bl	80001e0 <memchr>
 8004b84:	b108      	cbz	r0, 8004b8a <_printf_i+0x1e6>
 8004b86:	1b80      	subs	r0, r0, r6
 8004b88:	6060      	str	r0, [r4, #4]
 8004b8a:	6863      	ldr	r3, [r4, #4]
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b94:	e7aa      	b.n	8004aec <_printf_i+0x148>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	4632      	mov	r2, r6
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	47d0      	blx	sl
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d0ad      	beq.n	8004b00 <_printf_i+0x15c>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	079b      	lsls	r3, r3, #30
 8004ba8:	d413      	bmi.n	8004bd2 <_printf_i+0x22e>
 8004baa:	68e0      	ldr	r0, [r4, #12]
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	4298      	cmp	r0, r3
 8004bb0:	bfb8      	it	lt
 8004bb2:	4618      	movlt	r0, r3
 8004bb4:	e7a6      	b.n	8004b04 <_printf_i+0x160>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4632      	mov	r2, r6
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	47d0      	blx	sl
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d09d      	beq.n	8004b00 <_printf_i+0x15c>
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	68e3      	ldr	r3, [r4, #12]
 8004bc8:	9903      	ldr	r1, [sp, #12]
 8004bca:	1a5b      	subs	r3, r3, r1
 8004bcc:	42ab      	cmp	r3, r5
 8004bce:	dcf2      	bgt.n	8004bb6 <_printf_i+0x212>
 8004bd0:	e7eb      	b.n	8004baa <_printf_i+0x206>
 8004bd2:	2500      	movs	r5, #0
 8004bd4:	f104 0619 	add.w	r6, r4, #25
 8004bd8:	e7f5      	b.n	8004bc6 <_printf_i+0x222>
 8004bda:	bf00      	nop
 8004bdc:	08004fe5 	.word	0x08004fe5
 8004be0:	08004ff6 	.word	0x08004ff6

08004be4 <__sflush_r>:
 8004be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	0716      	lsls	r6, r2, #28
 8004bee:	4605      	mov	r5, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	d454      	bmi.n	8004c9e <__sflush_r+0xba>
 8004bf4:	684b      	ldr	r3, [r1, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dc02      	bgt.n	8004c00 <__sflush_r+0x1c>
 8004bfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dd48      	ble.n	8004c92 <__sflush_r+0xae>
 8004c00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c02:	2e00      	cmp	r6, #0
 8004c04:	d045      	beq.n	8004c92 <__sflush_r+0xae>
 8004c06:	2300      	movs	r3, #0
 8004c08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c0c:	682f      	ldr	r7, [r5, #0]
 8004c0e:	6a21      	ldr	r1, [r4, #32]
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	d030      	beq.n	8004c76 <__sflush_r+0x92>
 8004c14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	0759      	lsls	r1, r3, #29
 8004c1a:	d505      	bpl.n	8004c28 <__sflush_r+0x44>
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c22:	b10b      	cbz	r3, 8004c28 <__sflush_r+0x44>
 8004c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c2c:	6a21      	ldr	r1, [r4, #32]
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b0      	blx	r6
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	d106      	bne.n	8004c46 <__sflush_r+0x62>
 8004c38:	6829      	ldr	r1, [r5, #0]
 8004c3a:	291d      	cmp	r1, #29
 8004c3c:	d82b      	bhi.n	8004c96 <__sflush_r+0xb2>
 8004c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce8 <__sflush_r+0x104>)
 8004c40:	410a      	asrs	r2, r1
 8004c42:	07d6      	lsls	r6, r2, #31
 8004c44:	d427      	bmi.n	8004c96 <__sflush_r+0xb2>
 8004c46:	2200      	movs	r2, #0
 8004c48:	6062      	str	r2, [r4, #4]
 8004c4a:	04d9      	lsls	r1, r3, #19
 8004c4c:	6922      	ldr	r2, [r4, #16]
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	d504      	bpl.n	8004c5c <__sflush_r+0x78>
 8004c52:	1c42      	adds	r2, r0, #1
 8004c54:	d101      	bne.n	8004c5a <__sflush_r+0x76>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	b903      	cbnz	r3, 8004c5c <__sflush_r+0x78>
 8004c5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c5e:	602f      	str	r7, [r5, #0]
 8004c60:	b1b9      	cbz	r1, 8004c92 <__sflush_r+0xae>
 8004c62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d002      	beq.n	8004c70 <__sflush_r+0x8c>
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f7ff fa9a 	bl	80041a4 <_free_r>
 8004c70:	2300      	movs	r3, #0
 8004c72:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c74:	e00d      	b.n	8004c92 <__sflush_r+0xae>
 8004c76:	2301      	movs	r3, #1
 8004c78:	4628      	mov	r0, r5
 8004c7a:	47b0      	blx	r6
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	1c50      	adds	r0, r2, #1
 8004c80:	d1c9      	bne.n	8004c16 <__sflush_r+0x32>
 8004c82:	682b      	ldr	r3, [r5, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0c6      	beq.n	8004c16 <__sflush_r+0x32>
 8004c88:	2b1d      	cmp	r3, #29
 8004c8a:	d001      	beq.n	8004c90 <__sflush_r+0xac>
 8004c8c:	2b16      	cmp	r3, #22
 8004c8e:	d11e      	bne.n	8004cce <__sflush_r+0xea>
 8004c90:	602f      	str	r7, [r5, #0]
 8004c92:	2000      	movs	r0, #0
 8004c94:	e022      	b.n	8004cdc <__sflush_r+0xf8>
 8004c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c9a:	b21b      	sxth	r3, r3
 8004c9c:	e01b      	b.n	8004cd6 <__sflush_r+0xf2>
 8004c9e:	690f      	ldr	r7, [r1, #16]
 8004ca0:	2f00      	cmp	r7, #0
 8004ca2:	d0f6      	beq.n	8004c92 <__sflush_r+0xae>
 8004ca4:	0793      	lsls	r3, r2, #30
 8004ca6:	680e      	ldr	r6, [r1, #0]
 8004ca8:	bf08      	it	eq
 8004caa:	694b      	ldreq	r3, [r1, #20]
 8004cac:	600f      	str	r7, [r1, #0]
 8004cae:	bf18      	it	ne
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	eba6 0807 	sub.w	r8, r6, r7
 8004cb6:	608b      	str	r3, [r1, #8]
 8004cb8:	f1b8 0f00 	cmp.w	r8, #0
 8004cbc:	dde9      	ble.n	8004c92 <__sflush_r+0xae>
 8004cbe:	6a21      	ldr	r1, [r4, #32]
 8004cc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cc2:	4643      	mov	r3, r8
 8004cc4:	463a      	mov	r2, r7
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b0      	blx	r6
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	dc08      	bgt.n	8004ce0 <__sflush_r+0xfc>
 8004cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	4407      	add	r7, r0
 8004ce2:	eba8 0800 	sub.w	r8, r8, r0
 8004ce6:	e7e7      	b.n	8004cb8 <__sflush_r+0xd4>
 8004ce8:	dfbffffe 	.word	0xdfbffffe

08004cec <_fflush_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	690b      	ldr	r3, [r1, #16]
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	b913      	cbnz	r3, 8004cfc <_fflush_r+0x10>
 8004cf6:	2500      	movs	r5, #0
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	b118      	cbz	r0, 8004d06 <_fflush_r+0x1a>
 8004cfe:	6a03      	ldr	r3, [r0, #32]
 8004d00:	b90b      	cbnz	r3, 8004d06 <_fflush_r+0x1a>
 8004d02:	f7ff f827 	bl	8003d54 <__sinit>
 8004d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f3      	beq.n	8004cf6 <_fflush_r+0xa>
 8004d0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d10:	07d0      	lsls	r0, r2, #31
 8004d12:	d404      	bmi.n	8004d1e <_fflush_r+0x32>
 8004d14:	0599      	lsls	r1, r3, #22
 8004d16:	d402      	bmi.n	8004d1e <_fflush_r+0x32>
 8004d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d1a:	f7ff fa32 	bl	8004182 <__retarget_lock_acquire_recursive>
 8004d1e:	4628      	mov	r0, r5
 8004d20:	4621      	mov	r1, r4
 8004d22:	f7ff ff5f 	bl	8004be4 <__sflush_r>
 8004d26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d28:	07da      	lsls	r2, r3, #31
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	d4e4      	bmi.n	8004cf8 <_fflush_r+0xc>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	059b      	lsls	r3, r3, #22
 8004d32:	d4e1      	bmi.n	8004cf8 <_fflush_r+0xc>
 8004d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d36:	f7ff fa25 	bl	8004184 <__retarget_lock_release_recursive>
 8004d3a:	e7dd      	b.n	8004cf8 <_fflush_r+0xc>

08004d3c <__swhatbuf_r>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	2900      	cmp	r1, #0
 8004d46:	b096      	sub	sp, #88	@ 0x58
 8004d48:	4615      	mov	r5, r2
 8004d4a:	461e      	mov	r6, r3
 8004d4c:	da0d      	bge.n	8004d6a <__swhatbuf_r+0x2e>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	bf14      	ite	ne
 8004d5a:	2340      	movne	r3, #64	@ 0x40
 8004d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d60:	2000      	movs	r0, #0
 8004d62:	6031      	str	r1, [r6, #0]
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	b016      	add	sp, #88	@ 0x58
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	466a      	mov	r2, sp
 8004d6c:	f000 f862 	bl	8004e34 <_fstat_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	dbec      	blt.n	8004d4e <__swhatbuf_r+0x12>
 8004d74:	9901      	ldr	r1, [sp, #4]
 8004d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d7e:	4259      	negs	r1, r3
 8004d80:	4159      	adcs	r1, r3
 8004d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d86:	e7eb      	b.n	8004d60 <__swhatbuf_r+0x24>

08004d88 <__smakebuf_r>:
 8004d88:	898b      	ldrh	r3, [r1, #12]
 8004d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d8c:	079d      	lsls	r5, r3, #30
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	d507      	bpl.n	8004da4 <__smakebuf_r+0x1c>
 8004d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	6163      	str	r3, [r4, #20]
 8004da0:	b003      	add	sp, #12
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da4:	ab01      	add	r3, sp, #4
 8004da6:	466a      	mov	r2, sp
 8004da8:	f7ff ffc8 	bl	8004d3c <__swhatbuf_r>
 8004dac:	9f00      	ldr	r7, [sp, #0]
 8004dae:	4605      	mov	r5, r0
 8004db0:	4639      	mov	r1, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff fa62 	bl	800427c <_malloc_r>
 8004db8:	b948      	cbnz	r0, 8004dce <__smakebuf_r+0x46>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	059a      	lsls	r2, r3, #22
 8004dc0:	d4ee      	bmi.n	8004da0 <__smakebuf_r+0x18>
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	e7e2      	b.n	8004d94 <__smakebuf_r+0xc>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	6020      	str	r0, [r4, #0]
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	9b01      	ldr	r3, [sp, #4]
 8004dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dde:	b15b      	cbz	r3, 8004df8 <__smakebuf_r+0x70>
 8004de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 f837 	bl	8004e58 <_isatty_r>
 8004dea:	b128      	cbz	r0, 8004df8 <__smakebuf_r+0x70>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	431d      	orrs	r5, r3
 8004dfc:	81a5      	strh	r5, [r4, #12]
 8004dfe:	e7cf      	b.n	8004da0 <__smakebuf_r+0x18>

08004e00 <memmove>:
 8004e00:	4288      	cmp	r0, r1
 8004e02:	b510      	push	{r4, lr}
 8004e04:	eb01 0402 	add.w	r4, r1, r2
 8004e08:	d902      	bls.n	8004e10 <memmove+0x10>
 8004e0a:	4284      	cmp	r4, r0
 8004e0c:	4623      	mov	r3, r4
 8004e0e:	d807      	bhi.n	8004e20 <memmove+0x20>
 8004e10:	1e43      	subs	r3, r0, #1
 8004e12:	42a1      	cmp	r1, r4
 8004e14:	d008      	beq.n	8004e28 <memmove+0x28>
 8004e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e1e:	e7f8      	b.n	8004e12 <memmove+0x12>
 8004e20:	4402      	add	r2, r0
 8004e22:	4601      	mov	r1, r0
 8004e24:	428a      	cmp	r2, r1
 8004e26:	d100      	bne.n	8004e2a <memmove+0x2a>
 8004e28:	bd10      	pop	{r4, pc}
 8004e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e32:	e7f7      	b.n	8004e24 <memmove+0x24>

08004e34 <_fstat_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d07      	ldr	r5, [pc, #28]	@ (8004e54 <_fstat_r+0x20>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	f7fb ffd0 	bl	8000de6 <_fstat>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	d102      	bne.n	8004e50 <_fstat_r+0x1c>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	b103      	cbz	r3, 8004e50 <_fstat_r+0x1c>
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	bd38      	pop	{r3, r4, r5, pc}
 8004e52:	bf00      	nop
 8004e54:	2000045c 	.word	0x2000045c

08004e58 <_isatty_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d06      	ldr	r5, [pc, #24]	@ (8004e74 <_isatty_r+0x1c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	f7fb ffcf 	bl	8000e06 <_isatty>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_isatty_r+0x1a>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_isatty_r+0x1a>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	2000045c 	.word	0x2000045c

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	@ (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb ffd8 	bl	8000e38 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	2000045c 	.word	0x2000045c

08004e98 <_realloc_r>:
 8004e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	4615      	mov	r5, r2
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	b921      	cbnz	r1, 8004eae <_realloc_r+0x16>
 8004ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	f7ff b9e7 	b.w	800427c <_malloc_r>
 8004eae:	b92a      	cbnz	r2, 8004ebc <_realloc_r+0x24>
 8004eb0:	f7ff f978 	bl	80041a4 <_free_r>
 8004eb4:	2400      	movs	r4, #0
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ebc:	f000 f81a 	bl	8004ef4 <_malloc_usable_size_r>
 8004ec0:	4285      	cmp	r5, r0
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	d802      	bhi.n	8004ecc <_realloc_r+0x34>
 8004ec6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eca:	d8f4      	bhi.n	8004eb6 <_realloc_r+0x1e>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f7ff f9d4 	bl	800427c <_malloc_r>
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d0ec      	beq.n	8004eb4 <_realloc_r+0x1c>
 8004eda:	42b5      	cmp	r5, r6
 8004edc:	462a      	mov	r2, r5
 8004ede:	4621      	mov	r1, r4
 8004ee0:	bf28      	it	cs
 8004ee2:	4632      	movcs	r2, r6
 8004ee4:	f7ff f94f 	bl	8004186 <memcpy>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4640      	mov	r0, r8
 8004eec:	f7ff f95a 	bl	80041a4 <_free_r>
 8004ef0:	463c      	mov	r4, r7
 8004ef2:	e7e0      	b.n	8004eb6 <_realloc_r+0x1e>

08004ef4 <_malloc_usable_size_r>:
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f18      	subs	r0, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfbc      	itt	lt
 8004efe:	580b      	ldrlt	r3, [r1, r0]
 8004f00:	18c0      	addlt	r0, r0, r3
 8004f02:	4770      	bx	lr

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	bf00      	nop
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
